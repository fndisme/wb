// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginResult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WebGame {
namespace Protocal {

namespace {

const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginResult_traits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginResult_FailedReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginResult_2eproto() {
  protobuf_AddDesc_LoginResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginResult.proto");
  GOOGLE_CHECK(file != NULL);
  LoginResult_descriptor_ = file->message_type(0);
  static const int LoginResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, failed_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, session_id_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  LoginResult_traits_descriptor_ = LoginResult_descriptor_->enum_type(0);
  LoginResult_FailedReason_descriptor_ = LoginResult_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginResult_2eproto() {
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
}

void protobuf_AddDesc_LoginResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LoginResult.proto\022\020WebGame.Protocal\"\234\001"
    "\n\013LoginResult\022\n\n\002ok\030\001 \002(\010\022\025\n\rfailed_reas"
    "on\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\022\020\n\010group_id\030"
    "\004 \001(\005\022\022\n\nsession_id\030\005 \001(\003\"\024\n\006traits\022\n\n\005v"
    "alue\020\356\007\"\033\n\014FailedReason\022\013\n\007RELOGIN\020\001", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginResult.proto", &protobuf_RegisterTypes);
  LoginResult::default_instance_ = new LoginResult();
  LoginResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginResult_2eproto {
  StaticDescriptorInitializer_LoginResult_2eproto() {
    protobuf_AddDesc_LoginResult_2eproto();
  }
} static_descriptor_initializer_LoginResult_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginResult_traits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_traits_descriptor_;
}
bool LoginResult_traits_IsValid(int value) {
  switch(value) {
    case 1006:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginResult_traits LoginResult::value;
const LoginResult_traits LoginResult::traits_MIN;
const LoginResult_traits LoginResult::traits_MAX;
const int LoginResult::traits_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LoginResult_FailedReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_FailedReason_descriptor_;
}
bool LoginResult_FailedReason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginResult_FailedReason LoginResult::RELOGIN;
const LoginResult_FailedReason LoginResult::FailedReason_MIN;
const LoginResult_FailedReason LoginResult::FailedReason_MAX;
const int LoginResult::FailedReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginResult::kOkFieldNumber;
const int LoginResult::kFailedReasonFieldNumber;
const int LoginResult::kPlayerIdFieldNumber;
const int LoginResult::kGroupIdFieldNumber;
const int LoginResult::kSessionIdFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  ok_ = false;
  failed_reason_ = 0;
  player_id_ = 0;
  group_id_ = 0;
  session_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginResult_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ok_ = false;
    failed_reason_ = 0;
    player_id_ = 0;
    group_id_ = 0;
    session_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_failed_reason;
        break;
      }

      // optional int32 failed_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_reason_)));
          set_has_failed_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session_id;
        break;
      }

      // optional int64 session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // optional int32 failed_reason = 2;
  if (has_failed_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->failed_reason(), output);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // optional int32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group_id(), output);
  }

  // optional int64 session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // optional int32 failed_reason = 2;
  if (has_failed_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->failed_reason(), target);
  }

  // optional int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // optional int32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->group_id(), target);
  }

  // optional int64 session_id = 5;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ok = 1;
    if (has_ok()) {
      total_size += 1 + 1;
    }

    // optional int32 failed_reason = 2;
    if (has_failed_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_reason());
    }

    // optional int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // optional int64 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      set_ok(from.ok());
    }
    if (from.has_failed_reason()) {
      set_failed_reason(from.failed_reason());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(failed_reason_, other->failed_reason_);
    std::swap(player_id_, other->player_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocal
}  // namespace WebGame

// @@protoc_insertion_point(global_scope)
