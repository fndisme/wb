// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PingPong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WebGame {
namespace Protocal {

namespace {

const ::google::protobuf::Descriptor* PingPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingPong_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PingPong_traits_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PingPong_2eproto() {
  protobuf_AddDesc_PingPong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PingPong.proto");
  GOOGLE_CHECK(file != NULL);
  PingPong_descriptor_ = file->message_type(0);
  static const int PingPong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, information_),
  };
  PingPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingPong_descriptor_,
      PingPong::default_instance_,
      PingPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingPong));
  PingPong_traits_descriptor_ = PingPong_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PingPong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingPong_descriptor_, &PingPong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PingPong_2eproto() {
  delete PingPong::default_instance_;
  delete PingPong_reflection_;
}

void protobuf_AddDesc_PingPong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PingPong.proto\022\020WebGame.Protocal\"5\n\010Pi"
    "ngPong\022\023\n\013information\030\001 \002(\014\"\024\n\006traits\022\n\n"
    "\005value\020\350\007", 89);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PingPong.proto", &protobuf_RegisterTypes);
  PingPong::default_instance_ = new PingPong();
  PingPong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PingPong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PingPong_2eproto {
  StaticDescriptorInitializer_PingPong_2eproto() {
    protobuf_AddDesc_PingPong_2eproto();
  }
} static_descriptor_initializer_PingPong_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PingPong_traits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPong_traits_descriptor_;
}
bool PingPong_traits_IsValid(int value) {
  switch(value) {
    case 1000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PingPong_traits PingPong::value;
const PingPong_traits PingPong::traits_MIN;
const PingPong_traits PingPong::traits_MAX;
const int PingPong::traits_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PingPong::kInformationFieldNumber;
#endif  // !_MSC_VER

PingPong::PingPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingPong::InitAsDefaultInstance() {
}

PingPong::PingPong(const PingPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingPong::SharedCtor() {
  _cached_size_ = 0;
  information_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingPong::~PingPong() {
  SharedDtor();
}

void PingPong::SharedDtor() {
  if (information_ != &::google::protobuf::internal::kEmptyString) {
    delete information_;
  }
  if (this != default_instance_) {
  }
}

void PingPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPong_descriptor_;
}

const PingPong& PingPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PingPong_2eproto();  return *default_instance_;
}

PingPong* PingPong::default_instance_ = NULL;

PingPong* PingPong::New() const {
  return new PingPong;
}

void PingPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_information()) {
      if (information_ != &::google::protobuf::internal::kEmptyString) {
        information_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes information = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_information()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes information = 1;
  if (has_information()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->information(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes information = 1;
  if (has_information()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->information(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingPong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes information = 1;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->information());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingPong::MergeFrom(const PingPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_information()) {
      set_information(from.information());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPong::CopyFrom(const PingPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PingPong::Swap(PingPong* other) {
  if (other != this) {
    std::swap(information_, other->information_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingPong_descriptor_;
  metadata.reflection = PingPong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocal
}  // namespace WebGame

// @@protoc_insertion_point(global_scope)
