// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InnerLogin.proto

#ifndef PROTOBUF_InnerLogin_2eproto__INCLUDED
#define PROTOBUF_InnerLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WebGame {
namespace Protocal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_InnerLogin_2eproto();
void protobuf_AssignDesc_InnerLogin_2eproto();
void protobuf_ShutdownFile_InnerLogin_2eproto();

class InnerLogin;

enum InnerLogin_traits {
  InnerLogin_traits_value = 1005
};
bool InnerLogin_traits_IsValid(int value);
const InnerLogin_traits InnerLogin_traits_traits_MIN = InnerLogin_traits_value;
const InnerLogin_traits InnerLogin_traits_traits_MAX = InnerLogin_traits_value;
const int InnerLogin_traits_traits_ARRAYSIZE = InnerLogin_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* InnerLogin_traits_descriptor();
inline const ::std::string& InnerLogin_traits_Name(InnerLogin_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    InnerLogin_traits_descriptor(), value);
}
inline bool InnerLogin_traits_Parse(
    const ::std::string& name, InnerLogin_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InnerLogin_traits>(
    InnerLogin_traits_descriptor(), name, value);
}
// ===================================================================

class InnerLogin : public ::google::protobuf::Message {
 public:
  InnerLogin();
  virtual ~InnerLogin();

  InnerLogin(const InnerLogin& from);

  inline InnerLogin& operator=(const InnerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerLogin& default_instance();

  void Swap(InnerLogin* other);

  // implements Message ----------------------------------------------

  InnerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerLogin& from);
  void MergeFrom(const InnerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InnerLogin_traits traits;
  static const traits value = InnerLogin_traits_value;
  static inline bool traits_IsValid(int value) {
    return InnerLogin_traits_IsValid(value);
  }
  static const traits traits_MIN =
    InnerLogin_traits_traits_MIN;
  static const traits traits_MAX =
    InnerLogin_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    InnerLogin_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return InnerLogin_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return InnerLogin_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return InnerLogin_traits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int64 session = 3;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 3;
  inline ::google::protobuf::int64 session() const;
  inline void set_session(::google::protobuf::int64 value);

  // optional int32 property = 4;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline ::google::protobuf::int32 property() const;
  inline void set_property(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WebGame.Protocal.InnerLogin)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_property();
  inline void clear_has_property();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* key_;
  ::google::protobuf::int64 session_;
  ::google::protobuf::int32 property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_InnerLogin_2eproto();
  friend void protobuf_AssignDesc_InnerLogin_2eproto();
  friend void protobuf_ShutdownFile_InnerLogin_2eproto();

  void InitAsDefaultInstance();
  static InnerLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// InnerLogin

// required bytes name = 1;
inline bool InnerLogin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerLogin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerLogin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerLogin::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& InnerLogin::name() const {
  return *name_;
}
inline void InnerLogin::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void InnerLogin::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void InnerLogin::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InnerLogin::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* InnerLogin::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InnerLogin::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 2;
inline bool InnerLogin::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerLogin::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerLogin::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerLogin::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& InnerLogin::key() const {
  return *key_;
}
inline void InnerLogin::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void InnerLogin::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void InnerLogin::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InnerLogin::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* InnerLogin::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InnerLogin::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 session = 3;
inline bool InnerLogin::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerLogin::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerLogin::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerLogin::clear_session() {
  session_ = GOOGLE_LONGLONG(0);
  clear_has_session();
}
inline ::google::protobuf::int64 InnerLogin::session() const {
  return session_;
}
inline void InnerLogin::set_session(::google::protobuf::int64 value) {
  set_has_session();
  session_ = value;
}

// optional int32 property = 4;
inline bool InnerLogin::has_property() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerLogin::set_has_property() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerLogin::clear_has_property() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerLogin::clear_property() {
  property_ = 0;
  clear_has_property();
}
inline ::google::protobuf::int32 InnerLogin::property() const {
  return property_;
}
inline void InnerLogin::set_property(::google::protobuf::int32 value) {
  set_has_property();
  property_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocal
}  // namespace WebGame

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WebGame::Protocal::InnerLogin_traits>() {
  return ::WebGame::Protocal::InnerLogin_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InnerLogin_2eproto__INCLUDED
