// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityFlipBoardResult.proto

#ifndef PROTOBUF_UnityFlipBoardResult_2eproto__INCLUDED
#define PROTOBUF_UnityFlipBoardResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityFlipBoardResult_2eproto();
void protobuf_AssignDesc_UnityFlipBoardResult_2eproto();
void protobuf_ShutdownFile_UnityFlipBoardResult_2eproto();

class UnityFlipBoardResult;
class UnityFlipBoardResult_Award;

enum UnityFlipBoardResult_traits {
  UnityFlipBoardResult_traits_value = 3651
};
bool UnityFlipBoardResult_traits_IsValid(int value);
const UnityFlipBoardResult_traits UnityFlipBoardResult_traits_traits_MIN = UnityFlipBoardResult_traits_value;
const UnityFlipBoardResult_traits UnityFlipBoardResult_traits_traits_MAX = UnityFlipBoardResult_traits_value;
const int UnityFlipBoardResult_traits_traits_ARRAYSIZE = UnityFlipBoardResult_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityFlipBoardResult_traits_descriptor();
inline const ::std::string& UnityFlipBoardResult_traits_Name(UnityFlipBoardResult_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityFlipBoardResult_traits_descriptor(), value);
}
inline bool UnityFlipBoardResult_traits_Parse(
    const ::std::string& name, UnityFlipBoardResult_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityFlipBoardResult_traits>(
    UnityFlipBoardResult_traits_descriptor(), name, value);
}
enum UnityFlipBoardResult_award_type {
  UnityFlipBoardResult_award_type_MONEY = 0,
  UnityFlipBoardResult_award_type_MATERIAL = 1,
  UnityFlipBoardResult_award_type_PROP = 2
};
bool UnityFlipBoardResult_award_type_IsValid(int value);
const UnityFlipBoardResult_award_type UnityFlipBoardResult_award_type_award_type_MIN = UnityFlipBoardResult_award_type_MONEY;
const UnityFlipBoardResult_award_type UnityFlipBoardResult_award_type_award_type_MAX = UnityFlipBoardResult_award_type_PROP;
const int UnityFlipBoardResult_award_type_award_type_ARRAYSIZE = UnityFlipBoardResult_award_type_award_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityFlipBoardResult_award_type_descriptor();
inline const ::std::string& UnityFlipBoardResult_award_type_Name(UnityFlipBoardResult_award_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityFlipBoardResult_award_type_descriptor(), value);
}
inline bool UnityFlipBoardResult_award_type_Parse(
    const ::std::string& name, UnityFlipBoardResult_award_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityFlipBoardResult_award_type>(
    UnityFlipBoardResult_award_type_descriptor(), name, value);
}
// ===================================================================

class UnityFlipBoardResult_Award : public ::google::protobuf::Message {
 public:
  UnityFlipBoardResult_Award();
  virtual ~UnityFlipBoardResult_Award();
  
  UnityFlipBoardResult_Award(const UnityFlipBoardResult_Award& from);
  
  inline UnityFlipBoardResult_Award& operator=(const UnityFlipBoardResult_Award& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityFlipBoardResult_Award& default_instance();
  
  void Swap(UnityFlipBoardResult_Award* other);
  
  // implements Message ----------------------------------------------
  
  UnityFlipBoardResult_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityFlipBoardResult_Award& from);
  void MergeFrom(const UnityFlipBoardResult_Award& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .game_connection.UnityFlipBoardResult.award_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::game_connection::UnityFlipBoardResult_award_type type() const;
  inline void set_type(::game_connection::UnityFlipBoardResult_award_type value);
  
  // required int32 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 object_id() const;
  inline void set_object_id(::google::protobuf::int32 value);
  
  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityFlipBoardResult.Award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityFlipBoardResult_2eproto();
  friend void protobuf_AssignDesc_UnityFlipBoardResult_2eproto();
  friend void protobuf_ShutdownFile_UnityFlipBoardResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityFlipBoardResult_Award* default_instance_;
};
// -------------------------------------------------------------------

class UnityFlipBoardResult : public ::google::protobuf::Message {
 public:
  UnityFlipBoardResult();
  virtual ~UnityFlipBoardResult();
  
  UnityFlipBoardResult(const UnityFlipBoardResult& from);
  
  inline UnityFlipBoardResult& operator=(const UnityFlipBoardResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityFlipBoardResult& default_instance();
  
  void Swap(UnityFlipBoardResult* other);
  
  // implements Message ----------------------------------------------
  
  UnityFlipBoardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityFlipBoardResult& from);
  void MergeFrom(const UnityFlipBoardResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityFlipBoardResult_Award Award;
  
  typedef UnityFlipBoardResult_traits traits;
  static const traits value = UnityFlipBoardResult_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityFlipBoardResult_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityFlipBoardResult_traits_traits_MIN;
  static const traits traits_MAX =
    UnityFlipBoardResult_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityFlipBoardResult_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityFlipBoardResult_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityFlipBoardResult_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityFlipBoardResult_traits_Parse(name, value);
  }
  
  typedef UnityFlipBoardResult_award_type award_type;
  static const award_type MONEY = UnityFlipBoardResult_award_type_MONEY;
  static const award_type MATERIAL = UnityFlipBoardResult_award_type_MATERIAL;
  static const award_type PROP = UnityFlipBoardResult_award_type_PROP;
  static inline bool award_type_IsValid(int value) {
    return UnityFlipBoardResult_award_type_IsValid(value);
  }
  static const award_type award_type_MIN =
    UnityFlipBoardResult_award_type_award_type_MIN;
  static const award_type award_type_MAX =
    UnityFlipBoardResult_award_type_award_type_MAX;
  static const int award_type_ARRAYSIZE =
    UnityFlipBoardResult_award_type_award_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  award_type_descriptor() {
    return UnityFlipBoardResult_award_type_descriptor();
  }
  static inline const ::std::string& award_type_Name(award_type value) {
    return UnityFlipBoardResult_award_type_Name(value);
  }
  static inline bool award_type_Parse(const ::std::string& name,
      award_type* value) {
    return UnityFlipBoardResult_award_type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
  // optional .game_connection.UnityFlipBoardResult.Award award = 4;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 4;
  inline const ::game_connection::UnityFlipBoardResult_Award& award() const;
  inline ::game_connection::UnityFlipBoardResult_Award* mutable_award();
  inline ::game_connection::UnityFlipBoardResult_Award* release_award();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityFlipBoardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_award();
  inline void clear_has_award();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool result_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 position_;
  ::game_connection::UnityFlipBoardResult_Award* award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityFlipBoardResult_2eproto();
  friend void protobuf_AssignDesc_UnityFlipBoardResult_2eproto();
  friend void protobuf_ShutdownFile_UnityFlipBoardResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityFlipBoardResult* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityFlipBoardResult_Award

// required .game_connection.UnityFlipBoardResult.award_type type = 1;
inline bool UnityFlipBoardResult_Award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityFlipBoardResult_Award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityFlipBoardResult_Award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityFlipBoardResult_Award::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::game_connection::UnityFlipBoardResult_award_type UnityFlipBoardResult_Award::type() const {
  return static_cast< ::game_connection::UnityFlipBoardResult_award_type >(type_);
}
inline void UnityFlipBoardResult_Award::set_type(::game_connection::UnityFlipBoardResult_award_type value) {
  GOOGLE_DCHECK(::game_connection::UnityFlipBoardResult_award_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 object_id = 2;
inline bool UnityFlipBoardResult_Award::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityFlipBoardResult_Award::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityFlipBoardResult_Award::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityFlipBoardResult_Award::clear_object_id() {
  object_id_ = 0;
  clear_has_object_id();
}
inline ::google::protobuf::int32 UnityFlipBoardResult_Award::object_id() const {
  return object_id_;
}
inline void UnityFlipBoardResult_Award::set_object_id(::google::protobuf::int32 value) {
  set_has_object_id();
  object_id_ = value;
}

// required int32 count = 3;
inline bool UnityFlipBoardResult_Award::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityFlipBoardResult_Award::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityFlipBoardResult_Award::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityFlipBoardResult_Award::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 UnityFlipBoardResult_Award::count() const {
  return count_;
}
inline void UnityFlipBoardResult_Award::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// UnityFlipBoardResult

// required bool result = 1;
inline bool UnityFlipBoardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityFlipBoardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityFlipBoardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityFlipBoardResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool UnityFlipBoardResult::result() const {
  return result_;
}
inline void UnityFlipBoardResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional int32 server_id = 5;
inline bool UnityFlipBoardResult::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityFlipBoardResult::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityFlipBoardResult::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityFlipBoardResult::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 UnityFlipBoardResult::server_id() const {
  return server_id_;
}
inline void UnityFlipBoardResult::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 id = 2;
inline bool UnityFlipBoardResult::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityFlipBoardResult::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityFlipBoardResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityFlipBoardResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityFlipBoardResult::id() const {
  return id_;
}
inline void UnityFlipBoardResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 position = 3;
inline bool UnityFlipBoardResult::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityFlipBoardResult::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityFlipBoardResult::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityFlipBoardResult::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 UnityFlipBoardResult::position() const {
  return position_;
}
inline void UnityFlipBoardResult::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional .game_connection.UnityFlipBoardResult.Award award = 4;
inline bool UnityFlipBoardResult::has_award() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityFlipBoardResult::set_has_award() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityFlipBoardResult::clear_has_award() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityFlipBoardResult::clear_award() {
  if (award_ != NULL) award_->::game_connection::UnityFlipBoardResult_Award::Clear();
  clear_has_award();
}
inline const ::game_connection::UnityFlipBoardResult_Award& UnityFlipBoardResult::award() const {
  return award_ != NULL ? *award_ : *default_instance_->award_;
}
inline ::game_connection::UnityFlipBoardResult_Award* UnityFlipBoardResult::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::game_connection::UnityFlipBoardResult_Award;
  return award_;
}
inline ::game_connection::UnityFlipBoardResult_Award* UnityFlipBoardResult::release_award() {
  clear_has_award();
  ::game_connection::UnityFlipBoardResult_Award* temp = award_;
  award_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityFlipBoardResult_traits>() {
  return ::game_connection::UnityFlipBoardResult_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityFlipBoardResult_award_type>() {
  return ::game_connection::UnityFlipBoardResult_award_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityFlipBoardResult_2eproto__INCLUDED
