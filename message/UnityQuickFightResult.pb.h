// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityQuickFightResult.proto

#ifndef PROTOBUF_UnityQuickFightResult_2eproto__INCLUDED
#define PROTOBUF_UnityQuickFightResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityQuickFightResult_2eproto();
void protobuf_AssignDesc_UnityQuickFightResult_2eproto();
void protobuf_ShutdownFile_UnityQuickFightResult_2eproto();

class UnityQuickFightResult;
class UnityQuickFightResult_AdjuntantState;

enum UnityQuickFightResult_traits {
  UnityQuickFightResult_traits_value = 4317
};
bool UnityQuickFightResult_traits_IsValid(int value);
const UnityQuickFightResult_traits UnityQuickFightResult_traits_traits_MIN = UnityQuickFightResult_traits_value;
const UnityQuickFightResult_traits UnityQuickFightResult_traits_traits_MAX = UnityQuickFightResult_traits_value;
const int UnityQuickFightResult_traits_traits_ARRAYSIZE = UnityQuickFightResult_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickFightResult_traits_descriptor();
inline const ::std::string& UnityQuickFightResult_traits_Name(UnityQuickFightResult_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickFightResult_traits_descriptor(), value);
}
inline bool UnityQuickFightResult_traits_Parse(
    const ::std::string& name, UnityQuickFightResult_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickFightResult_traits>(
    UnityQuickFightResult_traits_descriptor(), name, value);
}
enum UnityQuickFightResult_Grade {
  UnityQuickFightResult_Grade_OneStar = 1,
  UnityQuickFightResult_Grade_TwoStar = 2,
  UnityQuickFightResult_Grade_ThreeStar = 3,
  UnityQuickFightResult_Grade_FourStar = 4,
  UnityQuickFightResult_Grade_FiveStar = 5
};
bool UnityQuickFightResult_Grade_IsValid(int value);
const UnityQuickFightResult_Grade UnityQuickFightResult_Grade_Grade_MIN = UnityQuickFightResult_Grade_OneStar;
const UnityQuickFightResult_Grade UnityQuickFightResult_Grade_Grade_MAX = UnityQuickFightResult_Grade_FiveStar;
const int UnityQuickFightResult_Grade_Grade_ARRAYSIZE = UnityQuickFightResult_Grade_Grade_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickFightResult_Grade_descriptor();
inline const ::std::string& UnityQuickFightResult_Grade_Name(UnityQuickFightResult_Grade value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickFightResult_Grade_descriptor(), value);
}
inline bool UnityQuickFightResult_Grade_Parse(
    const ::std::string& name, UnityQuickFightResult_Grade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickFightResult_Grade>(
    UnityQuickFightResult_Grade_descriptor(), name, value);
}
enum UnityQuickFightResult_Limit {
  UnityQuickFightResult_Limit_MAX_ADJUNTANT_SIZE = 4
};
bool UnityQuickFightResult_Limit_IsValid(int value);
const UnityQuickFightResult_Limit UnityQuickFightResult_Limit_Limit_MIN = UnityQuickFightResult_Limit_MAX_ADJUNTANT_SIZE;
const UnityQuickFightResult_Limit UnityQuickFightResult_Limit_Limit_MAX = UnityQuickFightResult_Limit_MAX_ADJUNTANT_SIZE;
const int UnityQuickFightResult_Limit_Limit_ARRAYSIZE = UnityQuickFightResult_Limit_Limit_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickFightResult_Limit_descriptor();
inline const ::std::string& UnityQuickFightResult_Limit_Name(UnityQuickFightResult_Limit value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickFightResult_Limit_descriptor(), value);
}
inline bool UnityQuickFightResult_Limit_Parse(
    const ::std::string& name, UnityQuickFightResult_Limit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickFightResult_Limit>(
    UnityQuickFightResult_Limit_descriptor(), name, value);
}
// ===================================================================

class UnityQuickFightResult_AdjuntantState : public ::google::protobuf::Message {
 public:
  UnityQuickFightResult_AdjuntantState();
  virtual ~UnityQuickFightResult_AdjuntantState();
  
  UnityQuickFightResult_AdjuntantState(const UnityQuickFightResult_AdjuntantState& from);
  
  inline UnityQuickFightResult_AdjuntantState& operator=(const UnityQuickFightResult_AdjuntantState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickFightResult_AdjuntantState& default_instance();
  
  void Swap(UnityQuickFightResult_AdjuntantState* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickFightResult_AdjuntantState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickFightResult_AdjuntantState& from);
  void MergeFrom(const UnityQuickFightResult_AdjuntantState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required bool is_alive = 2;
  inline bool has_is_alive() const;
  inline void clear_is_alive();
  static const int kIsAliveFieldNumber = 2;
  inline bool is_alive() const;
  inline void set_is_alive(bool value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickFightResult.AdjuntantState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_alive();
  inline void clear_has_is_alive();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool is_alive_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickFightResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickFightResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickFightResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickFightResult_AdjuntantState* default_instance_;
};
// -------------------------------------------------------------------

class UnityQuickFightResult : public ::google::protobuf::Message {
 public:
  UnityQuickFightResult();
  virtual ~UnityQuickFightResult();
  
  UnityQuickFightResult(const UnityQuickFightResult& from);
  
  inline UnityQuickFightResult& operator=(const UnityQuickFightResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickFightResult& default_instance();
  
  void Swap(UnityQuickFightResult* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickFightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickFightResult& from);
  void MergeFrom(const UnityQuickFightResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityQuickFightResult_AdjuntantState AdjuntantState;
  
  typedef UnityQuickFightResult_traits traits;
  static const traits value = UnityQuickFightResult_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityQuickFightResult_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityQuickFightResult_traits_traits_MIN;
  static const traits traits_MAX =
    UnityQuickFightResult_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityQuickFightResult_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityQuickFightResult_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityQuickFightResult_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityQuickFightResult_traits_Parse(name, value);
  }
  
  typedef UnityQuickFightResult_Grade Grade;
  static const Grade OneStar = UnityQuickFightResult_Grade_OneStar;
  static const Grade TwoStar = UnityQuickFightResult_Grade_TwoStar;
  static const Grade ThreeStar = UnityQuickFightResult_Grade_ThreeStar;
  static const Grade FourStar = UnityQuickFightResult_Grade_FourStar;
  static const Grade FiveStar = UnityQuickFightResult_Grade_FiveStar;
  static inline bool Grade_IsValid(int value) {
    return UnityQuickFightResult_Grade_IsValid(value);
  }
  static const Grade Grade_MIN =
    UnityQuickFightResult_Grade_Grade_MIN;
  static const Grade Grade_MAX =
    UnityQuickFightResult_Grade_Grade_MAX;
  static const int Grade_ARRAYSIZE =
    UnityQuickFightResult_Grade_Grade_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Grade_descriptor() {
    return UnityQuickFightResult_Grade_descriptor();
  }
  static inline const ::std::string& Grade_Name(Grade value) {
    return UnityQuickFightResult_Grade_Name(value);
  }
  static inline bool Grade_Parse(const ::std::string& name,
      Grade* value) {
    return UnityQuickFightResult_Grade_Parse(name, value);
  }
  
  typedef UnityQuickFightResult_Limit Limit;
  static const Limit MAX_ADJUNTANT_SIZE = UnityQuickFightResult_Limit_MAX_ADJUNTANT_SIZE;
  static inline bool Limit_IsValid(int value) {
    return UnityQuickFightResult_Limit_IsValid(value);
  }
  static const Limit Limit_MIN =
    UnityQuickFightResult_Limit_Limit_MIN;
  static const Limit Limit_MAX =
    UnityQuickFightResult_Limit_Limit_MAX;
  static const int Limit_ARRAYSIZE =
    UnityQuickFightResult_Limit_Limit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Limit_descriptor() {
    return UnityQuickFightResult_Limit_descriptor();
  }
  static inline const ::std::string& Limit_Name(Limit value) {
    return UnityQuickFightResult_Limit_Name(value);
  }
  static inline bool Limit_Parse(const ::std::string& name,
      Limit* value) {
    return UnityQuickFightResult_Limit_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 war_id = 1;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 1;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required bool is_win = 3;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 3;
  inline bool is_win() const;
  inline void set_is_win(bool value);
  
  // required .game_connection.UnityQuickFightResult.Grade grade = 4;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline ::game_connection::UnityQuickFightResult_Grade grade() const;
  inline void set_grade(::game_connection::UnityQuickFightResult_Grade value);
  
  // repeated .game_connection.UnityQuickFightResult.AdjuntantState adjuntant = 5;
  inline int adjuntant_size() const;
  inline void clear_adjuntant();
  static const int kAdjuntantFieldNumber = 5;
  inline const ::game_connection::UnityQuickFightResult_AdjuntantState& adjuntant(int index) const;
  inline ::game_connection::UnityQuickFightResult_AdjuntantState* mutable_adjuntant(int index);
  inline ::game_connection::UnityQuickFightResult_AdjuntantState* add_adjuntant();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickFightResult_AdjuntantState >&
      adjuntant() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickFightResult_AdjuntantState >*
      mutable_adjuntant();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickFightResult)
 private:
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_grade();
  inline void clear_has_grade();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 level_;
  bool is_win_;
  int grade_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickFightResult_AdjuntantState > adjuntant_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickFightResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickFightResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickFightResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickFightResult* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityQuickFightResult_AdjuntantState

// required int32 id = 1;
inline bool UnityQuickFightResult_AdjuntantState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickFightResult_AdjuntantState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickFightResult_AdjuntantState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickFightResult_AdjuntantState::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityQuickFightResult_AdjuntantState::id() const {
  return id_;
}
inline void UnityQuickFightResult_AdjuntantState::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool is_alive = 2;
inline bool UnityQuickFightResult_AdjuntantState::has_is_alive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickFightResult_AdjuntantState::set_has_is_alive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickFightResult_AdjuntantState::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickFightResult_AdjuntantState::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool UnityQuickFightResult_AdjuntantState::is_alive() const {
  return is_alive_;
}
inline void UnityQuickFightResult_AdjuntantState::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
}

// -------------------------------------------------------------------

// UnityQuickFightResult

// required int32 war_id = 1;
inline bool UnityQuickFightResult::has_war_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickFightResult::set_has_war_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickFightResult::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickFightResult::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 UnityQuickFightResult::war_id() const {
  return war_id_;
}
inline void UnityQuickFightResult::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// required int32 level = 2;
inline bool UnityQuickFightResult::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickFightResult::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickFightResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickFightResult::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityQuickFightResult::level() const {
  return level_;
}
inline void UnityQuickFightResult::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required bool is_win = 3;
inline bool UnityQuickFightResult::has_is_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityQuickFightResult::set_has_is_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityQuickFightResult::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityQuickFightResult::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool UnityQuickFightResult::is_win() const {
  return is_win_;
}
inline void UnityQuickFightResult::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// required .game_connection.UnityQuickFightResult.Grade grade = 4;
inline bool UnityQuickFightResult::has_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityQuickFightResult::set_has_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityQuickFightResult::clear_has_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityQuickFightResult::clear_grade() {
  grade_ = 1;
  clear_has_grade();
}
inline ::game_connection::UnityQuickFightResult_Grade UnityQuickFightResult::grade() const {
  return static_cast< ::game_connection::UnityQuickFightResult_Grade >(grade_);
}
inline void UnityQuickFightResult::set_grade(::game_connection::UnityQuickFightResult_Grade value) {
  GOOGLE_DCHECK(::game_connection::UnityQuickFightResult_Grade_IsValid(value));
  set_has_grade();
  grade_ = value;
}

// repeated .game_connection.UnityQuickFightResult.AdjuntantState adjuntant = 5;
inline int UnityQuickFightResult::adjuntant_size() const {
  return adjuntant_.size();
}
inline void UnityQuickFightResult::clear_adjuntant() {
  adjuntant_.Clear();
}
inline const ::game_connection::UnityQuickFightResult_AdjuntantState& UnityQuickFightResult::adjuntant(int index) const {
  return adjuntant_.Get(index);
}
inline ::game_connection::UnityQuickFightResult_AdjuntantState* UnityQuickFightResult::mutable_adjuntant(int index) {
  return adjuntant_.Mutable(index);
}
inline ::game_connection::UnityQuickFightResult_AdjuntantState* UnityQuickFightResult::add_adjuntant() {
  return adjuntant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickFightResult_AdjuntantState >&
UnityQuickFightResult::adjuntant() const {
  return adjuntant_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickFightResult_AdjuntantState >*
UnityQuickFightResult::mutable_adjuntant() {
  return &adjuntant_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickFightResult_traits>() {
  return ::game_connection::UnityQuickFightResult_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickFightResult_Grade>() {
  return ::game_connection::UnityQuickFightResult_Grade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickFightResult_Limit>() {
  return ::game_connection::UnityQuickFightResult_Limit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityQuickFightResult_2eproto__INCLUDED
