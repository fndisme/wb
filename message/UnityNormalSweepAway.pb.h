// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityNormalSweepAway.proto

#ifndef PROTOBUF_UnityNormalSweepAway_2eproto__INCLUDED
#define PROTOBUF_UnityNormalSweepAway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityNormalSweepAway_2eproto();
void protobuf_AssignDesc_UnityNormalSweepAway_2eproto();
void protobuf_ShutdownFile_UnityNormalSweepAway_2eproto();

class UnityNormalSweepAway;

enum UnityNormalSweepAway_traits {
  UnityNormalSweepAway_traits_value = 3744
};
bool UnityNormalSweepAway_traits_IsValid(int value);
const UnityNormalSweepAway_traits UnityNormalSweepAway_traits_traits_MIN = UnityNormalSweepAway_traits_value;
const UnityNormalSweepAway_traits UnityNormalSweepAway_traits_traits_MAX = UnityNormalSweepAway_traits_value;
const int UnityNormalSweepAway_traits_traits_ARRAYSIZE = UnityNormalSweepAway_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityNormalSweepAway_traits_descriptor();
inline const ::std::string& UnityNormalSweepAway_traits_Name(UnityNormalSweepAway_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityNormalSweepAway_traits_descriptor(), value);
}
inline bool UnityNormalSweepAway_traits_Parse(
    const ::std::string& name, UnityNormalSweepAway_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityNormalSweepAway_traits>(
    UnityNormalSweepAway_traits_descriptor(), name, value);
}
enum UnityNormalSweepAway_Grade {
  UnityNormalSweepAway_Grade_OneStar = 1,
  UnityNormalSweepAway_Grade_TwoStar = 2,
  UnityNormalSweepAway_Grade_ThreeStar = 3,
  UnityNormalSweepAway_Grade_FourStar = 4,
  UnityNormalSweepAway_Grade_FiveStar = 5
};
bool UnityNormalSweepAway_Grade_IsValid(int value);
const UnityNormalSweepAway_Grade UnityNormalSweepAway_Grade_Grade_MIN = UnityNormalSweepAway_Grade_OneStar;
const UnityNormalSweepAway_Grade UnityNormalSweepAway_Grade_Grade_MAX = UnityNormalSweepAway_Grade_FiveStar;
const int UnityNormalSweepAway_Grade_Grade_ARRAYSIZE = UnityNormalSweepAway_Grade_Grade_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityNormalSweepAway_Grade_descriptor();
inline const ::std::string& UnityNormalSweepAway_Grade_Name(UnityNormalSweepAway_Grade value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityNormalSweepAway_Grade_descriptor(), value);
}
inline bool UnityNormalSweepAway_Grade_Parse(
    const ::std::string& name, UnityNormalSweepAway_Grade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityNormalSweepAway_Grade>(
    UnityNormalSweepAway_Grade_descriptor(), name, value);
}
enum UnityNormalSweepAway_Limit {
  UnityNormalSweepAway_Limit_MaxTimes = 100,
  UnityNormalSweepAway_Limit_MAX_ADJUNTANT_SIZE = 4
};
bool UnityNormalSweepAway_Limit_IsValid(int value);
const UnityNormalSweepAway_Limit UnityNormalSweepAway_Limit_Limit_MIN = UnityNormalSweepAway_Limit_MAX_ADJUNTANT_SIZE;
const UnityNormalSweepAway_Limit UnityNormalSweepAway_Limit_Limit_MAX = UnityNormalSweepAway_Limit_MaxTimes;
const int UnityNormalSweepAway_Limit_Limit_ARRAYSIZE = UnityNormalSweepAway_Limit_Limit_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityNormalSweepAway_Limit_descriptor();
inline const ::std::string& UnityNormalSweepAway_Limit_Name(UnityNormalSweepAway_Limit value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityNormalSweepAway_Limit_descriptor(), value);
}
inline bool UnityNormalSweepAway_Limit_Parse(
    const ::std::string& name, UnityNormalSweepAway_Limit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityNormalSweepAway_Limit>(
    UnityNormalSweepAway_Limit_descriptor(), name, value);
}
// ===================================================================

class UnityNormalSweepAway : public ::google::protobuf::Message {
 public:
  UnityNormalSweepAway();
  virtual ~UnityNormalSweepAway();
  
  UnityNormalSweepAway(const UnityNormalSweepAway& from);
  
  inline UnityNormalSweepAway& operator=(const UnityNormalSweepAway& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityNormalSweepAway& default_instance();
  
  void Swap(UnityNormalSweepAway* other);
  
  // implements Message ----------------------------------------------
  
  UnityNormalSweepAway* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityNormalSweepAway& from);
  void MergeFrom(const UnityNormalSweepAway& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityNormalSweepAway_traits traits;
  static const traits value = UnityNormalSweepAway_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityNormalSweepAway_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityNormalSweepAway_traits_traits_MIN;
  static const traits traits_MAX =
    UnityNormalSweepAway_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityNormalSweepAway_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityNormalSweepAway_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityNormalSweepAway_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityNormalSweepAway_traits_Parse(name, value);
  }
  
  typedef UnityNormalSweepAway_Grade Grade;
  static const Grade OneStar = UnityNormalSweepAway_Grade_OneStar;
  static const Grade TwoStar = UnityNormalSweepAway_Grade_TwoStar;
  static const Grade ThreeStar = UnityNormalSweepAway_Grade_ThreeStar;
  static const Grade FourStar = UnityNormalSweepAway_Grade_FourStar;
  static const Grade FiveStar = UnityNormalSweepAway_Grade_FiveStar;
  static inline bool Grade_IsValid(int value) {
    return UnityNormalSweepAway_Grade_IsValid(value);
  }
  static const Grade Grade_MIN =
    UnityNormalSweepAway_Grade_Grade_MIN;
  static const Grade Grade_MAX =
    UnityNormalSweepAway_Grade_Grade_MAX;
  static const int Grade_ARRAYSIZE =
    UnityNormalSweepAway_Grade_Grade_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Grade_descriptor() {
    return UnityNormalSweepAway_Grade_descriptor();
  }
  static inline const ::std::string& Grade_Name(Grade value) {
    return UnityNormalSweepAway_Grade_Name(value);
  }
  static inline bool Grade_Parse(const ::std::string& name,
      Grade* value) {
    return UnityNormalSweepAway_Grade_Parse(name, value);
  }
  
  typedef UnityNormalSweepAway_Limit Limit;
  static const Limit MaxTimes = UnityNormalSweepAway_Limit_MaxTimes;
  static const Limit MAX_ADJUNTANT_SIZE = UnityNormalSweepAway_Limit_MAX_ADJUNTANT_SIZE;
  static inline bool Limit_IsValid(int value) {
    return UnityNormalSweepAway_Limit_IsValid(value);
  }
  static const Limit Limit_MIN =
    UnityNormalSweepAway_Limit_Limit_MIN;
  static const Limit Limit_MAX =
    UnityNormalSweepAway_Limit_Limit_MAX;
  static const int Limit_ARRAYSIZE =
    UnityNormalSweepAway_Limit_Limit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Limit_descriptor() {
    return UnityNormalSweepAway_Limit_descriptor();
  }
  static inline const ::std::string& Limit_Name(Limit value) {
    return UnityNormalSweepAway_Limit_Name(value);
  }
  static inline bool Limit_Parse(const ::std::string& name,
      Limit* value) {
    return UnityNormalSweepAway_Limit_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 war_id = 1;
  inline bool has_war_id() const;
  inline void clear_war_id();
  static const int kWarIdFieldNumber = 1;
  inline ::google::protobuf::int32 war_id() const;
  inline void set_war_id(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required .game_connection.UnityNormalSweepAway.Grade grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::game_connection::UnityNormalSweepAway_Grade grade() const;
  inline void set_grade(::game_connection::UnityNormalSweepAway_Grade value);
  
  // required uint32 times = 4;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);
  
  // repeated int32 adjuntant = 5;
  inline int adjuntant_size() const;
  inline void clear_adjuntant();
  static const int kAdjuntantFieldNumber = 5;
  inline ::google::protobuf::int32 adjuntant(int index) const;
  inline void set_adjuntant(int index, ::google::protobuf::int32 value);
  inline void add_adjuntant(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      adjuntant() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_adjuntant();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityNormalSweepAway)
 private:
  inline void set_has_war_id();
  inline void clear_has_war_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_times();
  inline void clear_has_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 war_id_;
  ::google::protobuf::int32 level_;
  int grade_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > adjuntant_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityNormalSweepAway_2eproto();
  friend void protobuf_AssignDesc_UnityNormalSweepAway_2eproto();
  friend void protobuf_ShutdownFile_UnityNormalSweepAway_2eproto();
  
  void InitAsDefaultInstance();
  static UnityNormalSweepAway* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityNormalSweepAway

// required int32 war_id = 1;
inline bool UnityNormalSweepAway::has_war_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityNormalSweepAway::set_has_war_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityNormalSweepAway::clear_has_war_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityNormalSweepAway::clear_war_id() {
  war_id_ = 0;
  clear_has_war_id();
}
inline ::google::protobuf::int32 UnityNormalSweepAway::war_id() const {
  return war_id_;
}
inline void UnityNormalSweepAway::set_war_id(::google::protobuf::int32 value) {
  set_has_war_id();
  war_id_ = value;
}

// required int32 level = 2;
inline bool UnityNormalSweepAway::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityNormalSweepAway::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityNormalSweepAway::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityNormalSweepAway::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityNormalSweepAway::level() const {
  return level_;
}
inline void UnityNormalSweepAway::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required .game_connection.UnityNormalSweepAway.Grade grade = 3;
inline bool UnityNormalSweepAway::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityNormalSweepAway::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityNormalSweepAway::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityNormalSweepAway::clear_grade() {
  grade_ = 1;
  clear_has_grade();
}
inline ::game_connection::UnityNormalSweepAway_Grade UnityNormalSweepAway::grade() const {
  return static_cast< ::game_connection::UnityNormalSweepAway_Grade >(grade_);
}
inline void UnityNormalSweepAway::set_grade(::game_connection::UnityNormalSweepAway_Grade value) {
  GOOGLE_DCHECK(::game_connection::UnityNormalSweepAway_Grade_IsValid(value));
  set_has_grade();
  grade_ = value;
}

// required uint32 times = 4;
inline bool UnityNormalSweepAway::has_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityNormalSweepAway::set_has_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityNormalSweepAway::clear_has_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityNormalSweepAway::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 UnityNormalSweepAway::times() const {
  return times_;
}
inline void UnityNormalSweepAway::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// repeated int32 adjuntant = 5;
inline int UnityNormalSweepAway::adjuntant_size() const {
  return adjuntant_.size();
}
inline void UnityNormalSweepAway::clear_adjuntant() {
  adjuntant_.Clear();
}
inline ::google::protobuf::int32 UnityNormalSweepAway::adjuntant(int index) const {
  return adjuntant_.Get(index);
}
inline void UnityNormalSweepAway::set_adjuntant(int index, ::google::protobuf::int32 value) {
  adjuntant_.Set(index, value);
}
inline void UnityNormalSweepAway::add_adjuntant(::google::protobuf::int32 value) {
  adjuntant_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnityNormalSweepAway::adjuntant() const {
  return adjuntant_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnityNormalSweepAway::mutable_adjuntant() {
  return &adjuntant_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityNormalSweepAway_traits>() {
  return ::game_connection::UnityNormalSweepAway_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityNormalSweepAway_Grade>() {
  return ::game_connection::UnityNormalSweepAway_Grade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityNormalSweepAway_Limit>() {
  return ::game_connection::UnityNormalSweepAway_Limit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityNormalSweepAway_2eproto__INCLUDED
