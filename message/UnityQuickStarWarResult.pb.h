// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityQuickStarWarResult.proto

#ifndef PROTOBUF_UnityQuickStarWarResult_2eproto__INCLUDED
#define PROTOBUF_UnityQuickStarWarResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityQuickStarWarResult_2eproto();
void protobuf_AssignDesc_UnityQuickStarWarResult_2eproto();
void protobuf_ShutdownFile_UnityQuickStarWarResult_2eproto();

class UnityQuickStarWarResult;
class UnityQuickStarWarResult_GroupInfo;
class UnityQuickStarWarResult_Match;
class UnityQuickStarWarResult_Match_Adjutant;

enum UnityQuickStarWarResult_traits {
  UnityQuickStarWarResult_traits_value = 3368
};
bool UnityQuickStarWarResult_traits_IsValid(int value);
const UnityQuickStarWarResult_traits UnityQuickStarWarResult_traits_traits_MIN = UnityQuickStarWarResult_traits_value;
const UnityQuickStarWarResult_traits UnityQuickStarWarResult_traits_traits_MAX = UnityQuickStarWarResult_traits_value;
const int UnityQuickStarWarResult_traits_traits_ARRAYSIZE = UnityQuickStarWarResult_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickStarWarResult_traits_descriptor();
inline const ::std::string& UnityQuickStarWarResult_traits_Name(UnityQuickStarWarResult_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickStarWarResult_traits_descriptor(), value);
}
inline bool UnityQuickStarWarResult_traits_Parse(
    const ::std::string& name, UnityQuickStarWarResult_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickStarWarResult_traits>(
    UnityQuickStarWarResult_traits_descriptor(), name, value);
}
// ===================================================================

class UnityQuickStarWarResult_GroupInfo : public ::google::protobuf::Message {
 public:
  UnityQuickStarWarResult_GroupInfo();
  virtual ~UnityQuickStarWarResult_GroupInfo();
  
  UnityQuickStarWarResult_GroupInfo(const UnityQuickStarWarResult_GroupInfo& from);
  
  inline UnityQuickStarWarResult_GroupInfo& operator=(const UnityQuickStarWarResult_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickStarWarResult_GroupInfo& default_instance();
  
  void Swap(UnityQuickStarWarResult_GroupInfo* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickStarWarResult_GroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickStarWarResult_GroupInfo& from);
  void MergeFrom(const UnityQuickStarWarResult_GroupInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);
  
  // required int32 win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);
  
  // required int32 lose = 3;
  inline bool has_lose() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 3;
  inline ::google::protobuf::int32 lose() const;
  inline void set_lose(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickStarWarResult.GroupInfo)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickStarWarResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickStarWarResult_GroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class UnityQuickStarWarResult_Match_Adjutant : public ::google::protobuf::Message {
 public:
  UnityQuickStarWarResult_Match_Adjutant();
  virtual ~UnityQuickStarWarResult_Match_Adjutant();
  
  UnityQuickStarWarResult_Match_Adjutant(const UnityQuickStarWarResult_Match_Adjutant& from);
  
  inline UnityQuickStarWarResult_Match_Adjutant& operator=(const UnityQuickStarWarResult_Match_Adjutant& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickStarWarResult_Match_Adjutant& default_instance();
  
  void Swap(UnityQuickStarWarResult_Match_Adjutant* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickStarWarResult_Match_Adjutant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickStarWarResult_Match_Adjutant& from);
  void MergeFrom(const UnityQuickStarWarResult_Match_Adjutant& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 rest_blood = 2;
  inline bool has_rest_blood() const;
  inline void clear_rest_blood();
  static const int kRestBloodFieldNumber = 2;
  inline ::google::protobuf::int32 rest_blood() const;
  inline void set_rest_blood(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickStarWarResult.Match.Adjutant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rest_blood();
  inline void clear_has_rest_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 rest_blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickStarWarResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickStarWarResult_Match_Adjutant* default_instance_;
};
// -------------------------------------------------------------------

class UnityQuickStarWarResult_Match : public ::google::protobuf::Message {
 public:
  UnityQuickStarWarResult_Match();
  virtual ~UnityQuickStarWarResult_Match();
  
  UnityQuickStarWarResult_Match(const UnityQuickStarWarResult_Match& from);
  
  inline UnityQuickStarWarResult_Match& operator=(const UnityQuickStarWarResult_Match& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickStarWarResult_Match& default_instance();
  
  void Swap(UnityQuickStarWarResult_Match* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickStarWarResult_Match* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickStarWarResult_Match& from);
  void MergeFrom(const UnityQuickStarWarResult_Match& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityQuickStarWarResult_Match_Adjutant Adjutant;
  
  // accessors -------------------------------------------------------
  
  // required sint32 win_player_id = 1;
  inline bool has_win_player_id() const;
  inline void clear_win_player_id();
  static const int kWinPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 win_player_id() const;
  inline void set_win_player_id(::google::protobuf::int32 value);
  
  // required sint32 lose_player_id = 2;
  inline bool has_lose_player_id() const;
  inline void clear_lose_player_id();
  static const int kLosePlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 lose_player_id() const;
  inline void set_lose_player_id(::google::protobuf::int32 value);
  
  // required int32 winner_rest_blood = 3;
  inline bool has_winner_rest_blood() const;
  inline void clear_winner_rest_blood();
  static const int kWinnerRestBloodFieldNumber = 3;
  inline ::google::protobuf::int32 winner_rest_blood() const;
  inline void set_winner_rest_blood(::google::protobuf::int32 value);
  
  // repeated .game_connection.UnityQuickStarWarResult.Match.Adjutant adjutant = 4;
  inline int adjutant_size() const;
  inline void clear_adjutant();
  static const int kAdjutantFieldNumber = 4;
  inline const ::game_connection::UnityQuickStarWarResult_Match_Adjutant& adjutant(int index) const;
  inline ::game_connection::UnityQuickStarWarResult_Match_Adjutant* mutable_adjutant(int index);
  inline ::game_connection::UnityQuickStarWarResult_Match_Adjutant* add_adjutant();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match_Adjutant >&
      adjutant() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match_Adjutant >*
      mutable_adjutant();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickStarWarResult.Match)
 private:
  inline void set_has_win_player_id();
  inline void clear_has_win_player_id();
  inline void set_has_lose_player_id();
  inline void clear_has_lose_player_id();
  inline void set_has_winner_rest_blood();
  inline void clear_has_winner_rest_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 win_player_id_;
  ::google::protobuf::int32 lose_player_id_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match_Adjutant > adjutant_;
  ::google::protobuf::int32 winner_rest_blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickStarWarResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickStarWarResult_Match* default_instance_;
};
// -------------------------------------------------------------------

class UnityQuickStarWarResult : public ::google::protobuf::Message {
 public:
  UnityQuickStarWarResult();
  virtual ~UnityQuickStarWarResult();
  
  UnityQuickStarWarResult(const UnityQuickStarWarResult& from);
  
  inline UnityQuickStarWarResult& operator=(const UnityQuickStarWarResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickStarWarResult& default_instance();
  
  void Swap(UnityQuickStarWarResult* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickStarWarResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickStarWarResult& from);
  void MergeFrom(const UnityQuickStarWarResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityQuickStarWarResult_GroupInfo GroupInfo;
  typedef UnityQuickStarWarResult_Match Match;
  
  typedef UnityQuickStarWarResult_traits traits;
  static const traits value = UnityQuickStarWarResult_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityQuickStarWarResult_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityQuickStarWarResult_traits_traits_MIN;
  static const traits traits_MAX =
    UnityQuickStarWarResult_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityQuickStarWarResult_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityQuickStarWarResult_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityQuickStarWarResult_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityQuickStarWarResult_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 star_id = 1;
  inline bool has_star_id() const;
  inline void clear_star_id();
  static const int kStarIdFieldNumber = 1;
  inline ::google::protobuf::int32 star_id() const;
  inline void set_star_id(::google::protobuf::int32 value);
  
  // required .game_connection.UnityQuickStarWarResult.GroupInfo winner = 2;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 2;
  inline const ::game_connection::UnityQuickStarWarResult_GroupInfo& winner() const;
  inline ::game_connection::UnityQuickStarWarResult_GroupInfo* mutable_winner();
  inline ::game_connection::UnityQuickStarWarResult_GroupInfo* release_winner();
  
  // repeated .game_connection.UnityQuickStarWarResult.Match match = 3;
  inline int match_size() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 3;
  inline const ::game_connection::UnityQuickStarWarResult_Match& match(int index) const;
  inline ::game_connection::UnityQuickStarWarResult_Match* mutable_match(int index);
  inline ::game_connection::UnityQuickStarWarResult_Match* add_match();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match >&
      match() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match >*
      mutable_match();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickStarWarResult)
 private:
  inline void set_has_star_id();
  inline void clear_has_star_id();
  inline void set_has_winner();
  inline void clear_has_winner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::game_connection::UnityQuickStarWarResult_GroupInfo* winner_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match > match_;
  ::google::protobuf::int32 star_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_AssignDesc_UnityQuickStarWarResult_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickStarWarResult_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickStarWarResult* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityQuickStarWarResult_GroupInfo

// required sint32 group_id = 1;
inline bool UnityQuickStarWarResult_GroupInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickStarWarResult_GroupInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_GroupInfo::group_id() const {
  return group_id_;
}
inline void UnityQuickStarWarResult_GroupInfo::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required int32 win = 2;
inline bool UnityQuickStarWarResult_GroupInfo::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickStarWarResult_GroupInfo::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_GroupInfo::win() const {
  return win_;
}
inline void UnityQuickStarWarResult_GroupInfo::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// required int32 lose = 3;
inline bool UnityQuickStarWarResult_GroupInfo::has_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityQuickStarWarResult_GroupInfo::set_has_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_has_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityQuickStarWarResult_GroupInfo::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_GroupInfo::lose() const {
  return lose_;
}
inline void UnityQuickStarWarResult_GroupInfo::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
}

// -------------------------------------------------------------------

// UnityQuickStarWarResult_Match_Adjutant

// required sint32 id = 1;
inline bool UnityQuickStarWarResult_Match_Adjutant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickStarWarResult_Match_Adjutant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickStarWarResult_Match_Adjutant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickStarWarResult_Match_Adjutant::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_Match_Adjutant::id() const {
  return id_;
}
inline void UnityQuickStarWarResult_Match_Adjutant::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 rest_blood = 2;
inline bool UnityQuickStarWarResult_Match_Adjutant::has_rest_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickStarWarResult_Match_Adjutant::set_has_rest_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickStarWarResult_Match_Adjutant::clear_has_rest_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickStarWarResult_Match_Adjutant::clear_rest_blood() {
  rest_blood_ = 0;
  clear_has_rest_blood();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_Match_Adjutant::rest_blood() const {
  return rest_blood_;
}
inline void UnityQuickStarWarResult_Match_Adjutant::set_rest_blood(::google::protobuf::int32 value) {
  set_has_rest_blood();
  rest_blood_ = value;
}

// -------------------------------------------------------------------

// UnityQuickStarWarResult_Match

// required sint32 win_player_id = 1;
inline bool UnityQuickStarWarResult_Match::has_win_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickStarWarResult_Match::set_has_win_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickStarWarResult_Match::clear_has_win_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickStarWarResult_Match::clear_win_player_id() {
  win_player_id_ = 0;
  clear_has_win_player_id();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_Match::win_player_id() const {
  return win_player_id_;
}
inline void UnityQuickStarWarResult_Match::set_win_player_id(::google::protobuf::int32 value) {
  set_has_win_player_id();
  win_player_id_ = value;
}

// required sint32 lose_player_id = 2;
inline bool UnityQuickStarWarResult_Match::has_lose_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickStarWarResult_Match::set_has_lose_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickStarWarResult_Match::clear_has_lose_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickStarWarResult_Match::clear_lose_player_id() {
  lose_player_id_ = 0;
  clear_has_lose_player_id();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_Match::lose_player_id() const {
  return lose_player_id_;
}
inline void UnityQuickStarWarResult_Match::set_lose_player_id(::google::protobuf::int32 value) {
  set_has_lose_player_id();
  lose_player_id_ = value;
}

// required int32 winner_rest_blood = 3;
inline bool UnityQuickStarWarResult_Match::has_winner_rest_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityQuickStarWarResult_Match::set_has_winner_rest_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityQuickStarWarResult_Match::clear_has_winner_rest_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityQuickStarWarResult_Match::clear_winner_rest_blood() {
  winner_rest_blood_ = 0;
  clear_has_winner_rest_blood();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult_Match::winner_rest_blood() const {
  return winner_rest_blood_;
}
inline void UnityQuickStarWarResult_Match::set_winner_rest_blood(::google::protobuf::int32 value) {
  set_has_winner_rest_blood();
  winner_rest_blood_ = value;
}

// repeated .game_connection.UnityQuickStarWarResult.Match.Adjutant adjutant = 4;
inline int UnityQuickStarWarResult_Match::adjutant_size() const {
  return adjutant_.size();
}
inline void UnityQuickStarWarResult_Match::clear_adjutant() {
  adjutant_.Clear();
}
inline const ::game_connection::UnityQuickStarWarResult_Match_Adjutant& UnityQuickStarWarResult_Match::adjutant(int index) const {
  return adjutant_.Get(index);
}
inline ::game_connection::UnityQuickStarWarResult_Match_Adjutant* UnityQuickStarWarResult_Match::mutable_adjutant(int index) {
  return adjutant_.Mutable(index);
}
inline ::game_connection::UnityQuickStarWarResult_Match_Adjutant* UnityQuickStarWarResult_Match::add_adjutant() {
  return adjutant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match_Adjutant >&
UnityQuickStarWarResult_Match::adjutant() const {
  return adjutant_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match_Adjutant >*
UnityQuickStarWarResult_Match::mutable_adjutant() {
  return &adjutant_;
}

// -------------------------------------------------------------------

// UnityQuickStarWarResult

// required int32 star_id = 1;
inline bool UnityQuickStarWarResult::has_star_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickStarWarResult::set_has_star_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickStarWarResult::clear_has_star_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickStarWarResult::clear_star_id() {
  star_id_ = 0;
  clear_has_star_id();
}
inline ::google::protobuf::int32 UnityQuickStarWarResult::star_id() const {
  return star_id_;
}
inline void UnityQuickStarWarResult::set_star_id(::google::protobuf::int32 value) {
  set_has_star_id();
  star_id_ = value;
}

// required .game_connection.UnityQuickStarWarResult.GroupInfo winner = 2;
inline bool UnityQuickStarWarResult::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickStarWarResult::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickStarWarResult::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickStarWarResult::clear_winner() {
  if (winner_ != NULL) winner_->::game_connection::UnityQuickStarWarResult_GroupInfo::Clear();
  clear_has_winner();
}
inline const ::game_connection::UnityQuickStarWarResult_GroupInfo& UnityQuickStarWarResult::winner() const {
  return winner_ != NULL ? *winner_ : *default_instance_->winner_;
}
inline ::game_connection::UnityQuickStarWarResult_GroupInfo* UnityQuickStarWarResult::mutable_winner() {
  set_has_winner();
  if (winner_ == NULL) winner_ = new ::game_connection::UnityQuickStarWarResult_GroupInfo;
  return winner_;
}
inline ::game_connection::UnityQuickStarWarResult_GroupInfo* UnityQuickStarWarResult::release_winner() {
  clear_has_winner();
  ::game_connection::UnityQuickStarWarResult_GroupInfo* temp = winner_;
  winner_ = NULL;
  return temp;
}

// repeated .game_connection.UnityQuickStarWarResult.Match match = 3;
inline int UnityQuickStarWarResult::match_size() const {
  return match_.size();
}
inline void UnityQuickStarWarResult::clear_match() {
  match_.Clear();
}
inline const ::game_connection::UnityQuickStarWarResult_Match& UnityQuickStarWarResult::match(int index) const {
  return match_.Get(index);
}
inline ::game_connection::UnityQuickStarWarResult_Match* UnityQuickStarWarResult::mutable_match(int index) {
  return match_.Mutable(index);
}
inline ::game_connection::UnityQuickStarWarResult_Match* UnityQuickStarWarResult::add_match() {
  return match_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match >&
UnityQuickStarWarResult::match() const {
  return match_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickStarWarResult_Match >*
UnityQuickStarWarResult::mutable_match() {
  return &match_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickStarWarResult_traits>() {
  return ::game_connection::UnityQuickStarWarResult_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityQuickStarWarResult_2eproto__INCLUDED
