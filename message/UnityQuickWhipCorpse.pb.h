// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityQuickWhipCorpse.proto

#ifndef PROTOBUF_UnityQuickWhipCorpse_2eproto__INCLUDED
#define PROTOBUF_UnityQuickWhipCorpse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityQuickWhipCorpse_2eproto();
void protobuf_AssignDesc_UnityQuickWhipCorpse_2eproto();
void protobuf_ShutdownFile_UnityQuickWhipCorpse_2eproto();

class UnityQuickWhipCorpse;
class UnityQuickWhipCorpse_AdjuntantState;

enum UnityQuickWhipCorpse_traits {
  UnityQuickWhipCorpse_traits_value = 3747
};
bool UnityQuickWhipCorpse_traits_IsValid(int value);
const UnityQuickWhipCorpse_traits UnityQuickWhipCorpse_traits_traits_MIN = UnityQuickWhipCorpse_traits_value;
const UnityQuickWhipCorpse_traits UnityQuickWhipCorpse_traits_traits_MAX = UnityQuickWhipCorpse_traits_value;
const int UnityQuickWhipCorpse_traits_traits_ARRAYSIZE = UnityQuickWhipCorpse_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickWhipCorpse_traits_descriptor();
inline const ::std::string& UnityQuickWhipCorpse_traits_Name(UnityQuickWhipCorpse_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickWhipCorpse_traits_descriptor(), value);
}
inline bool UnityQuickWhipCorpse_traits_Parse(
    const ::std::string& name, UnityQuickWhipCorpse_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickWhipCorpse_traits>(
    UnityQuickWhipCorpse_traits_descriptor(), name, value);
}
enum UnityQuickWhipCorpse_Grade {
  UnityQuickWhipCorpse_Grade_OneStar = 1,
  UnityQuickWhipCorpse_Grade_TwoStar = 2,
  UnityQuickWhipCorpse_Grade_ThreeStar = 3,
  UnityQuickWhipCorpse_Grade_FourStar = 4,
  UnityQuickWhipCorpse_Grade_FiveStar = 5
};
bool UnityQuickWhipCorpse_Grade_IsValid(int value);
const UnityQuickWhipCorpse_Grade UnityQuickWhipCorpse_Grade_Grade_MIN = UnityQuickWhipCorpse_Grade_OneStar;
const UnityQuickWhipCorpse_Grade UnityQuickWhipCorpse_Grade_Grade_MAX = UnityQuickWhipCorpse_Grade_FiveStar;
const int UnityQuickWhipCorpse_Grade_Grade_ARRAYSIZE = UnityQuickWhipCorpse_Grade_Grade_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickWhipCorpse_Grade_descriptor();
inline const ::std::string& UnityQuickWhipCorpse_Grade_Name(UnityQuickWhipCorpse_Grade value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickWhipCorpse_Grade_descriptor(), value);
}
inline bool UnityQuickWhipCorpse_Grade_Parse(
    const ::std::string& name, UnityQuickWhipCorpse_Grade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickWhipCorpse_Grade>(
    UnityQuickWhipCorpse_Grade_descriptor(), name, value);
}
enum UnityQuickWhipCorpse_Limit {
  UnityQuickWhipCorpse_Limit_MAX_ADJUNTANT_SIZE = 4
};
bool UnityQuickWhipCorpse_Limit_IsValid(int value);
const UnityQuickWhipCorpse_Limit UnityQuickWhipCorpse_Limit_Limit_MIN = UnityQuickWhipCorpse_Limit_MAX_ADJUNTANT_SIZE;
const UnityQuickWhipCorpse_Limit UnityQuickWhipCorpse_Limit_Limit_MAX = UnityQuickWhipCorpse_Limit_MAX_ADJUNTANT_SIZE;
const int UnityQuickWhipCorpse_Limit_Limit_ARRAYSIZE = UnityQuickWhipCorpse_Limit_Limit_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityQuickWhipCorpse_Limit_descriptor();
inline const ::std::string& UnityQuickWhipCorpse_Limit_Name(UnityQuickWhipCorpse_Limit value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityQuickWhipCorpse_Limit_descriptor(), value);
}
inline bool UnityQuickWhipCorpse_Limit_Parse(
    const ::std::string& name, UnityQuickWhipCorpse_Limit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityQuickWhipCorpse_Limit>(
    UnityQuickWhipCorpse_Limit_descriptor(), name, value);
}
// ===================================================================

class UnityQuickWhipCorpse_AdjuntantState : public ::google::protobuf::Message {
 public:
  UnityQuickWhipCorpse_AdjuntantState();
  virtual ~UnityQuickWhipCorpse_AdjuntantState();
  
  UnityQuickWhipCorpse_AdjuntantState(const UnityQuickWhipCorpse_AdjuntantState& from);
  
  inline UnityQuickWhipCorpse_AdjuntantState& operator=(const UnityQuickWhipCorpse_AdjuntantState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickWhipCorpse_AdjuntantState& default_instance();
  
  void Swap(UnityQuickWhipCorpse_AdjuntantState* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickWhipCorpse_AdjuntantState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickWhipCorpse_AdjuntantState& from);
  void MergeFrom(const UnityQuickWhipCorpse_AdjuntantState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required bool is_alive = 2;
  inline bool has_is_alive() const;
  inline void clear_is_alive();
  static const int kIsAliveFieldNumber = 2;
  inline bool is_alive() const;
  inline void set_is_alive(bool value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickWhipCorpse.AdjuntantState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_alive();
  inline void clear_has_is_alive();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool is_alive_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickWhipCorpse_2eproto();
  friend void protobuf_AssignDesc_UnityQuickWhipCorpse_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickWhipCorpse_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickWhipCorpse_AdjuntantState* default_instance_;
};
// -------------------------------------------------------------------

class UnityQuickWhipCorpse : public ::google::protobuf::Message {
 public:
  UnityQuickWhipCorpse();
  virtual ~UnityQuickWhipCorpse();
  
  UnityQuickWhipCorpse(const UnityQuickWhipCorpse& from);
  
  inline UnityQuickWhipCorpse& operator=(const UnityQuickWhipCorpse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityQuickWhipCorpse& default_instance();
  
  void Swap(UnityQuickWhipCorpse* other);
  
  // implements Message ----------------------------------------------
  
  UnityQuickWhipCorpse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityQuickWhipCorpse& from);
  void MergeFrom(const UnityQuickWhipCorpse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityQuickWhipCorpse_AdjuntantState AdjuntantState;
  
  typedef UnityQuickWhipCorpse_traits traits;
  static const traits value = UnityQuickWhipCorpse_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityQuickWhipCorpse_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityQuickWhipCorpse_traits_traits_MIN;
  static const traits traits_MAX =
    UnityQuickWhipCorpse_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityQuickWhipCorpse_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityQuickWhipCorpse_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityQuickWhipCorpse_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityQuickWhipCorpse_traits_Parse(name, value);
  }
  
  typedef UnityQuickWhipCorpse_Grade Grade;
  static const Grade OneStar = UnityQuickWhipCorpse_Grade_OneStar;
  static const Grade TwoStar = UnityQuickWhipCorpse_Grade_TwoStar;
  static const Grade ThreeStar = UnityQuickWhipCorpse_Grade_ThreeStar;
  static const Grade FourStar = UnityQuickWhipCorpse_Grade_FourStar;
  static const Grade FiveStar = UnityQuickWhipCorpse_Grade_FiveStar;
  static inline bool Grade_IsValid(int value) {
    return UnityQuickWhipCorpse_Grade_IsValid(value);
  }
  static const Grade Grade_MIN =
    UnityQuickWhipCorpse_Grade_Grade_MIN;
  static const Grade Grade_MAX =
    UnityQuickWhipCorpse_Grade_Grade_MAX;
  static const int Grade_ARRAYSIZE =
    UnityQuickWhipCorpse_Grade_Grade_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Grade_descriptor() {
    return UnityQuickWhipCorpse_Grade_descriptor();
  }
  static inline const ::std::string& Grade_Name(Grade value) {
    return UnityQuickWhipCorpse_Grade_Name(value);
  }
  static inline bool Grade_Parse(const ::std::string& name,
      Grade* value) {
    return UnityQuickWhipCorpse_Grade_Parse(name, value);
  }
  
  typedef UnityQuickWhipCorpse_Limit Limit;
  static const Limit MAX_ADJUNTANT_SIZE = UnityQuickWhipCorpse_Limit_MAX_ADJUNTANT_SIZE;
  static inline bool Limit_IsValid(int value) {
    return UnityQuickWhipCorpse_Limit_IsValid(value);
  }
  static const Limit Limit_MIN =
    UnityQuickWhipCorpse_Limit_Limit_MIN;
  static const Limit Limit_MAX =
    UnityQuickWhipCorpse_Limit_Limit_MAX;
  static const int Limit_ARRAYSIZE =
    UnityQuickWhipCorpse_Limit_Limit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Limit_descriptor() {
    return UnityQuickWhipCorpse_Limit_descriptor();
  }
  static inline const ::std::string& Limit_Name(Limit value) {
    return UnityQuickWhipCorpse_Limit_Name(value);
  }
  static inline bool Limit_Parse(const ::std::string& name,
      Limit* value) {
    return UnityQuickWhipCorpse_Limit_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 whip_id = 1;
  inline bool has_whip_id() const;
  inline void clear_whip_id();
  static const int kWhipIdFieldNumber = 1;
  inline ::google::protobuf::int32 whip_id() const;
  inline void set_whip_id(::google::protobuf::int32 value);
  
  // required bool is_win = 2;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 2;
  inline bool is_win() const;
  inline void set_is_win(bool value);
  
  // required bool use_prop = 3;
  inline bool has_use_prop() const;
  inline void clear_use_prop();
  static const int kUsePropFieldNumber = 3;
  inline bool use_prop() const;
  inline void set_use_prop(bool value);
  
  // required .game_connection.UnityQuickWhipCorpse.Grade grade = 4;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline ::game_connection::UnityQuickWhipCorpse_Grade grade() const;
  inline void set_grade(::game_connection::UnityQuickWhipCorpse_Grade value);
  
  // repeated .game_connection.UnityQuickWhipCorpse.AdjuntantState adjuntant = 5;
  inline int adjuntant_size() const;
  inline void clear_adjuntant();
  static const int kAdjuntantFieldNumber = 5;
  inline const ::game_connection::UnityQuickWhipCorpse_AdjuntantState& adjuntant(int index) const;
  inline ::game_connection::UnityQuickWhipCorpse_AdjuntantState* mutable_adjuntant(int index);
  inline ::game_connection::UnityQuickWhipCorpse_AdjuntantState* add_adjuntant();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickWhipCorpse_AdjuntantState >&
      adjuntant() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickWhipCorpse_AdjuntantState >*
      mutable_adjuntant();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityQuickWhipCorpse)
 private:
  inline void set_has_whip_id();
  inline void clear_has_whip_id();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_use_prop();
  inline void clear_has_use_prop();
  inline void set_has_grade();
  inline void clear_has_grade();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 whip_id_;
  bool is_win_;
  bool use_prop_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickWhipCorpse_AdjuntantState > adjuntant_;
  int grade_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityQuickWhipCorpse_2eproto();
  friend void protobuf_AssignDesc_UnityQuickWhipCorpse_2eproto();
  friend void protobuf_ShutdownFile_UnityQuickWhipCorpse_2eproto();
  
  void InitAsDefaultInstance();
  static UnityQuickWhipCorpse* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityQuickWhipCorpse_AdjuntantState

// required int32 id = 1;
inline bool UnityQuickWhipCorpse_AdjuntantState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickWhipCorpse_AdjuntantState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickWhipCorpse_AdjuntantState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickWhipCorpse_AdjuntantState::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityQuickWhipCorpse_AdjuntantState::id() const {
  return id_;
}
inline void UnityQuickWhipCorpse_AdjuntantState::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool is_alive = 2;
inline bool UnityQuickWhipCorpse_AdjuntantState::has_is_alive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickWhipCorpse_AdjuntantState::set_has_is_alive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickWhipCorpse_AdjuntantState::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickWhipCorpse_AdjuntantState::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool UnityQuickWhipCorpse_AdjuntantState::is_alive() const {
  return is_alive_;
}
inline void UnityQuickWhipCorpse_AdjuntantState::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
}

// -------------------------------------------------------------------

// UnityQuickWhipCorpse

// required int32 whip_id = 1;
inline bool UnityQuickWhipCorpse::has_whip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityQuickWhipCorpse::set_has_whip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityQuickWhipCorpse::clear_has_whip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityQuickWhipCorpse::clear_whip_id() {
  whip_id_ = 0;
  clear_has_whip_id();
}
inline ::google::protobuf::int32 UnityQuickWhipCorpse::whip_id() const {
  return whip_id_;
}
inline void UnityQuickWhipCorpse::set_whip_id(::google::protobuf::int32 value) {
  set_has_whip_id();
  whip_id_ = value;
}

// required bool is_win = 2;
inline bool UnityQuickWhipCorpse::has_is_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityQuickWhipCorpse::set_has_is_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityQuickWhipCorpse::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityQuickWhipCorpse::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool UnityQuickWhipCorpse::is_win() const {
  return is_win_;
}
inline void UnityQuickWhipCorpse::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// required bool use_prop = 3;
inline bool UnityQuickWhipCorpse::has_use_prop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityQuickWhipCorpse::set_has_use_prop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityQuickWhipCorpse::clear_has_use_prop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityQuickWhipCorpse::clear_use_prop() {
  use_prop_ = false;
  clear_has_use_prop();
}
inline bool UnityQuickWhipCorpse::use_prop() const {
  return use_prop_;
}
inline void UnityQuickWhipCorpse::set_use_prop(bool value) {
  set_has_use_prop();
  use_prop_ = value;
}

// required .game_connection.UnityQuickWhipCorpse.Grade grade = 4;
inline bool UnityQuickWhipCorpse::has_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityQuickWhipCorpse::set_has_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityQuickWhipCorpse::clear_has_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityQuickWhipCorpse::clear_grade() {
  grade_ = 1;
  clear_has_grade();
}
inline ::game_connection::UnityQuickWhipCorpse_Grade UnityQuickWhipCorpse::grade() const {
  return static_cast< ::game_connection::UnityQuickWhipCorpse_Grade >(grade_);
}
inline void UnityQuickWhipCorpse::set_grade(::game_connection::UnityQuickWhipCorpse_Grade value) {
  GOOGLE_DCHECK(::game_connection::UnityQuickWhipCorpse_Grade_IsValid(value));
  set_has_grade();
  grade_ = value;
}

// repeated .game_connection.UnityQuickWhipCorpse.AdjuntantState adjuntant = 5;
inline int UnityQuickWhipCorpse::adjuntant_size() const {
  return adjuntant_.size();
}
inline void UnityQuickWhipCorpse::clear_adjuntant() {
  adjuntant_.Clear();
}
inline const ::game_connection::UnityQuickWhipCorpse_AdjuntantState& UnityQuickWhipCorpse::adjuntant(int index) const {
  return adjuntant_.Get(index);
}
inline ::game_connection::UnityQuickWhipCorpse_AdjuntantState* UnityQuickWhipCorpse::mutable_adjuntant(int index) {
  return adjuntant_.Mutable(index);
}
inline ::game_connection::UnityQuickWhipCorpse_AdjuntantState* UnityQuickWhipCorpse::add_adjuntant() {
  return adjuntant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickWhipCorpse_AdjuntantState >&
UnityQuickWhipCorpse::adjuntant() const {
  return adjuntant_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityQuickWhipCorpse_AdjuntantState >*
UnityQuickWhipCorpse::mutable_adjuntant() {
  return &adjuntant_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickWhipCorpse_traits>() {
  return ::game_connection::UnityQuickWhipCorpse_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickWhipCorpse_Grade>() {
  return ::game_connection::UnityQuickWhipCorpse_Grade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityQuickWhipCorpse_Limit>() {
  return ::game_connection::UnityQuickWhipCorpse_Limit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityQuickWhipCorpse_2eproto__INCLUDED
