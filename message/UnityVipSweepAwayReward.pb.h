// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityVipSweepAwayReward.proto

#ifndef PROTOBUF_UnityVipSweepAwayReward_2eproto__INCLUDED
#define PROTOBUF_UnityVipSweepAwayReward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityVipSweepAwayReward_2eproto();
void protobuf_AssignDesc_UnityVipSweepAwayReward_2eproto();
void protobuf_ShutdownFile_UnityVipSweepAwayReward_2eproto();

class UnityVipSweepAwayReward;
class UnityVipSweepAwayReward_Reward;
class UnityVipSweepAwayReward_RewardGroup;

enum UnityVipSweepAwayReward_traits {
  UnityVipSweepAwayReward_traits_value = 3758
};
bool UnityVipSweepAwayReward_traits_IsValid(int value);
const UnityVipSweepAwayReward_traits UnityVipSweepAwayReward_traits_traits_MIN = UnityVipSweepAwayReward_traits_value;
const UnityVipSweepAwayReward_traits UnityVipSweepAwayReward_traits_traits_MAX = UnityVipSweepAwayReward_traits_value;
const int UnityVipSweepAwayReward_traits_traits_ARRAYSIZE = UnityVipSweepAwayReward_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityVipSweepAwayReward_traits_descriptor();
inline const ::std::string& UnityVipSweepAwayReward_traits_Name(UnityVipSweepAwayReward_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityVipSweepAwayReward_traits_descriptor(), value);
}
inline bool UnityVipSweepAwayReward_traits_Parse(
    const ::std::string& name, UnityVipSweepAwayReward_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityVipSweepAwayReward_traits>(
    UnityVipSweepAwayReward_traits_descriptor(), name, value);
}
enum UnityVipSweepAwayReward_AwardType {
  UnityVipSweepAwayReward_AwardType_GAT_NULL = 0,
  UnityVipSweepAwayReward_AwardType_GAT_MONEY = 1,
  UnityVipSweepAwayReward_AwardType_GAT_PROP_OR_EQUIPMENT = 2,
  UnityVipSweepAwayReward_AwardType_GAT_SCORE = 3
};
bool UnityVipSweepAwayReward_AwardType_IsValid(int value);
const UnityVipSweepAwayReward_AwardType UnityVipSweepAwayReward_AwardType_AwardType_MIN = UnityVipSweepAwayReward_AwardType_GAT_NULL;
const UnityVipSweepAwayReward_AwardType UnityVipSweepAwayReward_AwardType_AwardType_MAX = UnityVipSweepAwayReward_AwardType_GAT_SCORE;
const int UnityVipSweepAwayReward_AwardType_AwardType_ARRAYSIZE = UnityVipSweepAwayReward_AwardType_AwardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityVipSweepAwayReward_AwardType_descriptor();
inline const ::std::string& UnityVipSweepAwayReward_AwardType_Name(UnityVipSweepAwayReward_AwardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityVipSweepAwayReward_AwardType_descriptor(), value);
}
inline bool UnityVipSweepAwayReward_AwardType_Parse(
    const ::std::string& name, UnityVipSweepAwayReward_AwardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityVipSweepAwayReward_AwardType>(
    UnityVipSweepAwayReward_AwardType_descriptor(), name, value);
}
// ===================================================================

class UnityVipSweepAwayReward_Reward : public ::google::protobuf::Message {
 public:
  UnityVipSweepAwayReward_Reward();
  virtual ~UnityVipSweepAwayReward_Reward();
  
  UnityVipSweepAwayReward_Reward(const UnityVipSweepAwayReward_Reward& from);
  
  inline UnityVipSweepAwayReward_Reward& operator=(const UnityVipSweepAwayReward_Reward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityVipSweepAwayReward_Reward& default_instance();
  
  void Swap(UnityVipSweepAwayReward_Reward* other);
  
  // implements Message ----------------------------------------------
  
  UnityVipSweepAwayReward_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityVipSweepAwayReward_Reward& from);
  void MergeFrom(const UnityVipSweepAwayReward_Reward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 object_id() const;
  inline void set_object_id(::google::protobuf::int32 value);
  
  // required int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // required int32 order = 4;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 4;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityVipSweepAwayReward.Reward)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_order();
  inline void clear_has_order();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 order_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_AssignDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_ShutdownFile_UnityVipSweepAwayReward_2eproto();
  
  void InitAsDefaultInstance();
  static UnityVipSweepAwayReward_Reward* default_instance_;
};
// -------------------------------------------------------------------

class UnityVipSweepAwayReward_RewardGroup : public ::google::protobuf::Message {
 public:
  UnityVipSweepAwayReward_RewardGroup();
  virtual ~UnityVipSweepAwayReward_RewardGroup();
  
  UnityVipSweepAwayReward_RewardGroup(const UnityVipSweepAwayReward_RewardGroup& from);
  
  inline UnityVipSweepAwayReward_RewardGroup& operator=(const UnityVipSweepAwayReward_RewardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityVipSweepAwayReward_RewardGroup& default_instance();
  
  void Swap(UnityVipSweepAwayReward_RewardGroup* other);
  
  // implements Message ----------------------------------------------
  
  UnityVipSweepAwayReward_RewardGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityVipSweepAwayReward_RewardGroup& from);
  void MergeFrom(const UnityVipSweepAwayReward_RewardGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.UnityVipSweepAwayReward.Reward award = 1;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 1;
  inline const ::game_connection::UnityVipSweepAwayReward_Reward& award(int index) const;
  inline ::game_connection::UnityVipSweepAwayReward_Reward* mutable_award(int index);
  inline ::game_connection::UnityVipSweepAwayReward_Reward* add_award();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_Reward >&
      award() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_Reward >*
      mutable_award();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityVipSweepAwayReward.RewardGroup)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_Reward > award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_AssignDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_ShutdownFile_UnityVipSweepAwayReward_2eproto();
  
  void InitAsDefaultInstance();
  static UnityVipSweepAwayReward_RewardGroup* default_instance_;
};
// -------------------------------------------------------------------

class UnityVipSweepAwayReward : public ::google::protobuf::Message {
 public:
  UnityVipSweepAwayReward();
  virtual ~UnityVipSweepAwayReward();
  
  UnityVipSweepAwayReward(const UnityVipSweepAwayReward& from);
  
  inline UnityVipSweepAwayReward& operator=(const UnityVipSweepAwayReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityVipSweepAwayReward& default_instance();
  
  void Swap(UnityVipSweepAwayReward* other);
  
  // implements Message ----------------------------------------------
  
  UnityVipSweepAwayReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityVipSweepAwayReward& from);
  void MergeFrom(const UnityVipSweepAwayReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityVipSweepAwayReward_Reward Reward;
  typedef UnityVipSweepAwayReward_RewardGroup RewardGroup;
  
  typedef UnityVipSweepAwayReward_traits traits;
  static const traits value = UnityVipSweepAwayReward_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityVipSweepAwayReward_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityVipSweepAwayReward_traits_traits_MIN;
  static const traits traits_MAX =
    UnityVipSweepAwayReward_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityVipSweepAwayReward_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityVipSweepAwayReward_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityVipSweepAwayReward_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityVipSweepAwayReward_traits_Parse(name, value);
  }
  
  typedef UnityVipSweepAwayReward_AwardType AwardType;
  static const AwardType GAT_NULL = UnityVipSweepAwayReward_AwardType_GAT_NULL;
  static const AwardType GAT_MONEY = UnityVipSweepAwayReward_AwardType_GAT_MONEY;
  static const AwardType GAT_PROP_OR_EQUIPMENT = UnityVipSweepAwayReward_AwardType_GAT_PROP_OR_EQUIPMENT;
  static const AwardType GAT_SCORE = UnityVipSweepAwayReward_AwardType_GAT_SCORE;
  static inline bool AwardType_IsValid(int value) {
    return UnityVipSweepAwayReward_AwardType_IsValid(value);
  }
  static const AwardType AwardType_MIN =
    UnityVipSweepAwayReward_AwardType_AwardType_MIN;
  static const AwardType AwardType_MAX =
    UnityVipSweepAwayReward_AwardType_AwardType_MAX;
  static const int AwardType_ARRAYSIZE =
    UnityVipSweepAwayReward_AwardType_AwardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AwardType_descriptor() {
    return UnityVipSweepAwayReward_AwardType_descriptor();
  }
  static inline const ::std::string& AwardType_Name(AwardType value) {
    return UnityVipSweepAwayReward_AwardType_Name(value);
  }
  static inline bool AwardType_Parse(const ::std::string& name,
      AwardType* value) {
    return UnityVipSweepAwayReward_AwardType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.UnityVipSweepAwayReward.RewardGroup reward_group = 1;
  inline int reward_group_size() const;
  inline void clear_reward_group();
  static const int kRewardGroupFieldNumber = 1;
  inline const ::game_connection::UnityVipSweepAwayReward_RewardGroup& reward_group(int index) const;
  inline ::game_connection::UnityVipSweepAwayReward_RewardGroup* mutable_reward_group(int index);
  inline ::game_connection::UnityVipSweepAwayReward_RewardGroup* add_reward_group();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_RewardGroup >&
      reward_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_RewardGroup >*
      mutable_reward_group();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityVipSweepAwayReward)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_RewardGroup > reward_group_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_AssignDesc_UnityVipSweepAwayReward_2eproto();
  friend void protobuf_ShutdownFile_UnityVipSweepAwayReward_2eproto();
  
  void InitAsDefaultInstance();
  static UnityVipSweepAwayReward* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityVipSweepAwayReward_Reward

// required int32 type = 1;
inline bool UnityVipSweepAwayReward_Reward::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityVipSweepAwayReward_Reward::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityVipSweepAwayReward_Reward::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityVipSweepAwayReward_Reward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UnityVipSweepAwayReward_Reward::type() const {
  return type_;
}
inline void UnityVipSweepAwayReward_Reward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 object_id = 2;
inline bool UnityVipSweepAwayReward_Reward::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityVipSweepAwayReward_Reward::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityVipSweepAwayReward_Reward::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityVipSweepAwayReward_Reward::clear_object_id() {
  object_id_ = 0;
  clear_has_object_id();
}
inline ::google::protobuf::int32 UnityVipSweepAwayReward_Reward::object_id() const {
  return object_id_;
}
inline void UnityVipSweepAwayReward_Reward::set_object_id(::google::protobuf::int32 value) {
  set_has_object_id();
  object_id_ = value;
}

// required int32 size = 3;
inline bool UnityVipSweepAwayReward_Reward::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityVipSweepAwayReward_Reward::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityVipSweepAwayReward_Reward::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityVipSweepAwayReward_Reward::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 UnityVipSweepAwayReward_Reward::size() const {
  return size_;
}
inline void UnityVipSweepAwayReward_Reward::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 order = 4;
inline bool UnityVipSweepAwayReward_Reward::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityVipSweepAwayReward_Reward::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityVipSweepAwayReward_Reward::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityVipSweepAwayReward_Reward::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 UnityVipSweepAwayReward_Reward::order() const {
  return order_;
}
inline void UnityVipSweepAwayReward_Reward::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// -------------------------------------------------------------------

// UnityVipSweepAwayReward_RewardGroup

// repeated .game_connection.UnityVipSweepAwayReward.Reward award = 1;
inline int UnityVipSweepAwayReward_RewardGroup::award_size() const {
  return award_.size();
}
inline void UnityVipSweepAwayReward_RewardGroup::clear_award() {
  award_.Clear();
}
inline const ::game_connection::UnityVipSweepAwayReward_Reward& UnityVipSweepAwayReward_RewardGroup::award(int index) const {
  return award_.Get(index);
}
inline ::game_connection::UnityVipSweepAwayReward_Reward* UnityVipSweepAwayReward_RewardGroup::mutable_award(int index) {
  return award_.Mutable(index);
}
inline ::game_connection::UnityVipSweepAwayReward_Reward* UnityVipSweepAwayReward_RewardGroup::add_award() {
  return award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_Reward >&
UnityVipSweepAwayReward_RewardGroup::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_Reward >*
UnityVipSweepAwayReward_RewardGroup::mutable_award() {
  return &award_;
}

// -------------------------------------------------------------------

// UnityVipSweepAwayReward

// repeated .game_connection.UnityVipSweepAwayReward.RewardGroup reward_group = 1;
inline int UnityVipSweepAwayReward::reward_group_size() const {
  return reward_group_.size();
}
inline void UnityVipSweepAwayReward::clear_reward_group() {
  reward_group_.Clear();
}
inline const ::game_connection::UnityVipSweepAwayReward_RewardGroup& UnityVipSweepAwayReward::reward_group(int index) const {
  return reward_group_.Get(index);
}
inline ::game_connection::UnityVipSweepAwayReward_RewardGroup* UnityVipSweepAwayReward::mutable_reward_group(int index) {
  return reward_group_.Mutable(index);
}
inline ::game_connection::UnityVipSweepAwayReward_RewardGroup* UnityVipSweepAwayReward::add_reward_group() {
  return reward_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_RewardGroup >&
UnityVipSweepAwayReward::reward_group() const {
  return reward_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityVipSweepAwayReward_RewardGroup >*
UnityVipSweepAwayReward::mutable_reward_group() {
  return &reward_group_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityVipSweepAwayReward_traits>() {
  return ::game_connection::UnityVipSweepAwayReward_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityVipSweepAwayReward_AwardType>() {
  return ::game_connection::UnityVipSweepAwayReward_AwardType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityVipSweepAwayReward_2eproto__INCLUDED
