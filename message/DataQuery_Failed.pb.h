// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataQuery_Failed.proto

#ifndef PROTOBUF_DataQuery_5fFailed_2eproto__INCLUDED
#define PROTOBUF_DataQuery_5fFailed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataQuery_5fFailed_2eproto();
void protobuf_AssignDesc_DataQuery_5fFailed_2eproto();
void protobuf_ShutdownFile_DataQuery_5fFailed_2eproto();

class DataQuery_Failed;

enum DataQuery_Failed_traits {
  DataQuery_Failed_traits_value = 7000
};
bool DataQuery_Failed_traits_IsValid(int value);
const DataQuery_Failed_traits DataQuery_Failed_traits_traits_MIN = DataQuery_Failed_traits_value;
const DataQuery_Failed_traits DataQuery_Failed_traits_traits_MAX = DataQuery_Failed_traits_value;
const int DataQuery_Failed_traits_traits_ARRAYSIZE = DataQuery_Failed_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataQuery_Failed_traits_descriptor();
inline const ::std::string& DataQuery_Failed_traits_Name(DataQuery_Failed_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataQuery_Failed_traits_descriptor(), value);
}
inline bool DataQuery_Failed_traits_Parse(
    const ::std::string& name, DataQuery_Failed_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataQuery_Failed_traits>(
    DataQuery_Failed_traits_descriptor(), name, value);
}
enum DataQuery_Failed_FailedReasonType {
  DataQuery_Failed_FailedReasonType_NOT_CARE = 0,
  DataQuery_Failed_FailedReasonType_USE_NOT_EXIST_PROP = 1,
  DataQuery_Failed_FailedReasonType_NOT_ENOUGH_MONEY = 2,
  DataQuery_Failed_FailedReasonType_NO_TASK = 3,
  DataQuery_Failed_FailedReasonType_NO_ADJUNTANT = 4
};
bool DataQuery_Failed_FailedReasonType_IsValid(int value);
const DataQuery_Failed_FailedReasonType DataQuery_Failed_FailedReasonType_FailedReasonType_MIN = DataQuery_Failed_FailedReasonType_NOT_CARE;
const DataQuery_Failed_FailedReasonType DataQuery_Failed_FailedReasonType_FailedReasonType_MAX = DataQuery_Failed_FailedReasonType_NO_ADJUNTANT;
const int DataQuery_Failed_FailedReasonType_FailedReasonType_ARRAYSIZE = DataQuery_Failed_FailedReasonType_FailedReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataQuery_Failed_FailedReasonType_descriptor();
inline const ::std::string& DataQuery_Failed_FailedReasonType_Name(DataQuery_Failed_FailedReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataQuery_Failed_FailedReasonType_descriptor(), value);
}
inline bool DataQuery_Failed_FailedReasonType_Parse(
    const ::std::string& name, DataQuery_Failed_FailedReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataQuery_Failed_FailedReasonType>(
    DataQuery_Failed_FailedReasonType_descriptor(), name, value);
}
// ===================================================================

class DataQuery_Failed : public ::google::protobuf::Message {
 public:
  DataQuery_Failed();
  virtual ~DataQuery_Failed();
  
  DataQuery_Failed(const DataQuery_Failed& from);
  
  inline DataQuery_Failed& operator=(const DataQuery_Failed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataQuery_Failed& default_instance();
  
  void Swap(DataQuery_Failed* other);
  
  // implements Message ----------------------------------------------
  
  DataQuery_Failed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataQuery_Failed& from);
  void MergeFrom(const DataQuery_Failed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataQuery_Failed_traits traits;
  static const traits value = DataQuery_Failed_traits_value;
  static inline bool traits_IsValid(int value) {
    return DataQuery_Failed_traits_IsValid(value);
  }
  static const traits traits_MIN =
    DataQuery_Failed_traits_traits_MIN;
  static const traits traits_MAX =
    DataQuery_Failed_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    DataQuery_Failed_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return DataQuery_Failed_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return DataQuery_Failed_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return DataQuery_Failed_traits_Parse(name, value);
  }
  
  typedef DataQuery_Failed_FailedReasonType FailedReasonType;
  static const FailedReasonType NOT_CARE = DataQuery_Failed_FailedReasonType_NOT_CARE;
  static const FailedReasonType USE_NOT_EXIST_PROP = DataQuery_Failed_FailedReasonType_USE_NOT_EXIST_PROP;
  static const FailedReasonType NOT_ENOUGH_MONEY = DataQuery_Failed_FailedReasonType_NOT_ENOUGH_MONEY;
  static const FailedReasonType NO_TASK = DataQuery_Failed_FailedReasonType_NO_TASK;
  static const FailedReasonType NO_ADJUNTANT = DataQuery_Failed_FailedReasonType_NO_ADJUNTANT;
  static inline bool FailedReasonType_IsValid(int value) {
    return DataQuery_Failed_FailedReasonType_IsValid(value);
  }
  static const FailedReasonType FailedReasonType_MIN =
    DataQuery_Failed_FailedReasonType_FailedReasonType_MIN;
  static const FailedReasonType FailedReasonType_MAX =
    DataQuery_Failed_FailedReasonType_FailedReasonType_MAX;
  static const int FailedReasonType_ARRAYSIZE =
    DataQuery_Failed_FailedReasonType_FailedReasonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailedReasonType_descriptor() {
    return DataQuery_Failed_FailedReasonType_descriptor();
  }
  static inline const ::std::string& FailedReasonType_Name(FailedReasonType value) {
    return DataQuery_Failed_FailedReasonType_Name(value);
  }
  static inline bool FailedReasonType_Parse(const ::std::string& name,
      FailedReasonType* value) {
    return DataQuery_Failed_FailedReasonType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required sint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);
  
  // required int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional .game_connection.DataQuery_Failed.FailedReasonType failed_reason = 4;
  inline bool has_failed_reason() const;
  inline void clear_failed_reason();
  static const int kFailedReasonFieldNumber = 4;
  inline ::game_connection::DataQuery_Failed_FailedReasonType failed_reason() const;
  inline void set_failed_reason(::game_connection::DataQuery_Failed_FailedReasonType value);
  
  // @@protoc_insertion_point(class_scope:game_connection.DataQuery_Failed)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_failed_reason();
  inline void clear_has_failed_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 key_;
  ::google::protobuf::int32 message_id_;
  ::google::protobuf::int32 player_id_;
  int failed_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DataQuery_5fFailed_2eproto();
  friend void protobuf_AssignDesc_DataQuery_5fFailed_2eproto();
  friend void protobuf_ShutdownFile_DataQuery_5fFailed_2eproto();
  
  void InitAsDefaultInstance();
  static DataQuery_Failed* default_instance_;
};
// ===================================================================


// ===================================================================

// DataQuery_Failed

// required sint64 key = 1;
inline bool DataQuery_Failed::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataQuery_Failed::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataQuery_Failed::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataQuery_Failed::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 DataQuery_Failed::key() const {
  return key_;
}
inline void DataQuery_Failed::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// required int32 message_id = 2;
inline bool DataQuery_Failed::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataQuery_Failed::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataQuery_Failed::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataQuery_Failed::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 DataQuery_Failed::message_id() const {
  return message_id_;
}
inline void DataQuery_Failed::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional int32 player_id = 3;
inline bool DataQuery_Failed::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataQuery_Failed::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataQuery_Failed::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataQuery_Failed::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 DataQuery_Failed::player_id() const {
  return player_id_;
}
inline void DataQuery_Failed::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .game_connection.DataQuery_Failed.FailedReasonType failed_reason = 4;
inline bool DataQuery_Failed::has_failed_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataQuery_Failed::set_has_failed_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataQuery_Failed::clear_has_failed_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataQuery_Failed::clear_failed_reason() {
  failed_reason_ = 0;
  clear_has_failed_reason();
}
inline ::game_connection::DataQuery_Failed_FailedReasonType DataQuery_Failed::failed_reason() const {
  return static_cast< ::game_connection::DataQuery_Failed_FailedReasonType >(failed_reason_);
}
inline void DataQuery_Failed::set_failed_reason(::game_connection::DataQuery_Failed_FailedReasonType value) {
  GOOGLE_DCHECK(::game_connection::DataQuery_Failed_FailedReasonType_IsValid(value));
  set_has_failed_reason();
  failed_reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::DataQuery_Failed_traits>() {
  return ::game_connection::DataQuery_Failed_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::DataQuery_Failed_FailedReasonType>() {
  return ::game_connection::DataQuery_Failed_FailedReasonType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataQuery_5fFailed_2eproto__INCLUDED
