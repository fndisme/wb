// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityGameOver.proto

#ifndef PROTOBUF_UnityGameOver_2eproto__INCLUDED
#define PROTOBUF_UnityGameOver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityGameOver_2eproto();
void protobuf_AssignDesc_UnityGameOver_2eproto();
void protobuf_ShutdownFile_UnityGameOver_2eproto();

class UnityGameOver;
class UnityGameOver_Award;

enum UnityGameOver_traits {
  UnityGameOver_traits_value = 3565
};
bool UnityGameOver_traits_IsValid(int value);
const UnityGameOver_traits UnityGameOver_traits_traits_MIN = UnityGameOver_traits_value;
const UnityGameOver_traits UnityGameOver_traits_traits_MAX = UnityGameOver_traits_value;
const int UnityGameOver_traits_traits_ARRAYSIZE = UnityGameOver_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityGameOver_traits_descriptor();
inline const ::std::string& UnityGameOver_traits_Name(UnityGameOver_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityGameOver_traits_descriptor(), value);
}
inline bool UnityGameOver_traits_Parse(
    const ::std::string& name, UnityGameOver_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityGameOver_traits>(
    UnityGameOver_traits_descriptor(), name, value);
}
enum UnityGameOver_AwardType {
  UnityGameOver_AwardType_MATERIAL = 1,
  UnityGameOver_AwardType_PROP = 2
};
bool UnityGameOver_AwardType_IsValid(int value);
const UnityGameOver_AwardType UnityGameOver_AwardType_AwardType_MIN = UnityGameOver_AwardType_MATERIAL;
const UnityGameOver_AwardType UnityGameOver_AwardType_AwardType_MAX = UnityGameOver_AwardType_PROP;
const int UnityGameOver_AwardType_AwardType_ARRAYSIZE = UnityGameOver_AwardType_AwardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityGameOver_AwardType_descriptor();
inline const ::std::string& UnityGameOver_AwardType_Name(UnityGameOver_AwardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityGameOver_AwardType_descriptor(), value);
}
inline bool UnityGameOver_AwardType_Parse(
    const ::std::string& name, UnityGameOver_AwardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityGameOver_AwardType>(
    UnityGameOver_AwardType_descriptor(), name, value);
}
// ===================================================================

class UnityGameOver_Award : public ::google::protobuf::Message {
 public:
  UnityGameOver_Award();
  virtual ~UnityGameOver_Award();
  
  UnityGameOver_Award(const UnityGameOver_Award& from);
  
  inline UnityGameOver_Award& operator=(const UnityGameOver_Award& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityGameOver_Award& default_instance();
  
  void Swap(UnityGameOver_Award* other);
  
  // implements Message ----------------------------------------------
  
  UnityGameOver_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityGameOver_Award& from);
  void MergeFrom(const UnityGameOver_Award& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // required int32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // required .game_connection.UnityGameOver.AwardType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::game_connection::UnityGameOver_AwardType type() const;
  inline void set_type(::game_connection::UnityGameOver_AwardType value);
  
  // required int32 object_id = 4;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 4;
  inline ::google::protobuf::int32 object_id() const;
  inline void set_object_id(::google::protobuf::int32 value);
  
  // required int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityGameOver.Award)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 server_id_;
  int type_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityGameOver_2eproto();
  friend void protobuf_AssignDesc_UnityGameOver_2eproto();
  friend void protobuf_ShutdownFile_UnityGameOver_2eproto();
  
  void InitAsDefaultInstance();
  static UnityGameOver_Award* default_instance_;
};
// -------------------------------------------------------------------

class UnityGameOver : public ::google::protobuf::Message {
 public:
  UnityGameOver();
  virtual ~UnityGameOver();
  
  UnityGameOver(const UnityGameOver& from);
  
  inline UnityGameOver& operator=(const UnityGameOver& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityGameOver& default_instance();
  
  void Swap(UnityGameOver* other);
  
  // implements Message ----------------------------------------------
  
  UnityGameOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityGameOver& from);
  void MergeFrom(const UnityGameOver& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityGameOver_Award Award;
  
  typedef UnityGameOver_traits traits;
  static const traits value = UnityGameOver_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityGameOver_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityGameOver_traits_traits_MIN;
  static const traits traits_MAX =
    UnityGameOver_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityGameOver_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityGameOver_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityGameOver_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityGameOver_traits_Parse(name, value);
  }
  
  typedef UnityGameOver_AwardType AwardType;
  static const AwardType MATERIAL = UnityGameOver_AwardType_MATERIAL;
  static const AwardType PROP = UnityGameOver_AwardType_PROP;
  static inline bool AwardType_IsValid(int value) {
    return UnityGameOver_AwardType_IsValid(value);
  }
  static const AwardType AwardType_MIN =
    UnityGameOver_AwardType_AwardType_MIN;
  static const AwardType AwardType_MAX =
    UnityGameOver_AwardType_AwardType_MAX;
  static const int AwardType_ARRAYSIZE =
    UnityGameOver_AwardType_AwardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AwardType_descriptor() {
    return UnityGameOver_AwardType_descriptor();
  }
  static inline const ::std::string& AwardType_Name(AwardType value) {
    return UnityGameOver_AwardType_Name(value);
  }
  static inline bool AwardType_Parse(const ::std::string& name,
      AwardType* value) {
    return UnityGameOver_AwardType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.UnityGameOver.Award award = 1;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 1;
  inline const ::game_connection::UnityGameOver_Award& award(int index) const;
  inline ::game_connection::UnityGameOver_Award* mutable_award(int index);
  inline ::game_connection::UnityGameOver_Award* add_award();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityGameOver_Award >&
      award() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityGameOver_Award >*
      mutable_award();
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityGameOver)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityGameOver_Award > award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityGameOver_2eproto();
  friend void protobuf_AssignDesc_UnityGameOver_2eproto();
  friend void protobuf_ShutdownFile_UnityGameOver_2eproto();
  
  void InitAsDefaultInstance();
  static UnityGameOver* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityGameOver_Award

// required int32 player_id = 1;
inline bool UnityGameOver_Award::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityGameOver_Award::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityGameOver_Award::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityGameOver_Award::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 UnityGameOver_Award::player_id() const {
  return player_id_;
}
inline void UnityGameOver_Award::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 server_id = 2;
inline bool UnityGameOver_Award::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityGameOver_Award::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityGameOver_Award::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityGameOver_Award::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 UnityGameOver_Award::server_id() const {
  return server_id_;
}
inline void UnityGameOver_Award::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required .game_connection.UnityGameOver.AwardType type = 3;
inline bool UnityGameOver_Award::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityGameOver_Award::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityGameOver_Award::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityGameOver_Award::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::game_connection::UnityGameOver_AwardType UnityGameOver_Award::type() const {
  return static_cast< ::game_connection::UnityGameOver_AwardType >(type_);
}
inline void UnityGameOver_Award::set_type(::game_connection::UnityGameOver_AwardType value) {
  GOOGLE_DCHECK(::game_connection::UnityGameOver_AwardType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 object_id = 4;
inline bool UnityGameOver_Award::has_object_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityGameOver_Award::set_has_object_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityGameOver_Award::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityGameOver_Award::clear_object_id() {
  object_id_ = 0;
  clear_has_object_id();
}
inline ::google::protobuf::int32 UnityGameOver_Award::object_id() const {
  return object_id_;
}
inline void UnityGameOver_Award::set_object_id(::google::protobuf::int32 value) {
  set_has_object_id();
  object_id_ = value;
}

// required int32 count = 5;
inline bool UnityGameOver_Award::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityGameOver_Award::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityGameOver_Award::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityGameOver_Award::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 UnityGameOver_Award::count() const {
  return count_;
}
inline void UnityGameOver_Award::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// UnityGameOver

// repeated .game_connection.UnityGameOver.Award award = 1;
inline int UnityGameOver::award_size() const {
  return award_.size();
}
inline void UnityGameOver::clear_award() {
  award_.Clear();
}
inline const ::game_connection::UnityGameOver_Award& UnityGameOver::award(int index) const {
  return award_.Get(index);
}
inline ::game_connection::UnityGameOver_Award* UnityGameOver::mutable_award(int index) {
  return award_.Mutable(index);
}
inline ::game_connection::UnityGameOver_Award* UnityGameOver::add_award() {
  return award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityGameOver_Award >&
UnityGameOver::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityGameOver_Award >*
UnityGameOver::mutable_award() {
  return &award_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityGameOver_traits>() {
  return ::game_connection::UnityGameOver_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityGameOver_AwardType>() {
  return ::game_connection::UnityGameOver_AwardType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityGameOver_2eproto__INCLUDED
