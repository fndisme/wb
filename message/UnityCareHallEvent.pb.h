// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityCareHallEvent.proto

#ifndef PROTOBUF_UnityCareHallEvent_2eproto__INCLUDED
#define PROTOBUF_UnityCareHallEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityCareHallEvent_2eproto();
void protobuf_AssignDesc_UnityCareHallEvent_2eproto();
void protobuf_ShutdownFile_UnityCareHallEvent_2eproto();

class UnityCareHallEvent;
class UnityCareHallEvent_Position;
class UnityCareHallEvent_HallPlayer;

enum UnityCareHallEvent_traits {
  UnityCareHallEvent_traits_value = 3652
};
bool UnityCareHallEvent_traits_IsValid(int value);
const UnityCareHallEvent_traits UnityCareHallEvent_traits_traits_MIN = UnityCareHallEvent_traits_value;
const UnityCareHallEvent_traits UnityCareHallEvent_traits_traits_MAX = UnityCareHallEvent_traits_value;
const int UnityCareHallEvent_traits_traits_ARRAYSIZE = UnityCareHallEvent_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityCareHallEvent_traits_descriptor();
inline const ::std::string& UnityCareHallEvent_traits_Name(UnityCareHallEvent_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityCareHallEvent_traits_descriptor(), value);
}
inline bool UnityCareHallEvent_traits_Parse(
    const ::std::string& name, UnityCareHallEvent_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityCareHallEvent_traits>(
    UnityCareHallEvent_traits_descriptor(), name, value);
}
enum UnityCareHallEvent_State {
  UnityCareHallEvent_State_Normal = 0,
  UnityCareHallEvent_State_ActiveRecharging = 1,
  UnityCareHallEvent_State_PositiveRecharging = 2
};
bool UnityCareHallEvent_State_IsValid(int value);
const UnityCareHallEvent_State UnityCareHallEvent_State_State_MIN = UnityCareHallEvent_State_Normal;
const UnityCareHallEvent_State UnityCareHallEvent_State_State_MAX = UnityCareHallEvent_State_PositiveRecharging;
const int UnityCareHallEvent_State_State_ARRAYSIZE = UnityCareHallEvent_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityCareHallEvent_State_descriptor();
inline const ::std::string& UnityCareHallEvent_State_Name(UnityCareHallEvent_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityCareHallEvent_State_descriptor(), value);
}
inline bool UnityCareHallEvent_State_Parse(
    const ::std::string& name, UnityCareHallEvent_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityCareHallEvent_State>(
    UnityCareHallEvent_State_descriptor(), name, value);
}
enum UnityCareHallEvent_HallLimit {
  UnityCareHallEvent_HallLimit_BaseLimit = 35,
  UnityCareHallEvent_HallLimit_NormalLimit = 61,
  UnityCareHallEvent_HallLimit_GoodLimit = 75,
  UnityCareHallEvent_HallLimit_BestLimit = 100,
  UnityCareHallEvent_HallLimit_MAX_HALL_LEVEL = 100
};
bool UnityCareHallEvent_HallLimit_IsValid(int value);
const UnityCareHallEvent_HallLimit UnityCareHallEvent_HallLimit_HallLimit_MIN = UnityCareHallEvent_HallLimit_BaseLimit;
const UnityCareHallEvent_HallLimit UnityCareHallEvent_HallLimit_HallLimit_MAX = UnityCareHallEvent_HallLimit_BestLimit;
const int UnityCareHallEvent_HallLimit_HallLimit_ARRAYSIZE = UnityCareHallEvent_HallLimit_HallLimit_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityCareHallEvent_HallLimit_descriptor();
inline const ::std::string& UnityCareHallEvent_HallLimit_Name(UnityCareHallEvent_HallLimit value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityCareHallEvent_HallLimit_descriptor(), value);
}
inline bool UnityCareHallEvent_HallLimit_Parse(
    const ::std::string& name, UnityCareHallEvent_HallLimit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityCareHallEvent_HallLimit>(
    UnityCareHallEvent_HallLimit_descriptor(), name, value);
}
// ===================================================================

class UnityCareHallEvent_Position : public ::google::protobuf::Message {
 public:
  UnityCareHallEvent_Position();
  virtual ~UnityCareHallEvent_Position();
  
  UnityCareHallEvent_Position(const UnityCareHallEvent_Position& from);
  
  inline UnityCareHallEvent_Position& operator=(const UnityCareHallEvent_Position& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityCareHallEvent_Position& default_instance();
  
  void Swap(UnityCareHallEvent_Position* other);
  
  // implements Message ----------------------------------------------
  
  UnityCareHallEvent_Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityCareHallEvent_Position& from);
  void MergeFrom(const UnityCareHallEvent_Position& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required sint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityCareHallEvent.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_AssignDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_ShutdownFile_UnityCareHallEvent_2eproto();
  
  void InitAsDefaultInstance();
  static UnityCareHallEvent_Position* default_instance_;
};
// -------------------------------------------------------------------

class UnityCareHallEvent_HallPlayer : public ::google::protobuf::Message {
 public:
  UnityCareHallEvent_HallPlayer();
  virtual ~UnityCareHallEvent_HallPlayer();
  
  UnityCareHallEvent_HallPlayer(const UnityCareHallEvent_HallPlayer& from);
  
  inline UnityCareHallEvent_HallPlayer& operator=(const UnityCareHallEvent_HallPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityCareHallEvent_HallPlayer& default_instance();
  
  void Swap(UnityCareHallEvent_HallPlayer* other);
  
  // implements Message ----------------------------------------------
  
  UnityCareHallEvent_HallPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityCareHallEvent_HallPlayer& from);
  void MergeFrom(const UnityCareHallEvent_HallPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required .game_connection.UnityCareHallEvent.Position position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::game_connection::UnityCareHallEvent_Position& position() const;
  inline ::game_connection::UnityCareHallEvent_Position* mutable_position();
  inline ::game_connection::UnityCareHallEvent_Position* release_position();
  
  // optional .game_connection.UnityCareHallEvent.State state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::game_connection::UnityCareHallEvent_State state() const;
  inline void set_state(::game_connection::UnityCareHallEvent_State value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityCareHallEvent.HallPlayer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::game_connection::UnityCareHallEvent_Position* position_;
  ::google::protobuf::int32 id_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_AssignDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_ShutdownFile_UnityCareHallEvent_2eproto();
  
  void InitAsDefaultInstance();
  static UnityCareHallEvent_HallPlayer* default_instance_;
};
// -------------------------------------------------------------------

class UnityCareHallEvent : public ::google::protobuf::Message {
 public:
  UnityCareHallEvent();
  virtual ~UnityCareHallEvent();
  
  UnityCareHallEvent(const UnityCareHallEvent& from);
  
  inline UnityCareHallEvent& operator=(const UnityCareHallEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityCareHallEvent& default_instance();
  
  void Swap(UnityCareHallEvent* other);
  
  // implements Message ----------------------------------------------
  
  UnityCareHallEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityCareHallEvent& from);
  void MergeFrom(const UnityCareHallEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityCareHallEvent_Position Position;
  typedef UnityCareHallEvent_HallPlayer HallPlayer;
  
  typedef UnityCareHallEvent_traits traits;
  static const traits value = UnityCareHallEvent_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityCareHallEvent_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityCareHallEvent_traits_traits_MIN;
  static const traits traits_MAX =
    UnityCareHallEvent_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityCareHallEvent_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityCareHallEvent_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityCareHallEvent_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityCareHallEvent_traits_Parse(name, value);
  }
  
  typedef UnityCareHallEvent_State State;
  static const State Normal = UnityCareHallEvent_State_Normal;
  static const State ActiveRecharging = UnityCareHallEvent_State_ActiveRecharging;
  static const State PositiveRecharging = UnityCareHallEvent_State_PositiveRecharging;
  static inline bool State_IsValid(int value) {
    return UnityCareHallEvent_State_IsValid(value);
  }
  static const State State_MIN =
    UnityCareHallEvent_State_State_MIN;
  static const State State_MAX =
    UnityCareHallEvent_State_State_MAX;
  static const int State_ARRAYSIZE =
    UnityCareHallEvent_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return UnityCareHallEvent_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return UnityCareHallEvent_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return UnityCareHallEvent_State_Parse(name, value);
  }
  
  typedef UnityCareHallEvent_HallLimit HallLimit;
  static const HallLimit BaseLimit = UnityCareHallEvent_HallLimit_BaseLimit;
  static const HallLimit NormalLimit = UnityCareHallEvent_HallLimit_NormalLimit;
  static const HallLimit GoodLimit = UnityCareHallEvent_HallLimit_GoodLimit;
  static const HallLimit BestLimit = UnityCareHallEvent_HallLimit_BestLimit;
  static const HallLimit MAX_HALL_LEVEL = UnityCareHallEvent_HallLimit_MAX_HALL_LEVEL;
  static inline bool HallLimit_IsValid(int value) {
    return UnityCareHallEvent_HallLimit_IsValid(value);
  }
  static const HallLimit HallLimit_MIN =
    UnityCareHallEvent_HallLimit_HallLimit_MIN;
  static const HallLimit HallLimit_MAX =
    UnityCareHallEvent_HallLimit_HallLimit_MAX;
  static const int HallLimit_ARRAYSIZE =
    UnityCareHallEvent_HallLimit_HallLimit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HallLimit_descriptor() {
    return UnityCareHallEvent_HallLimit_descriptor();
  }
  static inline const ::std::string& HallLimit_Name(HallLimit value) {
    return UnityCareHallEvent_HallLimit_Name(value);
  }
  static inline bool HallLimit_Parse(const ::std::string& name,
      HallLimit* value) {
    return UnityCareHallEvent_HallLimit_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .game_connection.UnityCareHallEvent.HallPlayer player = 2;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::game_connection::UnityCareHallEvent_HallPlayer& player(int index) const;
  inline ::game_connection::UnityCareHallEvent_HallPlayer* mutable_player(int index);
  inline ::game_connection::UnityCareHallEvent_HallPlayer* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityCareHallEvent_HallPlayer >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityCareHallEvent_HallPlayer >*
      mutable_player();
  
  // optional int32 hall_id = 3;
  inline bool has_hall_id() const;
  inline void clear_hall_id();
  static const int kHallIdFieldNumber = 3;
  inline ::google::protobuf::int32 hall_id() const;
  inline void set_hall_id(::google::protobuf::int32 value);
  
  // optional bool random_hall = 4;
  inline bool has_random_hall() const;
  inline void clear_random_hall();
  static const int kRandomHallFieldNumber = 4;
  inline bool random_hall() const;
  inline void set_random_hall(bool value);
  
  // optional .game_connection.UnityCareHallEvent.Position position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline const ::game_connection::UnityCareHallEvent_Position& position() const;
  inline ::game_connection::UnityCareHallEvent_Position* mutable_position();
  inline ::game_connection::UnityCareHallEvent_Position* release_position();
  
  // optional uint32 hall_level = 6;
  inline bool has_hall_level() const;
  inline void clear_hall_level();
  static const int kHallLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 hall_level() const;
  inline void set_hall_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityCareHallEvent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hall_id();
  inline void clear_has_hall_id();
  inline void set_has_random_hall();
  inline void clear_has_random_hall();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_hall_level();
  inline void clear_has_hall_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityCareHallEvent_HallPlayer > player_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hall_id_;
  ::game_connection::UnityCareHallEvent_Position* position_;
  bool random_hall_;
  ::google::protobuf::uint32 hall_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_AssignDesc_UnityCareHallEvent_2eproto();
  friend void protobuf_ShutdownFile_UnityCareHallEvent_2eproto();
  
  void InitAsDefaultInstance();
  static UnityCareHallEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityCareHallEvent_Position

// required sint32 x = 1;
inline bool UnityCareHallEvent_Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityCareHallEvent_Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityCareHallEvent_Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityCareHallEvent_Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 UnityCareHallEvent_Position::x() const {
  return x_;
}
inline void UnityCareHallEvent_Position::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required sint32 y = 2;
inline bool UnityCareHallEvent_Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityCareHallEvent_Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityCareHallEvent_Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityCareHallEvent_Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 UnityCareHallEvent_Position::y() const {
  return y_;
}
inline void UnityCareHallEvent_Position::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required sint32 z = 3;
inline bool UnityCareHallEvent_Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityCareHallEvent_Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityCareHallEvent_Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityCareHallEvent_Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 UnityCareHallEvent_Position::z() const {
  return z_;
}
inline void UnityCareHallEvent_Position::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// UnityCareHallEvent_HallPlayer

// required int32 id = 1;
inline bool UnityCareHallEvent_HallPlayer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityCareHallEvent_HallPlayer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityCareHallEvent_HallPlayer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityCareHallEvent_HallPlayer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityCareHallEvent_HallPlayer::id() const {
  return id_;
}
inline void UnityCareHallEvent_HallPlayer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .game_connection.UnityCareHallEvent.Position position = 2;
inline bool UnityCareHallEvent_HallPlayer::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityCareHallEvent_HallPlayer::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityCareHallEvent_HallPlayer::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityCareHallEvent_HallPlayer::clear_position() {
  if (position_ != NULL) position_->::game_connection::UnityCareHallEvent_Position::Clear();
  clear_has_position();
}
inline const ::game_connection::UnityCareHallEvent_Position& UnityCareHallEvent_HallPlayer::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::game_connection::UnityCareHallEvent_Position* UnityCareHallEvent_HallPlayer::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::game_connection::UnityCareHallEvent_Position;
  return position_;
}
inline ::game_connection::UnityCareHallEvent_Position* UnityCareHallEvent_HallPlayer::release_position() {
  clear_has_position();
  ::game_connection::UnityCareHallEvent_Position* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .game_connection.UnityCareHallEvent.State state = 3;
inline bool UnityCareHallEvent_HallPlayer::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityCareHallEvent_HallPlayer::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityCareHallEvent_HallPlayer::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityCareHallEvent_HallPlayer::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::game_connection::UnityCareHallEvent_State UnityCareHallEvent_HallPlayer::state() const {
  return static_cast< ::game_connection::UnityCareHallEvent_State >(state_);
}
inline void UnityCareHallEvent_HallPlayer::set_state(::game_connection::UnityCareHallEvent_State value) {
  GOOGLE_DCHECK(::game_connection::UnityCareHallEvent_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// UnityCareHallEvent

// optional int32 id = 1;
inline bool UnityCareHallEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityCareHallEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityCareHallEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityCareHallEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityCareHallEvent::id() const {
  return id_;
}
inline void UnityCareHallEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .game_connection.UnityCareHallEvent.HallPlayer player = 2;
inline int UnityCareHallEvent::player_size() const {
  return player_.size();
}
inline void UnityCareHallEvent::clear_player() {
  player_.Clear();
}
inline const ::game_connection::UnityCareHallEvent_HallPlayer& UnityCareHallEvent::player(int index) const {
  return player_.Get(index);
}
inline ::game_connection::UnityCareHallEvent_HallPlayer* UnityCareHallEvent::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::game_connection::UnityCareHallEvent_HallPlayer* UnityCareHallEvent::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityCareHallEvent_HallPlayer >&
UnityCareHallEvent::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityCareHallEvent_HallPlayer >*
UnityCareHallEvent::mutable_player() {
  return &player_;
}

// optional int32 hall_id = 3;
inline bool UnityCareHallEvent::has_hall_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityCareHallEvent::set_has_hall_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityCareHallEvent::clear_has_hall_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityCareHallEvent::clear_hall_id() {
  hall_id_ = 0;
  clear_has_hall_id();
}
inline ::google::protobuf::int32 UnityCareHallEvent::hall_id() const {
  return hall_id_;
}
inline void UnityCareHallEvent::set_hall_id(::google::protobuf::int32 value) {
  set_has_hall_id();
  hall_id_ = value;
}

// optional bool random_hall = 4;
inline bool UnityCareHallEvent::has_random_hall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityCareHallEvent::set_has_random_hall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityCareHallEvent::clear_has_random_hall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityCareHallEvent::clear_random_hall() {
  random_hall_ = false;
  clear_has_random_hall();
}
inline bool UnityCareHallEvent::random_hall() const {
  return random_hall_;
}
inline void UnityCareHallEvent::set_random_hall(bool value) {
  set_has_random_hall();
  random_hall_ = value;
}

// optional .game_connection.UnityCareHallEvent.Position position = 5;
inline bool UnityCareHallEvent::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityCareHallEvent::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityCareHallEvent::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityCareHallEvent::clear_position() {
  if (position_ != NULL) position_->::game_connection::UnityCareHallEvent_Position::Clear();
  clear_has_position();
}
inline const ::game_connection::UnityCareHallEvent_Position& UnityCareHallEvent::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::game_connection::UnityCareHallEvent_Position* UnityCareHallEvent::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::game_connection::UnityCareHallEvent_Position;
  return position_;
}
inline ::game_connection::UnityCareHallEvent_Position* UnityCareHallEvent::release_position() {
  clear_has_position();
  ::game_connection::UnityCareHallEvent_Position* temp = position_;
  position_ = NULL;
  return temp;
}

// optional uint32 hall_level = 6;
inline bool UnityCareHallEvent::has_hall_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnityCareHallEvent::set_has_hall_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnityCareHallEvent::clear_has_hall_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnityCareHallEvent::clear_hall_level() {
  hall_level_ = 0u;
  clear_has_hall_level();
}
inline ::google::protobuf::uint32 UnityCareHallEvent::hall_level() const {
  return hall_level_;
}
inline void UnityCareHallEvent::set_hall_level(::google::protobuf::uint32 value) {
  set_has_hall_level();
  hall_level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityCareHallEvent_traits>() {
  return ::game_connection::UnityCareHallEvent_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityCareHallEvent_State>() {
  return ::game_connection::UnityCareHallEvent_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityCareHallEvent_HallLimit>() {
  return ::game_connection::UnityCareHallEvent_HallLimit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityCareHallEvent_2eproto__INCLUDED
