// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCache_ChallengeRanks.proto

#ifndef PROTOBUF_ServerCache_5fChallengeRanks_2eproto__INCLUDED
#define PROTOBUF_ServerCache_5fChallengeRanks_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerCache_5fChallengeRanks_2eproto();
void protobuf_AssignDesc_ServerCache_5fChallengeRanks_2eproto();
void protobuf_ShutdownFile_ServerCache_5fChallengeRanks_2eproto();

class ServerCache_ChallengeRanks;
class ServerCache_ChallengeRanks_Rank;

enum ServerCache_ChallengeRanks_traits {
  ServerCache_ChallengeRanks_traits_value = 4983
};
bool ServerCache_ChallengeRanks_traits_IsValid(int value);
const ServerCache_ChallengeRanks_traits ServerCache_ChallengeRanks_traits_traits_MIN = ServerCache_ChallengeRanks_traits_value;
const ServerCache_ChallengeRanks_traits ServerCache_ChallengeRanks_traits_traits_MAX = ServerCache_ChallengeRanks_traits_value;
const int ServerCache_ChallengeRanks_traits_traits_ARRAYSIZE = ServerCache_ChallengeRanks_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerCache_ChallengeRanks_traits_descriptor();
inline const ::std::string& ServerCache_ChallengeRanks_traits_Name(ServerCache_ChallengeRanks_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerCache_ChallengeRanks_traits_descriptor(), value);
}
inline bool ServerCache_ChallengeRanks_traits_Parse(
    const ::std::string& name, ServerCache_ChallengeRanks_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerCache_ChallengeRanks_traits>(
    ServerCache_ChallengeRanks_traits_descriptor(), name, value);
}
// ===================================================================

class ServerCache_ChallengeRanks_Rank : public ::google::protobuf::Message {
 public:
  ServerCache_ChallengeRanks_Rank();
  virtual ~ServerCache_ChallengeRanks_Rank();
  
  ServerCache_ChallengeRanks_Rank(const ServerCache_ChallengeRanks_Rank& from);
  
  inline ServerCache_ChallengeRanks_Rank& operator=(const ServerCache_ChallengeRanks_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerCache_ChallengeRanks_Rank& default_instance();
  
  void Swap(ServerCache_ChallengeRanks_Rank* other);
  
  // implements Message ----------------------------------------------
  
  ServerCache_ChallengeRanks_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerCache_ChallengeRanks_Rank& from);
  void MergeFrom(const ServerCache_ChallengeRanks_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional int64 last_challenge_tick = 4;
  inline bool has_last_challenge_tick() const;
  inline void clear_last_challenge_tick();
  static const int kLastChallengeTickFieldNumber = 4;
  inline ::google::protobuf::int64 last_challenge_tick() const;
  inline void set_last_challenge_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ServerCache_ChallengeRanks.Rank)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_last_challenge_tick();
  inline void clear_has_last_challenge_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int64 last_challenge_tick_;
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ServerCache_5fChallengeRanks_2eproto();
  friend void protobuf_AssignDesc_ServerCache_5fChallengeRanks_2eproto();
  friend void protobuf_ShutdownFile_ServerCache_5fChallengeRanks_2eproto();
  
  void InitAsDefaultInstance();
  static ServerCache_ChallengeRanks_Rank* default_instance_;
};
// -------------------------------------------------------------------

class ServerCache_ChallengeRanks : public ::google::protobuf::Message {
 public:
  ServerCache_ChallengeRanks();
  virtual ~ServerCache_ChallengeRanks();
  
  ServerCache_ChallengeRanks(const ServerCache_ChallengeRanks& from);
  
  inline ServerCache_ChallengeRanks& operator=(const ServerCache_ChallengeRanks& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerCache_ChallengeRanks& default_instance();
  
  void Swap(ServerCache_ChallengeRanks* other);
  
  // implements Message ----------------------------------------------
  
  ServerCache_ChallengeRanks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerCache_ChallengeRanks& from);
  void MergeFrom(const ServerCache_ChallengeRanks& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ServerCache_ChallengeRanks_Rank Rank;
  
  typedef ServerCache_ChallengeRanks_traits traits;
  static const traits value = ServerCache_ChallengeRanks_traits_value;
  static inline bool traits_IsValid(int value) {
    return ServerCache_ChallengeRanks_traits_IsValid(value);
  }
  static const traits traits_MIN =
    ServerCache_ChallengeRanks_traits_traits_MIN;
  static const traits traits_MAX =
    ServerCache_ChallengeRanks_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    ServerCache_ChallengeRanks_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return ServerCache_ChallengeRanks_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return ServerCache_ChallengeRanks_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return ServerCache_ChallengeRanks_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.ServerCache_ChallengeRanks.Rank player = 1;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::game_connection::ServerCache_ChallengeRanks_Rank& player(int index) const;
  inline ::game_connection::ServerCache_ChallengeRanks_Rank* mutable_player(int index);
  inline ::game_connection::ServerCache_ChallengeRanks_Rank* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ServerCache_ChallengeRanks_Rank >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::ServerCache_ChallengeRanks_Rank >*
      mutable_player();
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ServerCache_ChallengeRanks)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::ServerCache_ChallengeRanks_Rank > player_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ServerCache_5fChallengeRanks_2eproto();
  friend void protobuf_AssignDesc_ServerCache_5fChallengeRanks_2eproto();
  friend void protobuf_ShutdownFile_ServerCache_5fChallengeRanks_2eproto();
  
  void InitAsDefaultInstance();
  static ServerCache_ChallengeRanks* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerCache_ChallengeRanks_Rank

// required int32 id = 1;
inline bool ServerCache_ChallengeRanks_Rank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerCache_ChallengeRanks_Rank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ServerCache_ChallengeRanks_Rank::id() const {
  return id_;
}
inline void ServerCache_ChallengeRanks_Rank::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 rank = 2;
inline bool ServerCache_ChallengeRanks_Rank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerCache_ChallengeRanks_Rank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ServerCache_ChallengeRanks_Rank::rank() const {
  return rank_;
}
inline void ServerCache_ChallengeRanks_Rank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 time = 3;
inline bool ServerCache_ChallengeRanks_Rank::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerCache_ChallengeRanks_Rank::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ServerCache_ChallengeRanks_Rank::time() const {
  return time_;
}
inline void ServerCache_ChallengeRanks_Rank::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional int64 last_challenge_tick = 4;
inline bool ServerCache_ChallengeRanks_Rank::has_last_challenge_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerCache_ChallengeRanks_Rank::set_has_last_challenge_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_has_last_challenge_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerCache_ChallengeRanks_Rank::clear_last_challenge_tick() {
  last_challenge_tick_ = GOOGLE_LONGLONG(0);
  clear_has_last_challenge_tick();
}
inline ::google::protobuf::int64 ServerCache_ChallengeRanks_Rank::last_challenge_tick() const {
  return last_challenge_tick_;
}
inline void ServerCache_ChallengeRanks_Rank::set_last_challenge_tick(::google::protobuf::int64 value) {
  set_has_last_challenge_tick();
  last_challenge_tick_ = value;
}

// -------------------------------------------------------------------

// ServerCache_ChallengeRanks

// repeated .game_connection.ServerCache_ChallengeRanks.Rank player = 1;
inline int ServerCache_ChallengeRanks::player_size() const {
  return player_.size();
}
inline void ServerCache_ChallengeRanks::clear_player() {
  player_.Clear();
}
inline const ::game_connection::ServerCache_ChallengeRanks_Rank& ServerCache_ChallengeRanks::player(int index) const {
  return player_.Get(index);
}
inline ::game_connection::ServerCache_ChallengeRanks_Rank* ServerCache_ChallengeRanks::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::game_connection::ServerCache_ChallengeRanks_Rank* ServerCache_ChallengeRanks::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ServerCache_ChallengeRanks_Rank >&
ServerCache_ChallengeRanks::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::ServerCache_ChallengeRanks_Rank >*
ServerCache_ChallengeRanks::mutable_player() {
  return &player_;
}

// optional int32 rank = 2;
inline bool ServerCache_ChallengeRanks::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerCache_ChallengeRanks::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerCache_ChallengeRanks::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerCache_ChallengeRanks::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ServerCache_ChallengeRanks::rank() const {
  return rank_;
}
inline void ServerCache_ChallengeRanks::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ServerCache_ChallengeRanks_traits>() {
  return ::game_connection::ServerCache_ChallengeRanks_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerCache_5fChallengeRanks_2eproto__INCLUDED
