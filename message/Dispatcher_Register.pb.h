// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dispatcher_Register.proto

#ifndef PROTOBUF_Dispatcher_5fRegister_2eproto__INCLUDED
#define PROTOBUF_Dispatcher_5fRegister_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Dispatcher_5fRegister_2eproto();
void protobuf_AssignDesc_Dispatcher_5fRegister_2eproto();
void protobuf_ShutdownFile_Dispatcher_5fRegister_2eproto();

class Dispatcher_Register;

enum Dispatcher_Register_traits {
  Dispatcher_Register_traits_value = 6653
};
bool Dispatcher_Register_traits_IsValid(int value);
const Dispatcher_Register_traits Dispatcher_Register_traits_traits_MIN = Dispatcher_Register_traits_value;
const Dispatcher_Register_traits Dispatcher_Register_traits_traits_MAX = Dispatcher_Register_traits_value;
const int Dispatcher_Register_traits_traits_ARRAYSIZE = Dispatcher_Register_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dispatcher_Register_traits_descriptor();
inline const ::std::string& Dispatcher_Register_traits_Name(Dispatcher_Register_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dispatcher_Register_traits_descriptor(), value);
}
inline bool Dispatcher_Register_traits_Parse(
    const ::std::string& name, Dispatcher_Register_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dispatcher_Register_traits>(
    Dispatcher_Register_traits_descriptor(), name, value);
}
enum Dispatcher_Register_ServerType {
  Dispatcher_Register_ServerType_FLASH = 1,
  Dispatcher_Register_ServerType_UNITY = 2
};
bool Dispatcher_Register_ServerType_IsValid(int value);
const Dispatcher_Register_ServerType Dispatcher_Register_ServerType_ServerType_MIN = Dispatcher_Register_ServerType_FLASH;
const Dispatcher_Register_ServerType Dispatcher_Register_ServerType_ServerType_MAX = Dispatcher_Register_ServerType_UNITY;
const int Dispatcher_Register_ServerType_ServerType_ARRAYSIZE = Dispatcher_Register_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dispatcher_Register_ServerType_descriptor();
inline const ::std::string& Dispatcher_Register_ServerType_Name(Dispatcher_Register_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dispatcher_Register_ServerType_descriptor(), value);
}
inline bool Dispatcher_Register_ServerType_Parse(
    const ::std::string& name, Dispatcher_Register_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dispatcher_Register_ServerType>(
    Dispatcher_Register_ServerType_descriptor(), name, value);
}
// ===================================================================

class Dispatcher_Register : public ::google::protobuf::Message {
 public:
  Dispatcher_Register();
  virtual ~Dispatcher_Register();
  
  Dispatcher_Register(const Dispatcher_Register& from);
  
  inline Dispatcher_Register& operator=(const Dispatcher_Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dispatcher_Register& default_instance();
  
  void Swap(Dispatcher_Register* other);
  
  // implements Message ----------------------------------------------
  
  Dispatcher_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dispatcher_Register& from);
  void MergeFrom(const Dispatcher_Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Dispatcher_Register_traits traits;
  static const traits value = Dispatcher_Register_traits_value;
  static inline bool traits_IsValid(int value) {
    return Dispatcher_Register_traits_IsValid(value);
  }
  static const traits traits_MIN =
    Dispatcher_Register_traits_traits_MIN;
  static const traits traits_MAX =
    Dispatcher_Register_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    Dispatcher_Register_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return Dispatcher_Register_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return Dispatcher_Register_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return Dispatcher_Register_traits_Parse(name, value);
  }
  
  typedef Dispatcher_Register_ServerType ServerType;
  static const ServerType FLASH = Dispatcher_Register_ServerType_FLASH;
  static const ServerType UNITY = Dispatcher_Register_ServerType_UNITY;
  static inline bool ServerType_IsValid(int value) {
    return Dispatcher_Register_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    Dispatcher_Register_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    Dispatcher_Register_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    Dispatcher_Register_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return Dispatcher_Register_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return Dispatcher_Register_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return Dispatcher_Register_ServerType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required .game_connection.Dispatcher_Register.ServerType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::game_connection::Dispatcher_Register_ServerType type() const;
  inline void set_type(::game_connection::Dispatcher_Register_ServerType value);
  
  // @@protoc_insertion_point(class_scope:game_connection.Dispatcher_Register)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* address_;
  ::google::protobuf::int32 port_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Dispatcher_5fRegister_2eproto();
  friend void protobuf_AssignDesc_Dispatcher_5fRegister_2eproto();
  friend void protobuf_ShutdownFile_Dispatcher_5fRegister_2eproto();
  
  void InitAsDefaultInstance();
  static Dispatcher_Register* default_instance_;
};
// ===================================================================


// ===================================================================

// Dispatcher_Register

// required string address = 1;
inline bool Dispatcher_Register::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dispatcher_Register::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dispatcher_Register::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dispatcher_Register::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Dispatcher_Register::address() const {
  return *address_;
}
inline void Dispatcher_Register::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Dispatcher_Register::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Dispatcher_Register::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dispatcher_Register::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Dispatcher_Register::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool Dispatcher_Register::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dispatcher_Register::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dispatcher_Register::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dispatcher_Register::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Dispatcher_Register::port() const {
  return port_;
}
inline void Dispatcher_Register::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required .game_connection.Dispatcher_Register.ServerType type = 3;
inline bool Dispatcher_Register::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dispatcher_Register::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dispatcher_Register::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dispatcher_Register::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::game_connection::Dispatcher_Register_ServerType Dispatcher_Register::type() const {
  return static_cast< ::game_connection::Dispatcher_Register_ServerType >(type_);
}
inline void Dispatcher_Register::set_type(::game_connection::Dispatcher_Register_ServerType value) {
  GOOGLE_DCHECK(::game_connection::Dispatcher_Register_ServerType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::Dispatcher_Register_traits>() {
  return ::game_connection::Dispatcher_Register_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::Dispatcher_Register_ServerType>() {
  return ::game_connection::Dispatcher_Register_ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Dispatcher_5fRegister_2eproto__INCLUDED
