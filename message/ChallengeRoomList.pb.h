// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChallengeRoomList.proto

#ifndef PROTOBUF_ChallengeRoomList_2eproto__INCLUDED
#define PROTOBUF_ChallengeRoomList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChallengeRoomList_2eproto();
void protobuf_AssignDesc_ChallengeRoomList_2eproto();
void protobuf_ShutdownFile_ChallengeRoomList_2eproto();

class ChallengeRoomList;
class ChallengeRoomList_RoomInfomation;
class ChallengeRoomList_RoomInfomation_RoomPlayerInfomation;

enum ChallengeRoomList_traits {
  ChallengeRoomList_traits_value = 3313
};
bool ChallengeRoomList_traits_IsValid(int value);
const ChallengeRoomList_traits ChallengeRoomList_traits_traits_MIN = ChallengeRoomList_traits_value;
const ChallengeRoomList_traits ChallengeRoomList_traits_traits_MAX = ChallengeRoomList_traits_value;
const int ChallengeRoomList_traits_traits_ARRAYSIZE = ChallengeRoomList_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChallengeRoomList_traits_descriptor();
inline const ::std::string& ChallengeRoomList_traits_Name(ChallengeRoomList_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChallengeRoomList_traits_descriptor(), value);
}
inline bool ChallengeRoomList_traits_Parse(
    const ::std::string& name, ChallengeRoomList_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChallengeRoomList_traits>(
    ChallengeRoomList_traits_descriptor(), name, value);
}
// ===================================================================

class ChallengeRoomList_RoomInfomation_RoomPlayerInfomation : public ::google::protobuf::Message {
 public:
  ChallengeRoomList_RoomInfomation_RoomPlayerInfomation();
  virtual ~ChallengeRoomList_RoomInfomation_RoomPlayerInfomation();
  
  ChallengeRoomList_RoomInfomation_RoomPlayerInfomation(const ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& from);
  
  inline ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& operator=(const ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& default_instance();
  
  void Swap(ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* other);
  
  // implements Message ----------------------------------------------
  
  ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& from);
  void MergeFrom(const ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required bool is_red_team = 2;
  inline bool has_is_red_team() const;
  inline void clear_is_red_team();
  static const int kIsRedTeamFieldNumber = 2;
  inline bool is_red_team() const;
  inline void set_is_red_team(bool value);
  
  // required bool is_ready = 3;
  inline bool has_is_ready() const;
  inline void clear_is_ready();
  static const int kIsReadyFieldNumber = 3;
  inline bool is_ready() const;
  inline void set_is_ready(bool value);
  
  // required int32 fleet_type = 4;
  inline bool has_fleet_type() const;
  inline void clear_fleet_type();
  static const int kFleetTypeFieldNumber = 4;
  inline ::google::protobuf::int32 fleet_type() const;
  inline void set_fleet_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ChallengeRoomList.RoomInfomation.RoomPlayerInfomation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_red_team();
  inline void clear_has_is_red_team();
  inline void set_has_is_ready();
  inline void clear_has_is_ready();
  inline void set_has_fleet_type();
  inline void clear_has_fleet_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool is_red_team_;
  bool is_ready_;
  ::google::protobuf::int32 fleet_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ChallengeRoomList_2eproto();
  friend void protobuf_AssignDesc_ChallengeRoomList_2eproto();
  friend void protobuf_ShutdownFile_ChallengeRoomList_2eproto();
  
  void InitAsDefaultInstance();
  static ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* default_instance_;
};
// -------------------------------------------------------------------

class ChallengeRoomList_RoomInfomation : public ::google::protobuf::Message {
 public:
  ChallengeRoomList_RoomInfomation();
  virtual ~ChallengeRoomList_RoomInfomation();
  
  ChallengeRoomList_RoomInfomation(const ChallengeRoomList_RoomInfomation& from);
  
  inline ChallengeRoomList_RoomInfomation& operator=(const ChallengeRoomList_RoomInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRoomList_RoomInfomation& default_instance();
  
  void Swap(ChallengeRoomList_RoomInfomation* other);
  
  // implements Message ----------------------------------------------
  
  ChallengeRoomList_RoomInfomation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeRoomList_RoomInfomation& from);
  void MergeFrom(const ChallengeRoomList_RoomInfomation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChallengeRoomList_RoomInfomation_RoomPlayerInfomation RoomPlayerInfomation;
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required bool has_password = 6;
  inline bool has_has_password() const;
  inline void clear_has_password();
  static const int kHasPasswordFieldNumber = 6;
  inline bool has_password() const;
  inline void set_has_password(bool value);
  
  // required bytes name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 mapid = 8;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 8;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);
  
  // required int32 roundtime = 9;
  inline bool has_roundtime() const;
  inline void clear_roundtime();
  static const int kRoundtimeFieldNumber = 9;
  inline ::google::protobuf::int32 roundtime() const;
  inline void set_roundtime(::google::protobuf::int32 value);
  
  // required uint32 red_team_max_number = 1;
  inline bool has_red_team_max_number() const;
  inline void clear_red_team_max_number();
  static const int kRedTeamMaxNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 red_team_max_number() const;
  inline void set_red_team_max_number(::google::protobuf::uint32 value);
  
  // required uint32 blue_team_max_number = 2;
  inline bool has_blue_team_max_number() const;
  inline void clear_blue_team_max_number();
  static const int kBlueTeamMaxNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 blue_team_max_number() const;
  inline void set_blue_team_max_number(::google::protobuf::uint32 value);
  
  // required bool is_fighting = 3;
  inline bool has_is_fighting() const;
  inline void clear_is_fighting();
  static const int kIsFightingFieldNumber = 3;
  inline bool is_fighting() const;
  inline void set_is_fighting(bool value);
  
  // repeated .game_connection.ChallengeRoomList.RoomInfomation.RoomPlayerInfomation player = 4;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 4;
  inline const ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& player(int index) const;
  inline ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* mutable_player(int index);
  inline ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation >*
      mutable_player();
  
  // @@protoc_insertion_point(class_scope:game_connection.ChallengeRoomList.RoomInfomation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_has_password();
  inline void clear_has_has_password();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_roundtime();
  inline void clear_has_roundtime();
  inline void set_has_red_team_max_number();
  inline void clear_has_red_team_max_number();
  inline void set_has_blue_team_max_number();
  inline void clear_has_blue_team_max_number();
  inline void set_has_is_fighting();
  inline void clear_has_is_fighting();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapid_;
  ::std::string* name_;
  ::google::protobuf::int32 roundtime_;
  bool has_password_;
  bool is_fighting_;
  ::google::protobuf::uint32 red_team_max_number_;
  ::google::protobuf::uint32 blue_team_max_number_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation > player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ChallengeRoomList_2eproto();
  friend void protobuf_AssignDesc_ChallengeRoomList_2eproto();
  friend void protobuf_ShutdownFile_ChallengeRoomList_2eproto();
  
  void InitAsDefaultInstance();
  static ChallengeRoomList_RoomInfomation* default_instance_;
};
// -------------------------------------------------------------------

class ChallengeRoomList : public ::google::protobuf::Message {
 public:
  ChallengeRoomList();
  virtual ~ChallengeRoomList();
  
  ChallengeRoomList(const ChallengeRoomList& from);
  
  inline ChallengeRoomList& operator=(const ChallengeRoomList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRoomList& default_instance();
  
  void Swap(ChallengeRoomList* other);
  
  // implements Message ----------------------------------------------
  
  ChallengeRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeRoomList& from);
  void MergeFrom(const ChallengeRoomList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChallengeRoomList_RoomInfomation RoomInfomation;
  
  typedef ChallengeRoomList_traits traits;
  static const traits value = ChallengeRoomList_traits_value;
  static inline bool traits_IsValid(int value) {
    return ChallengeRoomList_traits_IsValid(value);
  }
  static const traits traits_MIN =
    ChallengeRoomList_traits_traits_MIN;
  static const traits traits_MAX =
    ChallengeRoomList_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    ChallengeRoomList_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return ChallengeRoomList_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return ChallengeRoomList_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return ChallengeRoomList_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bool is_turn_round = 1;
  inline bool has_is_turn_round() const;
  inline void clear_is_turn_round();
  static const int kIsTurnRoundFieldNumber = 1;
  inline bool is_turn_round() const;
  inline void set_is_turn_round(bool value);
  
  // repeated .game_connection.ChallengeRoomList.RoomInfomation room = 2;
  inline int room_size() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 2;
  inline const ::game_connection::ChallengeRoomList_RoomInfomation& room(int index) const;
  inline ::game_connection::ChallengeRoomList_RoomInfomation* mutable_room(int index);
  inline ::game_connection::ChallengeRoomList_RoomInfomation* add_room();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation >&
      room() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation >*
      mutable_room();
  
  // @@protoc_insertion_point(class_scope:game_connection.ChallengeRoomList)
 private:
  inline void set_has_is_turn_round();
  inline void clear_has_is_turn_round();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation > room_;
  bool is_turn_round_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ChallengeRoomList_2eproto();
  friend void protobuf_AssignDesc_ChallengeRoomList_2eproto();
  friend void protobuf_ShutdownFile_ChallengeRoomList_2eproto();
  
  void InitAsDefaultInstance();
  static ChallengeRoomList* default_instance_;
};
// ===================================================================


// ===================================================================

// ChallengeRoomList_RoomInfomation_RoomPlayerInfomation

// required int32 id = 1;
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::id() const {
  return id_;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool is_red_team = 2;
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::has_is_red_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_has_is_red_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_has_is_red_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_is_red_team() {
  is_red_team_ = false;
  clear_has_is_red_team();
}
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::is_red_team() const {
  return is_red_team_;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_is_red_team(bool value) {
  set_has_is_red_team();
  is_red_team_ = value;
}

// required bool is_ready = 3;
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::has_is_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_has_is_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_has_is_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_is_ready() {
  is_ready_ = false;
  clear_has_is_ready();
}
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::is_ready() const {
  return is_ready_;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_is_ready(bool value) {
  set_has_is_ready();
  is_ready_ = value;
}

// required int32 fleet_type = 4;
inline bool ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::has_fleet_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_has_fleet_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_has_fleet_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::clear_fleet_type() {
  fleet_type_ = 0;
  clear_has_fleet_type();
}
inline ::google::protobuf::int32 ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::fleet_type() const {
  return fleet_type_;
}
inline void ChallengeRoomList_RoomInfomation_RoomPlayerInfomation::set_fleet_type(::google::protobuf::int32 value) {
  set_has_fleet_type();
  fleet_type_ = value;
}

// -------------------------------------------------------------------

// ChallengeRoomList_RoomInfomation

// required int32 id = 5;
inline bool ChallengeRoomList_RoomInfomation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeRoomList_RoomInfomation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChallengeRoomList_RoomInfomation::id() const {
  return id_;
}
inline void ChallengeRoomList_RoomInfomation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool has_password = 6;
inline bool ChallengeRoomList_RoomInfomation::has_has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_password() {
  has_password_ = false;
  clear_has_has_password();
}
inline bool ChallengeRoomList_RoomInfomation::has_password() const {
  return has_password_;
}
inline void ChallengeRoomList_RoomInfomation::set_has_password(bool value) {
  set_has_has_password();
  has_password_ = value;
}

// required bytes name = 7;
inline bool ChallengeRoomList_RoomInfomation::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeRoomList_RoomInfomation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChallengeRoomList_RoomInfomation::name() const {
  return *name_;
}
inline void ChallengeRoomList_RoomInfomation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeRoomList_RoomInfomation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeRoomList_RoomInfomation::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeRoomList_RoomInfomation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChallengeRoomList_RoomInfomation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 mapid = 8;
inline bool ChallengeRoomList_RoomInfomation::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeRoomList_RoomInfomation::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 ChallengeRoomList_RoomInfomation::mapid() const {
  return mapid_;
}
inline void ChallengeRoomList_RoomInfomation::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required int32 roundtime = 9;
inline bool ChallengeRoomList_RoomInfomation::has_roundtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_roundtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_roundtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChallengeRoomList_RoomInfomation::clear_roundtime() {
  roundtime_ = 0;
  clear_has_roundtime();
}
inline ::google::protobuf::int32 ChallengeRoomList_RoomInfomation::roundtime() const {
  return roundtime_;
}
inline void ChallengeRoomList_RoomInfomation::set_roundtime(::google::protobuf::int32 value) {
  set_has_roundtime();
  roundtime_ = value;
}

// required uint32 red_team_max_number = 1;
inline bool ChallengeRoomList_RoomInfomation::has_red_team_max_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_red_team_max_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_red_team_max_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChallengeRoomList_RoomInfomation::clear_red_team_max_number() {
  red_team_max_number_ = 0u;
  clear_has_red_team_max_number();
}
inline ::google::protobuf::uint32 ChallengeRoomList_RoomInfomation::red_team_max_number() const {
  return red_team_max_number_;
}
inline void ChallengeRoomList_RoomInfomation::set_red_team_max_number(::google::protobuf::uint32 value) {
  set_has_red_team_max_number();
  red_team_max_number_ = value;
}

// required uint32 blue_team_max_number = 2;
inline bool ChallengeRoomList_RoomInfomation::has_blue_team_max_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_blue_team_max_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_blue_team_max_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChallengeRoomList_RoomInfomation::clear_blue_team_max_number() {
  blue_team_max_number_ = 0u;
  clear_has_blue_team_max_number();
}
inline ::google::protobuf::uint32 ChallengeRoomList_RoomInfomation::blue_team_max_number() const {
  return blue_team_max_number_;
}
inline void ChallengeRoomList_RoomInfomation::set_blue_team_max_number(::google::protobuf::uint32 value) {
  set_has_blue_team_max_number();
  blue_team_max_number_ = value;
}

// required bool is_fighting = 3;
inline bool ChallengeRoomList_RoomInfomation::has_is_fighting() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChallengeRoomList_RoomInfomation::set_has_is_fighting() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChallengeRoomList_RoomInfomation::clear_has_is_fighting() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChallengeRoomList_RoomInfomation::clear_is_fighting() {
  is_fighting_ = false;
  clear_has_is_fighting();
}
inline bool ChallengeRoomList_RoomInfomation::is_fighting() const {
  return is_fighting_;
}
inline void ChallengeRoomList_RoomInfomation::set_is_fighting(bool value) {
  set_has_is_fighting();
  is_fighting_ = value;
}

// repeated .game_connection.ChallengeRoomList.RoomInfomation.RoomPlayerInfomation player = 4;
inline int ChallengeRoomList_RoomInfomation::player_size() const {
  return player_.size();
}
inline void ChallengeRoomList_RoomInfomation::clear_player() {
  player_.Clear();
}
inline const ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation& ChallengeRoomList_RoomInfomation::player(int index) const {
  return player_.Get(index);
}
inline ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* ChallengeRoomList_RoomInfomation::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation* ChallengeRoomList_RoomInfomation::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation >&
ChallengeRoomList_RoomInfomation::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation_RoomPlayerInfomation >*
ChallengeRoomList_RoomInfomation::mutable_player() {
  return &player_;
}

// -------------------------------------------------------------------

// ChallengeRoomList

// required bool is_turn_round = 1;
inline bool ChallengeRoomList::has_is_turn_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeRoomList::set_has_is_turn_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeRoomList::clear_has_is_turn_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeRoomList::clear_is_turn_round() {
  is_turn_round_ = false;
  clear_has_is_turn_round();
}
inline bool ChallengeRoomList::is_turn_round() const {
  return is_turn_round_;
}
inline void ChallengeRoomList::set_is_turn_round(bool value) {
  set_has_is_turn_round();
  is_turn_round_ = value;
}

// repeated .game_connection.ChallengeRoomList.RoomInfomation room = 2;
inline int ChallengeRoomList::room_size() const {
  return room_.size();
}
inline void ChallengeRoomList::clear_room() {
  room_.Clear();
}
inline const ::game_connection::ChallengeRoomList_RoomInfomation& ChallengeRoomList::room(int index) const {
  return room_.Get(index);
}
inline ::game_connection::ChallengeRoomList_RoomInfomation* ChallengeRoomList::mutable_room(int index) {
  return room_.Mutable(index);
}
inline ::game_connection::ChallengeRoomList_RoomInfomation* ChallengeRoomList::add_room() {
  return room_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation >&
ChallengeRoomList::room() const {
  return room_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::ChallengeRoomList_RoomInfomation >*
ChallengeRoomList::mutable_room() {
  return &room_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ChallengeRoomList_traits>() {
  return ::game_connection::ChallengeRoomList_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChallengeRoomList_2eproto__INCLUDED
