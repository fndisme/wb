// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerMaxIdInDb.proto

#ifndef PROTOBUF_PlayerMaxIdInDb_2eproto__INCLUDED
#define PROTOBUF_PlayerMaxIdInDb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerMaxIdInDb_2eproto();
void protobuf_AssignDesc_PlayerMaxIdInDb_2eproto();
void protobuf_ShutdownFile_PlayerMaxIdInDb_2eproto();

class PlayerMaxIdInDb;
class PlayerMaxIdInDb_Meta;

enum PlayerMaxIdInDb_traits {
  PlayerMaxIdInDb_traits_value = 7212
};
bool PlayerMaxIdInDb_traits_IsValid(int value);
const PlayerMaxIdInDb_traits PlayerMaxIdInDb_traits_traits_MIN = PlayerMaxIdInDb_traits_value;
const PlayerMaxIdInDb_traits PlayerMaxIdInDb_traits_traits_MAX = PlayerMaxIdInDb_traits_value;
const int PlayerMaxIdInDb_traits_traits_ARRAYSIZE = PlayerMaxIdInDb_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerMaxIdInDb_traits_descriptor();
inline const ::std::string& PlayerMaxIdInDb_traits_Name(PlayerMaxIdInDb_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerMaxIdInDb_traits_descriptor(), value);
}
inline bool PlayerMaxIdInDb_traits_Parse(
    const ::std::string& name, PlayerMaxIdInDb_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerMaxIdInDb_traits>(
    PlayerMaxIdInDb_traits_descriptor(), name, value);
}
// ===================================================================

class PlayerMaxIdInDb_Meta : public ::google::protobuf::Message {
 public:
  PlayerMaxIdInDb_Meta();
  virtual ~PlayerMaxIdInDb_Meta();
  
  PlayerMaxIdInDb_Meta(const PlayerMaxIdInDb_Meta& from);
  
  inline PlayerMaxIdInDb_Meta& operator=(const PlayerMaxIdInDb_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMaxIdInDb_Meta& default_instance();
  
  void Swap(PlayerMaxIdInDb_Meta* other);
  
  // implements Message ----------------------------------------------
  
  PlayerMaxIdInDb_Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMaxIdInDb_Meta& from);
  void MergeFrom(const PlayerMaxIdInDb_Meta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required int32 vip_level = 3;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes key = 5;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 5;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional int32 nation = 6;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 6;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);
  
  // optional int32 league = 7;
  inline bool has_league() const;
  inline void clear_league();
  static const int kLeagueFieldNumber = 7;
  inline ::google::protobuf::int32 league() const;
  inline void set_league(::google::protobuf::int32 value);
  
  // optional int32 league_duty = 8;
  inline bool has_league_duty() const;
  inline void clear_league_duty();
  static const int kLeagueDutyFieldNumber = 8;
  inline ::google::protobuf::int32 league_duty() const;
  inline void set_league_duty(::google::protobuf::int32 value);
  
  // optional int32 current_online = 9;
  inline bool has_current_online() const;
  inline void clear_current_online();
  static const int kCurrentOnlineFieldNumber = 9;
  inline ::google::protobuf::int32 current_online() const;
  inline void set_current_online(::google::protobuf::int32 value);
  
  // optional int64 total_online = 10;
  inline bool has_total_online() const;
  inline void clear_total_online();
  static const int kTotalOnlineFieldNumber = 10;
  inline ::google::protobuf::int64 total_online() const;
  inline void set_total_online(::google::protobuf::int64 value);
  
  // optional int32 online_award_level = 11;
  inline bool has_online_award_level() const;
  inline void clear_online_award_level();
  static const int kOnlineAwardLevelFieldNumber = 11;
  inline ::google::protobuf::int32 online_award_level() const;
  inline void set_online_award_level(::google::protobuf::int32 value);
  
  // optional int32 online_award_time = 12;
  inline bool has_online_award_time() const;
  inline void clear_online_award_time();
  static const int kOnlineAwardTimeFieldNumber = 12;
  inline ::google::protobuf::int32 online_award_time() const;
  inline void set_online_award_time(::google::protobuf::int32 value);
  
  // optional bool is_adult = 13;
  inline bool has_is_adult() const;
  inline void clear_is_adult();
  static const int kIsAdultFieldNumber = 13;
  inline bool is_adult() const;
  inline void set_is_adult(bool value);
  
  // @@protoc_insertion_point(class_scope:game_connection.PlayerMaxIdInDb.Meta)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_league();
  inline void clear_has_league();
  inline void set_has_league_duty();
  inline void clear_has_league_duty();
  inline void set_has_current_online();
  inline void clear_has_current_online();
  inline void set_has_total_online();
  inline void clear_has_total_online();
  inline void set_has_online_award_level();
  inline void clear_has_online_award_level();
  inline void set_has_online_award_time();
  inline void clear_has_online_award_time();
  inline void set_has_is_adult();
  inline void clear_has_is_adult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 nation_;
  ::std::string* key_;
  ::google::protobuf::int32 league_;
  ::google::protobuf::int32 league_duty_;
  ::google::protobuf::int64 total_online_;
  ::google::protobuf::int32 current_online_;
  ::google::protobuf::int32 online_award_level_;
  ::google::protobuf::int32 online_award_time_;
  bool is_adult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayerMaxIdInDb_2eproto();
  friend void protobuf_AssignDesc_PlayerMaxIdInDb_2eproto();
  friend void protobuf_ShutdownFile_PlayerMaxIdInDb_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerMaxIdInDb_Meta* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMaxIdInDb : public ::google::protobuf::Message {
 public:
  PlayerMaxIdInDb();
  virtual ~PlayerMaxIdInDb();
  
  PlayerMaxIdInDb(const PlayerMaxIdInDb& from);
  
  inline PlayerMaxIdInDb& operator=(const PlayerMaxIdInDb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMaxIdInDb& default_instance();
  
  void Swap(PlayerMaxIdInDb* other);
  
  // implements Message ----------------------------------------------
  
  PlayerMaxIdInDb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMaxIdInDb& from);
  void MergeFrom(const PlayerMaxIdInDb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PlayerMaxIdInDb_Meta Meta;
  
  typedef PlayerMaxIdInDb_traits traits;
  static const traits value = PlayerMaxIdInDb_traits_value;
  static inline bool traits_IsValid(int value) {
    return PlayerMaxIdInDb_traits_IsValid(value);
  }
  static const traits traits_MIN =
    PlayerMaxIdInDb_traits_traits_MIN;
  static const traits traits_MAX =
    PlayerMaxIdInDb_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    PlayerMaxIdInDb_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return PlayerMaxIdInDb_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return PlayerMaxIdInDb_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return PlayerMaxIdInDb_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.PlayerMaxIdInDb.Meta meta = 1;
  inline int meta_size() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 1;
  inline const ::game_connection::PlayerMaxIdInDb_Meta& meta(int index) const;
  inline ::game_connection::PlayerMaxIdInDb_Meta* mutable_meta(int index);
  inline ::game_connection::PlayerMaxIdInDb_Meta* add_meta();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::PlayerMaxIdInDb_Meta >&
      meta() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::PlayerMaxIdInDb_Meta >*
      mutable_meta();
  
  // @@protoc_insertion_point(class_scope:game_connection.PlayerMaxIdInDb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::PlayerMaxIdInDb_Meta > meta_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayerMaxIdInDb_2eproto();
  friend void protobuf_AssignDesc_PlayerMaxIdInDb_2eproto();
  friend void protobuf_ShutdownFile_PlayerMaxIdInDb_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerMaxIdInDb* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerMaxIdInDb_Meta

// required int32 id = 1;
inline bool PlayerMaxIdInDb_Meta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMaxIdInDb_Meta::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::id() const {
  return id_;
}
inline void PlayerMaxIdInDb_Meta::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 level = 2;
inline bool PlayerMaxIdInDb_Meta::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMaxIdInDb_Meta::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::level() const {
  return level_;
}
inline void PlayerMaxIdInDb_Meta::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 vip_level = 3;
inline bool PlayerMaxIdInDb_Meta::has_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMaxIdInDb_Meta::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::vip_level() const {
  return vip_level_;
}
inline void PlayerMaxIdInDb_Meta::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional bytes name = 4;
inline bool PlayerMaxIdInDb_Meta::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMaxIdInDb_Meta::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerMaxIdInDb_Meta::name() const {
  return *name_;
}
inline void PlayerMaxIdInDb_Meta::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerMaxIdInDb_Meta::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerMaxIdInDb_Meta::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMaxIdInDb_Meta::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerMaxIdInDb_Meta::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes key = 5;
inline bool PlayerMaxIdInDb_Meta::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMaxIdInDb_Meta::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PlayerMaxIdInDb_Meta::key() const {
  return *key_;
}
inline void PlayerMaxIdInDb_Meta::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PlayerMaxIdInDb_Meta::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PlayerMaxIdInDb_Meta::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMaxIdInDb_Meta::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PlayerMaxIdInDb_Meta::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nation = 6;
inline bool PlayerMaxIdInDb_Meta::has_nation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_nation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_nation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerMaxIdInDb_Meta::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::nation() const {
  return nation_;
}
inline void PlayerMaxIdInDb_Meta::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// optional int32 league = 7;
inline bool PlayerMaxIdInDb_Meta::has_league() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_league() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_league() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerMaxIdInDb_Meta::clear_league() {
  league_ = 0;
  clear_has_league();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::league() const {
  return league_;
}
inline void PlayerMaxIdInDb_Meta::set_league(::google::protobuf::int32 value) {
  set_has_league();
  league_ = value;
}

// optional int32 league_duty = 8;
inline bool PlayerMaxIdInDb_Meta::has_league_duty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_league_duty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_league_duty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerMaxIdInDb_Meta::clear_league_duty() {
  league_duty_ = 0;
  clear_has_league_duty();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::league_duty() const {
  return league_duty_;
}
inline void PlayerMaxIdInDb_Meta::set_league_duty(::google::protobuf::int32 value) {
  set_has_league_duty();
  league_duty_ = value;
}

// optional int32 current_online = 9;
inline bool PlayerMaxIdInDb_Meta::has_current_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_current_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_current_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerMaxIdInDb_Meta::clear_current_online() {
  current_online_ = 0;
  clear_has_current_online();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::current_online() const {
  return current_online_;
}
inline void PlayerMaxIdInDb_Meta::set_current_online(::google::protobuf::int32 value) {
  set_has_current_online();
  current_online_ = value;
}

// optional int64 total_online = 10;
inline bool PlayerMaxIdInDb_Meta::has_total_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_total_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_total_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerMaxIdInDb_Meta::clear_total_online() {
  total_online_ = GOOGLE_LONGLONG(0);
  clear_has_total_online();
}
inline ::google::protobuf::int64 PlayerMaxIdInDb_Meta::total_online() const {
  return total_online_;
}
inline void PlayerMaxIdInDb_Meta::set_total_online(::google::protobuf::int64 value) {
  set_has_total_online();
  total_online_ = value;
}

// optional int32 online_award_level = 11;
inline bool PlayerMaxIdInDb_Meta::has_online_award_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_online_award_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_online_award_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerMaxIdInDb_Meta::clear_online_award_level() {
  online_award_level_ = 0;
  clear_has_online_award_level();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::online_award_level() const {
  return online_award_level_;
}
inline void PlayerMaxIdInDb_Meta::set_online_award_level(::google::protobuf::int32 value) {
  set_has_online_award_level();
  online_award_level_ = value;
}

// optional int32 online_award_time = 12;
inline bool PlayerMaxIdInDb_Meta::has_online_award_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_online_award_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_online_award_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerMaxIdInDb_Meta::clear_online_award_time() {
  online_award_time_ = 0;
  clear_has_online_award_time();
}
inline ::google::protobuf::int32 PlayerMaxIdInDb_Meta::online_award_time() const {
  return online_award_time_;
}
inline void PlayerMaxIdInDb_Meta::set_online_award_time(::google::protobuf::int32 value) {
  set_has_online_award_time();
  online_award_time_ = value;
}

// optional bool is_adult = 13;
inline bool PlayerMaxIdInDb_Meta::has_is_adult() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerMaxIdInDb_Meta::set_has_is_adult() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerMaxIdInDb_Meta::clear_has_is_adult() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerMaxIdInDb_Meta::clear_is_adult() {
  is_adult_ = false;
  clear_has_is_adult();
}
inline bool PlayerMaxIdInDb_Meta::is_adult() const {
  return is_adult_;
}
inline void PlayerMaxIdInDb_Meta::set_is_adult(bool value) {
  set_has_is_adult();
  is_adult_ = value;
}

// -------------------------------------------------------------------

// PlayerMaxIdInDb

// repeated .game_connection.PlayerMaxIdInDb.Meta meta = 1;
inline int PlayerMaxIdInDb::meta_size() const {
  return meta_.size();
}
inline void PlayerMaxIdInDb::clear_meta() {
  meta_.Clear();
}
inline const ::game_connection::PlayerMaxIdInDb_Meta& PlayerMaxIdInDb::meta(int index) const {
  return meta_.Get(index);
}
inline ::game_connection::PlayerMaxIdInDb_Meta* PlayerMaxIdInDb::mutable_meta(int index) {
  return meta_.Mutable(index);
}
inline ::game_connection::PlayerMaxIdInDb_Meta* PlayerMaxIdInDb::add_meta() {
  return meta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::PlayerMaxIdInDb_Meta >&
PlayerMaxIdInDb::meta() const {
  return meta_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::PlayerMaxIdInDb_Meta >*
PlayerMaxIdInDb::mutable_meta() {
  return &meta_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::PlayerMaxIdInDb_traits>() {
  return ::game_connection::PlayerMaxIdInDb_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerMaxIdInDb_2eproto__INCLUDED
