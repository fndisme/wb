// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dispatcher_NewKey.proto

#ifndef PROTOBUF_Dispatcher_5fNewKey_2eproto__INCLUDED
#define PROTOBUF_Dispatcher_5fNewKey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Dispatcher_5fNewKey_2eproto();
void protobuf_AssignDesc_Dispatcher_5fNewKey_2eproto();
void protobuf_ShutdownFile_Dispatcher_5fNewKey_2eproto();

class Dispatcher_NewKey;

enum Dispatcher_NewKey_traits {
  Dispatcher_NewKey_traits_value = 6654
};
bool Dispatcher_NewKey_traits_IsValid(int value);
const Dispatcher_NewKey_traits Dispatcher_NewKey_traits_traits_MIN = Dispatcher_NewKey_traits_value;
const Dispatcher_NewKey_traits Dispatcher_NewKey_traits_traits_MAX = Dispatcher_NewKey_traits_value;
const int Dispatcher_NewKey_traits_traits_ARRAYSIZE = Dispatcher_NewKey_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dispatcher_NewKey_traits_descriptor();
inline const ::std::string& Dispatcher_NewKey_traits_Name(Dispatcher_NewKey_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dispatcher_NewKey_traits_descriptor(), value);
}
inline bool Dispatcher_NewKey_traits_Parse(
    const ::std::string& name, Dispatcher_NewKey_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dispatcher_NewKey_traits>(
    Dispatcher_NewKey_traits_descriptor(), name, value);
}
// ===================================================================

class Dispatcher_NewKey : public ::google::protobuf::Message {
 public:
  Dispatcher_NewKey();
  virtual ~Dispatcher_NewKey();
  
  Dispatcher_NewKey(const Dispatcher_NewKey& from);
  
  inline Dispatcher_NewKey& operator=(const Dispatcher_NewKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dispatcher_NewKey& default_instance();
  
  void Swap(Dispatcher_NewKey* other);
  
  // implements Message ----------------------------------------------
  
  Dispatcher_NewKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dispatcher_NewKey& from);
  void MergeFrom(const Dispatcher_NewKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Dispatcher_NewKey_traits traits;
  static const traits value = Dispatcher_NewKey_traits_value;
  static inline bool traits_IsValid(int value) {
    return Dispatcher_NewKey_traits_IsValid(value);
  }
  static const traits traits_MIN =
    Dispatcher_NewKey_traits_traits_MIN;
  static const traits traits_MAX =
    Dispatcher_NewKey_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    Dispatcher_NewKey_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return Dispatcher_NewKey_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return Dispatcher_NewKey_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return Dispatcher_NewKey_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // @@protoc_insertion_point(class_scope:game_connection.Dispatcher_NewKey)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Dispatcher_5fNewKey_2eproto();
  friend void protobuf_AssignDesc_Dispatcher_5fNewKey_2eproto();
  friend void protobuf_ShutdownFile_Dispatcher_5fNewKey_2eproto();
  
  void InitAsDefaultInstance();
  static Dispatcher_NewKey* default_instance_;
};
// ===================================================================


// ===================================================================

// Dispatcher_NewKey

// required string key = 1;
inline bool Dispatcher_NewKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dispatcher_NewKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dispatcher_NewKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dispatcher_NewKey::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Dispatcher_NewKey::key() const {
  return *key_;
}
inline void Dispatcher_NewKey::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Dispatcher_NewKey::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Dispatcher_NewKey::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dispatcher_NewKey::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Dispatcher_NewKey::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::Dispatcher_NewKey_traits>() {
  return ::game_connection::Dispatcher_NewKey_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Dispatcher_5fNewKey_2eproto__INCLUDED
