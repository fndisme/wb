// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitySystemFlag.proto

#ifndef PROTOBUF_UnitySystemFlag_2eproto__INCLUDED
#define PROTOBUF_UnitySystemFlag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnitySystemFlag_2eproto();
void protobuf_AssignDesc_UnitySystemFlag_2eproto();
void protobuf_ShutdownFile_UnitySystemFlag_2eproto();

class UnitySystemFlag;

enum UnitySystemFlag_traits {
  UnitySystemFlag_traits_value = 3575
};
bool UnitySystemFlag_traits_IsValid(int value);
const UnitySystemFlag_traits UnitySystemFlag_traits_traits_MIN = UnitySystemFlag_traits_value;
const UnitySystemFlag_traits UnitySystemFlag_traits_traits_MAX = UnitySystemFlag_traits_value;
const int UnitySystemFlag_traits_traits_ARRAYSIZE = UnitySystemFlag_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitySystemFlag_traits_descriptor();
inline const ::std::string& UnitySystemFlag_traits_Name(UnitySystemFlag_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitySystemFlag_traits_descriptor(), value);
}
inline bool UnitySystemFlag_traits_Parse(
    const ::std::string& name, UnitySystemFlag_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitySystemFlag_traits>(
    UnitySystemFlag_traits_descriptor(), name, value);
}
enum UnitySystemFlag_Flag {
  UnitySystemFlag_Flag_IndugleOn = 0
};
bool UnitySystemFlag_Flag_IsValid(int value);
const UnitySystemFlag_Flag UnitySystemFlag_Flag_Flag_MIN = UnitySystemFlag_Flag_IndugleOn;
const UnitySystemFlag_Flag UnitySystemFlag_Flag_Flag_MAX = UnitySystemFlag_Flag_IndugleOn;
const int UnitySystemFlag_Flag_Flag_ARRAYSIZE = UnitySystemFlag_Flag_Flag_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitySystemFlag_Flag_descriptor();
inline const ::std::string& UnitySystemFlag_Flag_Name(UnitySystemFlag_Flag value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitySystemFlag_Flag_descriptor(), value);
}
inline bool UnitySystemFlag_Flag_Parse(
    const ::std::string& name, UnitySystemFlag_Flag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitySystemFlag_Flag>(
    UnitySystemFlag_Flag_descriptor(), name, value);
}
// ===================================================================

class UnitySystemFlag : public ::google::protobuf::Message {
 public:
  UnitySystemFlag();
  virtual ~UnitySystemFlag();
  
  UnitySystemFlag(const UnitySystemFlag& from);
  
  inline UnitySystemFlag& operator=(const UnitySystemFlag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitySystemFlag& default_instance();
  
  void Swap(UnitySystemFlag* other);
  
  // implements Message ----------------------------------------------
  
  UnitySystemFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitySystemFlag& from);
  void MergeFrom(const UnitySystemFlag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnitySystemFlag_traits traits;
  static const traits value = UnitySystemFlag_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnitySystemFlag_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnitySystemFlag_traits_traits_MIN;
  static const traits traits_MAX =
    UnitySystemFlag_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnitySystemFlag_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnitySystemFlag_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnitySystemFlag_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnitySystemFlag_traits_Parse(name, value);
  }
  
  typedef UnitySystemFlag_Flag Flag;
  static const Flag IndugleOn = UnitySystemFlag_Flag_IndugleOn;
  static inline bool Flag_IsValid(int value) {
    return UnitySystemFlag_Flag_IsValid(value);
  }
  static const Flag Flag_MIN =
    UnitySystemFlag_Flag_Flag_MIN;
  static const Flag Flag_MAX =
    UnitySystemFlag_Flag_Flag_MAX;
  static const int Flag_ARRAYSIZE =
    UnitySystemFlag_Flag_Flag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flag_descriptor() {
    return UnitySystemFlag_Flag_descriptor();
  }
  static inline const ::std::string& Flag_Name(Flag value) {
    return UnitySystemFlag_Flag_Name(value);
  }
  static inline bool Flag_Parse(const ::std::string& name,
      Flag* value) {
    return UnitySystemFlag_Flag_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .game_connection.UnitySystemFlag.Flag flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::game_connection::UnitySystemFlag_Flag flag() const;
  inline void set_flag(::game_connection::UnitySystemFlag_Flag value);
  
  // required int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnitySystemFlag)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int flag_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnitySystemFlag_2eproto();
  friend void protobuf_AssignDesc_UnitySystemFlag_2eproto();
  friend void protobuf_ShutdownFile_UnitySystemFlag_2eproto();
  
  void InitAsDefaultInstance();
  static UnitySystemFlag* default_instance_;
};
// ===================================================================


// ===================================================================

// UnitySystemFlag

// required .game_connection.UnitySystemFlag.Flag flag = 1;
inline bool UnitySystemFlag::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitySystemFlag::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitySystemFlag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitySystemFlag::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::game_connection::UnitySystemFlag_Flag UnitySystemFlag::flag() const {
  return static_cast< ::game_connection::UnitySystemFlag_Flag >(flag_);
}
inline void UnitySystemFlag::set_flag(::game_connection::UnitySystemFlag_Flag value) {
  GOOGLE_DCHECK(::game_connection::UnitySystemFlag_Flag_IsValid(value));
  set_has_flag();
  flag_ = value;
}

// required int32 state = 2;
inline bool UnitySystemFlag::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitySystemFlag::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitySystemFlag::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitySystemFlag::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UnitySystemFlag::state() const {
  return state_;
}
inline void UnitySystemFlag::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnitySystemFlag_traits>() {
  return ::game_connection::UnitySystemFlag_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnitySystemFlag_Flag>() {
  return ::game_connection::UnitySystemFlag_Flag_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnitySystemFlag_2eproto__INCLUDED
