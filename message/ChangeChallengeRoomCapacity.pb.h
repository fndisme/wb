// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChangeChallengeRoomCapacity.proto

#ifndef PROTOBUF_ChangeChallengeRoomCapacity_2eproto__INCLUDED
#define PROTOBUF_ChangeChallengeRoomCapacity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChangeChallengeRoomCapacity_2eproto();
void protobuf_AssignDesc_ChangeChallengeRoomCapacity_2eproto();
void protobuf_ShutdownFile_ChangeChallengeRoomCapacity_2eproto();

class ChangeChallengeRoomCapacity;

enum ChangeChallengeRoomCapacity_traits {
  ChangeChallengeRoomCapacity_traits_value = 3041
};
bool ChangeChallengeRoomCapacity_traits_IsValid(int value);
const ChangeChallengeRoomCapacity_traits ChangeChallengeRoomCapacity_traits_traits_MIN = ChangeChallengeRoomCapacity_traits_value;
const ChangeChallengeRoomCapacity_traits ChangeChallengeRoomCapacity_traits_traits_MAX = ChangeChallengeRoomCapacity_traits_value;
const int ChangeChallengeRoomCapacity_traits_traits_ARRAYSIZE = ChangeChallengeRoomCapacity_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeChallengeRoomCapacity_traits_descriptor();
inline const ::std::string& ChangeChallengeRoomCapacity_traits_Name(ChangeChallengeRoomCapacity_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeChallengeRoomCapacity_traits_descriptor(), value);
}
inline bool ChangeChallengeRoomCapacity_traits_Parse(
    const ::std::string& name, ChangeChallengeRoomCapacity_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeChallengeRoomCapacity_traits>(
    ChangeChallengeRoomCapacity_traits_descriptor(), name, value);
}
// ===================================================================

class ChangeChallengeRoomCapacity : public ::google::protobuf::Message {
 public:
  ChangeChallengeRoomCapacity();
  virtual ~ChangeChallengeRoomCapacity();
  
  ChangeChallengeRoomCapacity(const ChangeChallengeRoomCapacity& from);
  
  inline ChangeChallengeRoomCapacity& operator=(const ChangeChallengeRoomCapacity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeChallengeRoomCapacity& default_instance();
  
  void Swap(ChangeChallengeRoomCapacity* other);
  
  // implements Message ----------------------------------------------
  
  ChangeChallengeRoomCapacity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeChallengeRoomCapacity& from);
  void MergeFrom(const ChangeChallengeRoomCapacity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChangeChallengeRoomCapacity_traits traits;
  static const traits value = ChangeChallengeRoomCapacity_traits_value;
  static inline bool traits_IsValid(int value) {
    return ChangeChallengeRoomCapacity_traits_IsValid(value);
  }
  static const traits traits_MIN =
    ChangeChallengeRoomCapacity_traits_traits_MIN;
  static const traits traits_MAX =
    ChangeChallengeRoomCapacity_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    ChangeChallengeRoomCapacity_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return ChangeChallengeRoomCapacity_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return ChangeChallengeRoomCapacity_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return ChangeChallengeRoomCapacity_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bool is_red_team = 1;
  inline bool has_is_red_team() const;
  inline void clear_is_red_team();
  static const int kIsRedTeamFieldNumber = 1;
  inline bool is_red_team() const;
  inline void set_is_red_team(bool value);
  
  // required uint32 new_size = 2;
  inline bool has_new_size() const;
  inline void clear_new_size();
  static const int kNewSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 new_size() const;
  inline void set_new_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ChangeChallengeRoomCapacity)
 private:
  inline void set_has_is_red_team();
  inline void clear_has_is_red_team();
  inline void set_has_new_size();
  inline void clear_has_new_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool is_red_team_;
  ::google::protobuf::uint32 new_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ChangeChallengeRoomCapacity_2eproto();
  friend void protobuf_AssignDesc_ChangeChallengeRoomCapacity_2eproto();
  friend void protobuf_ShutdownFile_ChangeChallengeRoomCapacity_2eproto();
  
  void InitAsDefaultInstance();
  static ChangeChallengeRoomCapacity* default_instance_;
};
// ===================================================================


// ===================================================================

// ChangeChallengeRoomCapacity

// required bool is_red_team = 1;
inline bool ChangeChallengeRoomCapacity::has_is_red_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeChallengeRoomCapacity::set_has_is_red_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeChallengeRoomCapacity::clear_has_is_red_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeChallengeRoomCapacity::clear_is_red_team() {
  is_red_team_ = false;
  clear_has_is_red_team();
}
inline bool ChangeChallengeRoomCapacity::is_red_team() const {
  return is_red_team_;
}
inline void ChangeChallengeRoomCapacity::set_is_red_team(bool value) {
  set_has_is_red_team();
  is_red_team_ = value;
}

// required uint32 new_size = 2;
inline bool ChangeChallengeRoomCapacity::has_new_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeChallengeRoomCapacity::set_has_new_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeChallengeRoomCapacity::clear_has_new_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeChallengeRoomCapacity::clear_new_size() {
  new_size_ = 0u;
  clear_has_new_size();
}
inline ::google::protobuf::uint32 ChangeChallengeRoomCapacity::new_size() const {
  return new_size_;
}
inline void ChangeChallengeRoomCapacity::set_new_size(::google::protobuf::uint32 value) {
  set_has_new_size();
  new_size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ChangeChallengeRoomCapacity_traits>() {
  return ::game_connection::ChangeChallengeRoomCapacity_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChangeChallengeRoomCapacity_2eproto__INCLUDED
