// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ValidServer.proto

#ifndef PROTOBUF_ValidServer_2eproto__INCLUDED
#define PROTOBUF_ValidServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ValidServer_2eproto();
void protobuf_AssignDesc_ValidServer_2eproto();
void protobuf_ShutdownFile_ValidServer_2eproto();

class ValidServer;
class ValidServer_ServerInfomation;

enum ValidServer_traits {
  ValidServer_traits_value = 3059
};
bool ValidServer_traits_IsValid(int value);
const ValidServer_traits ValidServer_traits_traits_MIN = ValidServer_traits_value;
const ValidServer_traits ValidServer_traits_traits_MAX = ValidServer_traits_value;
const int ValidServer_traits_traits_ARRAYSIZE = ValidServer_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValidServer_traits_descriptor();
inline const ::std::string& ValidServer_traits_Name(ValidServer_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValidServer_traits_descriptor(), value);
}
inline bool ValidServer_traits_Parse(
    const ::std::string& name, ValidServer_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValidServer_traits>(
    ValidServer_traits_descriptor(), name, value);
}
enum ValidServer_ServerType {
  ValidServer_ServerType_FLASH = 1,
  ValidServer_ServerType_UNITY = 2
};
bool ValidServer_ServerType_IsValid(int value);
const ValidServer_ServerType ValidServer_ServerType_ServerType_MIN = ValidServer_ServerType_FLASH;
const ValidServer_ServerType ValidServer_ServerType_ServerType_MAX = ValidServer_ServerType_UNITY;
const int ValidServer_ServerType_ServerType_ARRAYSIZE = ValidServer_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValidServer_ServerType_descriptor();
inline const ::std::string& ValidServer_ServerType_Name(ValidServer_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValidServer_ServerType_descriptor(), value);
}
inline bool ValidServer_ServerType_Parse(
    const ::std::string& name, ValidServer_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValidServer_ServerType>(
    ValidServer_ServerType_descriptor(), name, value);
}
enum ValidServer_ErrorReason {
  ValidServer_ErrorReason_TOO_MANY_PLAYER = 1,
  ValidServer_ErrorReason_NO_VALID_SERVER = 2
};
bool ValidServer_ErrorReason_IsValid(int value);
const ValidServer_ErrorReason ValidServer_ErrorReason_ErrorReason_MIN = ValidServer_ErrorReason_TOO_MANY_PLAYER;
const ValidServer_ErrorReason ValidServer_ErrorReason_ErrorReason_MAX = ValidServer_ErrorReason_NO_VALID_SERVER;
const int ValidServer_ErrorReason_ErrorReason_ARRAYSIZE = ValidServer_ErrorReason_ErrorReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValidServer_ErrorReason_descriptor();
inline const ::std::string& ValidServer_ErrorReason_Name(ValidServer_ErrorReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValidServer_ErrorReason_descriptor(), value);
}
inline bool ValidServer_ErrorReason_Parse(
    const ::std::string& name, ValidServer_ErrorReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValidServer_ErrorReason>(
    ValidServer_ErrorReason_descriptor(), name, value);
}
// ===================================================================

class ValidServer_ServerInfomation : public ::google::protobuf::Message {
 public:
  ValidServer_ServerInfomation();
  virtual ~ValidServer_ServerInfomation();
  
  ValidServer_ServerInfomation(const ValidServer_ServerInfomation& from);
  
  inline ValidServer_ServerInfomation& operator=(const ValidServer_ServerInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidServer_ServerInfomation& default_instance();
  
  void Swap(ValidServer_ServerInfomation* other);
  
  // implements Message ----------------------------------------------
  
  ValidServer_ServerInfomation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidServer_ServerInfomation& from);
  void MergeFrom(const ValidServer_ServerInfomation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ValidServer.ServerInfomation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* address_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ValidServer_2eproto();
  friend void protobuf_AssignDesc_ValidServer_2eproto();
  friend void protobuf_ShutdownFile_ValidServer_2eproto();
  
  void InitAsDefaultInstance();
  static ValidServer_ServerInfomation* default_instance_;
};
// -------------------------------------------------------------------

class ValidServer : public ::google::protobuf::Message {
 public:
  ValidServer();
  virtual ~ValidServer();
  
  ValidServer(const ValidServer& from);
  
  inline ValidServer& operator=(const ValidServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidServer& default_instance();
  
  void Swap(ValidServer* other);
  
  // implements Message ----------------------------------------------
  
  ValidServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidServer& from);
  void MergeFrom(const ValidServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ValidServer_ServerInfomation ServerInfomation;
  
  typedef ValidServer_traits traits;
  static const traits value = ValidServer_traits_value;
  static inline bool traits_IsValid(int value) {
    return ValidServer_traits_IsValid(value);
  }
  static const traits traits_MIN =
    ValidServer_traits_traits_MIN;
  static const traits traits_MAX =
    ValidServer_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    ValidServer_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return ValidServer_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return ValidServer_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return ValidServer_traits_Parse(name, value);
  }
  
  typedef ValidServer_ServerType ServerType;
  static const ServerType FLASH = ValidServer_ServerType_FLASH;
  static const ServerType UNITY = ValidServer_ServerType_UNITY;
  static inline bool ServerType_IsValid(int value) {
    return ValidServer_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    ValidServer_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    ValidServer_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    ValidServer_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return ValidServer_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return ValidServer_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return ValidServer_ServerType_Parse(name, value);
  }
  
  typedef ValidServer_ErrorReason ErrorReason;
  static const ErrorReason TOO_MANY_PLAYER = ValidServer_ErrorReason_TOO_MANY_PLAYER;
  static const ErrorReason NO_VALID_SERVER = ValidServer_ErrorReason_NO_VALID_SERVER;
  static inline bool ErrorReason_IsValid(int value) {
    return ValidServer_ErrorReason_IsValid(value);
  }
  static const ErrorReason ErrorReason_MIN =
    ValidServer_ErrorReason_ErrorReason_MIN;
  static const ErrorReason ErrorReason_MAX =
    ValidServer_ErrorReason_ErrorReason_MAX;
  static const int ErrorReason_ARRAYSIZE =
    ValidServer_ErrorReason_ErrorReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorReason_descriptor() {
    return ValidServer_ErrorReason_descriptor();
  }
  static inline const ::std::string& ErrorReason_Name(ErrorReason value) {
    return ValidServer_ErrorReason_Name(value);
  }
  static inline bool ErrorReason_Parse(const ::std::string& name,
      ErrorReason* value) {
    return ValidServer_ErrorReason_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.ValidServer.ServerInfomation server = 1;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::game_connection::ValidServer_ServerInfomation& server(int index) const;
  inline ::game_connection::ValidServer_ServerInfomation* mutable_server(int index);
  inline ::game_connection::ValidServer_ServerInfomation* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ValidServer_ServerInfomation >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::ValidServer_ServerInfomation >*
      mutable_server();
  
  // optional int32 failed_reason = 2;
  inline bool has_failed_reason() const;
  inline void clear_failed_reason();
  static const int kFailedReasonFieldNumber = 2;
  inline ::google::protobuf::int32 failed_reason() const;
  inline void set_failed_reason(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.ValidServer)
 private:
  inline void set_has_failed_reason();
  inline void clear_has_failed_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::ValidServer_ServerInfomation > server_;
  ::google::protobuf::int32 failed_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ValidServer_2eproto();
  friend void protobuf_AssignDesc_ValidServer_2eproto();
  friend void protobuf_ShutdownFile_ValidServer_2eproto();
  
  void InitAsDefaultInstance();
  static ValidServer* default_instance_;
};
// ===================================================================


// ===================================================================

// ValidServer_ServerInfomation

// required int32 type = 1;
inline bool ValidServer_ServerInfomation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidServer_ServerInfomation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidServer_ServerInfomation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidServer_ServerInfomation::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ValidServer_ServerInfomation::type() const {
  return type_;
}
inline void ValidServer_ServerInfomation::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string address = 2;
inline bool ValidServer_ServerInfomation::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidServer_ServerInfomation::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidServer_ServerInfomation::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidServer_ServerInfomation::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ValidServer_ServerInfomation::address() const {
  return *address_;
}
inline void ValidServer_ServerInfomation::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ValidServer_ServerInfomation::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ValidServer_ServerInfomation::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValidServer_ServerInfomation::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* ValidServer_ServerInfomation::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 3;
inline bool ValidServer_ServerInfomation::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValidServer_ServerInfomation::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValidServer_ServerInfomation::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValidServer_ServerInfomation::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ValidServer_ServerInfomation::port() const {
  return port_;
}
inline void ValidServer_ServerInfomation::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// ValidServer

// repeated .game_connection.ValidServer.ServerInfomation server = 1;
inline int ValidServer::server_size() const {
  return server_.size();
}
inline void ValidServer::clear_server() {
  server_.Clear();
}
inline const ::game_connection::ValidServer_ServerInfomation& ValidServer::server(int index) const {
  return server_.Get(index);
}
inline ::game_connection::ValidServer_ServerInfomation* ValidServer::mutable_server(int index) {
  return server_.Mutable(index);
}
inline ::game_connection::ValidServer_ServerInfomation* ValidServer::add_server() {
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::ValidServer_ServerInfomation >&
ValidServer::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::ValidServer_ServerInfomation >*
ValidServer::mutable_server() {
  return &server_;
}

// optional int32 failed_reason = 2;
inline bool ValidServer::has_failed_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidServer::set_has_failed_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidServer::clear_has_failed_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidServer::clear_failed_reason() {
  failed_reason_ = 0;
  clear_has_failed_reason();
}
inline ::google::protobuf::int32 ValidServer::failed_reason() const {
  return failed_reason_;
}
inline void ValidServer::set_failed_reason(::google::protobuf::int32 value) {
  set_has_failed_reason();
  failed_reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ValidServer_traits>() {
  return ::game_connection::ValidServer_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ValidServer_ServerType>() {
  return ::game_connection::ValidServer_ServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::ValidServer_ErrorReason>() {
  return ::game_connection::ValidServer_ErrorReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ValidServer_2eproto__INCLUDED
