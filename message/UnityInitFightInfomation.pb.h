// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityInitFightInfomation.proto

#ifndef PROTOBUF_UnityInitFightInfomation_2eproto__INCLUDED
#define PROTOBUF_UnityInitFightInfomation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();

class UnityInitFightInfomation;
class UnityInitFightInfomation_PlayerInfo;
class UnityInitFightInfomation_PlayerInfo_FleetProperty;
class UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill;
class UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent;
class UnityInitFightInfomation_PlayerInfo_Event;
class UnityInitFightInfomation_Award;

enum UnityInitFightInfomation_PlayerInfo_IndulgeLevel {
  UnityInitFightInfomation_PlayerInfo_IndulgeLevel_NORMAL = 0,
  UnityInitFightInfomation_PlayerInfo_IndulgeLevel_FIRST = 1,
  UnityInitFightInfomation_PlayerInfo_IndulgeLevel_SECOND = 2
};
bool UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IsValid(int value);
const UnityInitFightInfomation_PlayerInfo_IndulgeLevel UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_MIN = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_NORMAL;
const UnityInitFightInfomation_PlayerInfo_IndulgeLevel UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_MAX = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_SECOND;
const int UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_ARRAYSIZE = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityInitFightInfomation_PlayerInfo_IndulgeLevel_descriptor();
inline const ::std::string& UnityInitFightInfomation_PlayerInfo_IndulgeLevel_Name(UnityInitFightInfomation_PlayerInfo_IndulgeLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityInitFightInfomation_PlayerInfo_IndulgeLevel_descriptor(), value);
}
inline bool UnityInitFightInfomation_PlayerInfo_IndulgeLevel_Parse(
    const ::std::string& name, UnityInitFightInfomation_PlayerInfo_IndulgeLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityInitFightInfomation_PlayerInfo_IndulgeLevel>(
    UnityInitFightInfomation_PlayerInfo_IndulgeLevel_descriptor(), name, value);
}
enum UnityInitFightInfomation_traits {
  UnityInitFightInfomation_traits_value = 3507
};
bool UnityInitFightInfomation_traits_IsValid(int value);
const UnityInitFightInfomation_traits UnityInitFightInfomation_traits_traits_MIN = UnityInitFightInfomation_traits_value;
const UnityInitFightInfomation_traits UnityInitFightInfomation_traits_traits_MAX = UnityInitFightInfomation_traits_value;
const int UnityInitFightInfomation_traits_traits_ARRAYSIZE = UnityInitFightInfomation_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityInitFightInfomation_traits_descriptor();
inline const ::std::string& UnityInitFightInfomation_traits_Name(UnityInitFightInfomation_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityInitFightInfomation_traits_descriptor(), value);
}
inline bool UnityInitFightInfomation_traits_Parse(
    const ::std::string& name, UnityInitFightInfomation_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityInitFightInfomation_traits>(
    UnityInitFightInfomation_traits_descriptor(), name, value);
}
enum UnityInitFightInfomation_award_type {
  UnityInitFightInfomation_award_type_MONEY = 0,
  UnityInitFightInfomation_award_type_MATERIAL = 1,
  UnityInitFightInfomation_award_type_PROP = 2
};
bool UnityInitFightInfomation_award_type_IsValid(int value);
const UnityInitFightInfomation_award_type UnityInitFightInfomation_award_type_award_type_MIN = UnityInitFightInfomation_award_type_MONEY;
const UnityInitFightInfomation_award_type UnityInitFightInfomation_award_type_award_type_MAX = UnityInitFightInfomation_award_type_PROP;
const int UnityInitFightInfomation_award_type_award_type_ARRAYSIZE = UnityInitFightInfomation_award_type_award_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityInitFightInfomation_award_type_descriptor();
inline const ::std::string& UnityInitFightInfomation_award_type_Name(UnityInitFightInfomation_award_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityInitFightInfomation_award_type_descriptor(), value);
}
inline bool UnityInitFightInfomation_award_type_Parse(
    const ::std::string& name, UnityInitFightInfomation_award_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityInitFightInfomation_award_type>(
    UnityInitFightInfomation_award_type_descriptor(), name, value);
}
enum UnityInitFightInfomation_EventType {
  UnityInitFightInfomation_EventType_ADD_COINS = 9,
  UnityInitFightInfomation_EventType_ADD_SCORE = 10,
  UnityInitFightInfomation_EventType_ADD_LIFE = 12
};
bool UnityInitFightInfomation_EventType_IsValid(int value);
const UnityInitFightInfomation_EventType UnityInitFightInfomation_EventType_EventType_MIN = UnityInitFightInfomation_EventType_ADD_COINS;
const UnityInitFightInfomation_EventType UnityInitFightInfomation_EventType_EventType_MAX = UnityInitFightInfomation_EventType_ADD_LIFE;
const int UnityInitFightInfomation_EventType_EventType_ARRAYSIZE = UnityInitFightInfomation_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnityInitFightInfomation_EventType_descriptor();
inline const ::std::string& UnityInitFightInfomation_EventType_Name(UnityInitFightInfomation_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnityInitFightInfomation_EventType_descriptor(), value);
}
inline bool UnityInitFightInfomation_EventType_Parse(
    const ::std::string& name, UnityInitFightInfomation_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnityInitFightInfomation_EventType>(
    UnityInitFightInfomation_EventType_descriptor(), name, value);
}
// ===================================================================

class UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill();
  virtual ~UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill();
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& from);
  
  inline UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& operator=(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& default_instance();
  
  void Swap(UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& from);
  void MergeFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Skill)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent();
  virtual ~UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent();
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& from);
  
  inline UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& operator=(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& default_instance();
  
  void Swap(UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& from);
  void MergeFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Talent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation_PlayerInfo_FleetProperty : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_PlayerInfo_FleetProperty();
  virtual ~UnityInitFightInfomation_PlayerInfo_FleetProperty();
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty(const UnityInitFightInfomation_PlayerInfo_FleetProperty& from);
  
  inline UnityInitFightInfomation_PlayerInfo_FleetProperty& operator=(const UnityInitFightInfomation_PlayerInfo_FleetProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_PlayerInfo_FleetProperty& default_instance();
  
  void Swap(UnityInitFightInfomation_PlayerInfo_FleetProperty* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_PlayerInfo_FleetProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty& from);
  void MergeFrom(const UnityInitFightInfomation_PlayerInfo_FleetProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill Skill;
  typedef UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent Talent;
  
  // accessors -------------------------------------------------------
  
  // required int32 life = 1;
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 1;
  inline ::google::protobuf::int32 life() const;
  inline void set_life(::google::protobuf::int32 value);
  
  // required int32 energy = 2;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 2;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // required int32 storm_rate = 3;
  inline bool has_storm_rate() const;
  inline void clear_storm_rate();
  static const int kStormRateFieldNumber = 3;
  inline ::google::protobuf::int32 storm_rate() const;
  inline void set_storm_rate(::google::protobuf::int32 value);
  
  // required int32 attack = 4;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 4;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);
  
  // required int32 defence = 5;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 5;
  inline ::google::protobuf::int32 defence() const;
  inline void set_defence(::google::protobuf::int32 value);
  
  // repeated .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Skill skill = 6;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 6;
  inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& skill(int index) const;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* mutable_skill(int index);
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill >*
      mutable_skill();
  
  // repeated .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Talent talent = 7;
  inline int talent_size() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 7;
  inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& talent(int index) const;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* mutable_talent(int index);
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* add_talent();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent >&
      talent() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent >*
      mutable_talent();
  
  // required int32 hurt_area = 8;
  inline bool has_hurt_area() const;
  inline void clear_hurt_area();
  static const int kHurtAreaFieldNumber = 8;
  inline ::google::protobuf::int32 hurt_area() const;
  inline void set_hurt_area(::google::protobuf::int32 value);
  
  // required int32 added_move_power = 9;
  inline bool has_added_move_power() const;
  inline void clear_added_move_power();
  static const int kAddedMovePowerFieldNumber = 9;
  inline ::google::protobuf::int32 added_move_power() const;
  inline void set_added_move_power(::google::protobuf::int32 value);
  
  // required int32 skin_color = 10;
  inline bool has_skin_color() const;
  inline void clear_skin_color();
  static const int kSkinColorFieldNumber = 10;
  inline ::google::protobuf::int32 skin_color() const;
  inline void set_skin_color(::google::protobuf::int32 value);
  
  // required int32 science_power = 11;
  inline bool has_science_power() const;
  inline void clear_science_power();
  static const int kSciencePowerFieldNumber = 11;
  inline ::google::protobuf::int32 science_power() const;
  inline void set_science_power(::google::protobuf::int32 value);
  
  // required int32 weapon_id = 12;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 12;
  inline ::google::protobuf::int32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty)
 private:
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_storm_rate();
  inline void clear_has_storm_rate();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_hurt_area();
  inline void clear_has_hurt_area();
  inline void set_has_added_move_power();
  inline void clear_has_added_move_power();
  inline void set_has_skin_color();
  inline void clear_has_skin_color();
  inline void set_has_science_power();
  inline void clear_has_science_power();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 life_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 storm_rate_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill > skill_;
  ::google::protobuf::int32 defence_;
  ::google::protobuf::int32 hurt_area_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent > talent_;
  ::google::protobuf::int32 added_move_power_;
  ::google::protobuf::int32 skin_color_;
  ::google::protobuf::int32 science_power_;
  ::google::protobuf::int32 weapon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_PlayerInfo_FleetProperty* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation_PlayerInfo_Event : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_PlayerInfo_Event();
  virtual ~UnityInitFightInfomation_PlayerInfo_Event();
  
  UnityInitFightInfomation_PlayerInfo_Event(const UnityInitFightInfomation_PlayerInfo_Event& from);
  
  inline UnityInitFightInfomation_PlayerInfo_Event& operator=(const UnityInitFightInfomation_PlayerInfo_Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_PlayerInfo_Event& default_instance();
  
  void Swap(UnityInitFightInfomation_PlayerInfo_Event* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_PlayerInfo_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_PlayerInfo_Event& from);
  void MergeFrom(const UnityInitFightInfomation_PlayerInfo_Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .game_connection.UnityInitFightInfomation.EventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::game_connection::UnityInitFightInfomation_EventType type() const;
  inline void set_type(::game_connection::UnityInitFightInfomation_EventType value);
  
  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.PlayerInfo.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_PlayerInfo_Event* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation_PlayerInfo : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_PlayerInfo();
  virtual ~UnityInitFightInfomation_PlayerInfo();
  
  UnityInitFightInfomation_PlayerInfo(const UnityInitFightInfomation_PlayerInfo& from);
  
  inline UnityInitFightInfomation_PlayerInfo& operator=(const UnityInitFightInfomation_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_PlayerInfo& default_instance();
  
  void Swap(UnityInitFightInfomation_PlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_PlayerInfo& from);
  void MergeFrom(const UnityInitFightInfomation_PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityInitFightInfomation_PlayerInfo_FleetProperty FleetProperty;
  typedef UnityInitFightInfomation_PlayerInfo_Event Event;
  
  typedef UnityInitFightInfomation_PlayerInfo_IndulgeLevel IndulgeLevel;
  static const IndulgeLevel NORMAL = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_NORMAL;
  static const IndulgeLevel FIRST = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_FIRST;
  static const IndulgeLevel SECOND = UnityInitFightInfomation_PlayerInfo_IndulgeLevel_SECOND;
  static inline bool IndulgeLevel_IsValid(int value) {
    return UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IsValid(value);
  }
  static const IndulgeLevel IndulgeLevel_MIN =
    UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_MIN;
  static const IndulgeLevel IndulgeLevel_MAX =
    UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_MAX;
  static const int IndulgeLevel_ARRAYSIZE =
    UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IndulgeLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IndulgeLevel_descriptor() {
    return UnityInitFightInfomation_PlayerInfo_IndulgeLevel_descriptor();
  }
  static inline const ::std::string& IndulgeLevel_Name(IndulgeLevel value) {
    return UnityInitFightInfomation_PlayerInfo_IndulgeLevel_Name(value);
  }
  static inline bool IndulgeLevel_Parse(const ::std::string& name,
      IndulgeLevel* value) {
    return UnityInitFightInfomation_PlayerInfo_IndulgeLevel_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 fleet = 2;
  inline bool has_fleet() const;
  inline void clear_fleet();
  static const int kFleetFieldNumber = 2;
  inline ::google::protobuf::int32 fleet() const;
  inline void set_fleet(::google::protobuf::int32 value);
  
  // required bool is_red_team = 3;
  inline bool has_is_red_team() const;
  inline void clear_is_red_team();
  static const int kIsRedTeamFieldNumber = 3;
  inline bool is_red_team() const;
  inline void set_is_red_team(bool value);
  
  // required int32 photo = 4;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 4;
  inline ::google::protobuf::int32 photo() const;
  inline void set_photo(::google::protobuf::int32 value);
  
  // required bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // repeated int32 fight_props = 6;
  inline int fight_props_size() const;
  inline void clear_fight_props();
  static const int kFightPropsFieldNumber = 6;
  inline ::google::protobuf::int32 fight_props(int index) const;
  inline void set_fight_props(int index, ::google::protobuf::int32 value);
  inline void add_fight_props(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fight_props() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fight_props();
  
  // required .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty property = 8;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 8;
  inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty& property() const;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* mutable_property();
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* release_property();
  
  // required int32 vip_level = 9;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 9;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // required int32 total_fight_times = 10;
  inline bool has_total_fight_times() const;
  inline void clear_total_fight_times();
  static const int kTotalFightTimesFieldNumber = 10;
  inline ::google::protobuf::int32 total_fight_times() const;
  inline void set_total_fight_times(::google::protobuf::int32 value);
  
  // required int32 server_id = 11;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 11;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // repeated .game_connection.UnityInitFightInfomation.PlayerInfo.Event incident = 12;
  inline int incident_size() const;
  inline void clear_incident();
  static const int kIncidentFieldNumber = 12;
  inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_Event& incident(int index) const;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_Event* mutable_incident(int index);
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_Event* add_incident();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_Event >&
      incident() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_Event >*
      mutable_incident();
  
  // required .game_connection.UnityInitFightInfomation.PlayerInfo.IndulgeLevel indulge_level = 13;
  inline bool has_indulge_level() const;
  inline void clear_indulge_level();
  static const int kIndulgeLevelFieldNumber = 13;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel indulge_level() const;
  inline void set_indulge_level(::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.PlayerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fleet();
  inline void clear_has_fleet();
  inline void set_has_is_red_team();
  inline void clear_has_is_red_team();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_total_fight_times();
  inline void clear_has_total_fight_times();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_indulge_level();
  inline void clear_has_indulge_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fleet_;
  bool is_red_team_;
  ::google::protobuf::int32 photo_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fight_props_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 vip_level_;
  ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* property_;
  ::google::protobuf::int32 total_fight_times_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_Event > incident_;
  int indulge_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation_Award : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation_Award();
  virtual ~UnityInitFightInfomation_Award();
  
  UnityInitFightInfomation_Award(const UnityInitFightInfomation_Award& from);
  
  inline UnityInitFightInfomation_Award& operator=(const UnityInitFightInfomation_Award& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation_Award& default_instance();
  
  void Swap(UnityInitFightInfomation_Award* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation_Award& from);
  void MergeFrom(const UnityInitFightInfomation_Award& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .game_connection.UnityInitFightInfomation.award_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::game_connection::UnityInitFightInfomation_award_type type() const;
  inline void set_type(::game_connection::UnityInitFightInfomation_award_type value);
  
  // required int32 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 object_id() const;
  inline void set_object_id(::google::protobuf::int32 value);
  
  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation.Award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation_Award* default_instance_;
};
// -------------------------------------------------------------------

class UnityInitFightInfomation : public ::google::protobuf::Message {
 public:
  UnityInitFightInfomation();
  virtual ~UnityInitFightInfomation();
  
  UnityInitFightInfomation(const UnityInitFightInfomation& from);
  
  inline UnityInitFightInfomation& operator=(const UnityInitFightInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnityInitFightInfomation& default_instance();
  
  void Swap(UnityInitFightInfomation* other);
  
  // implements Message ----------------------------------------------
  
  UnityInitFightInfomation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnityInitFightInfomation& from);
  void MergeFrom(const UnityInitFightInfomation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnityInitFightInfomation_PlayerInfo PlayerInfo;
  typedef UnityInitFightInfomation_Award Award;
  
  typedef UnityInitFightInfomation_traits traits;
  static const traits value = UnityInitFightInfomation_traits_value;
  static inline bool traits_IsValid(int value) {
    return UnityInitFightInfomation_traits_IsValid(value);
  }
  static const traits traits_MIN =
    UnityInitFightInfomation_traits_traits_MIN;
  static const traits traits_MAX =
    UnityInitFightInfomation_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    UnityInitFightInfomation_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return UnityInitFightInfomation_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return UnityInitFightInfomation_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return UnityInitFightInfomation_traits_Parse(name, value);
  }
  
  typedef UnityInitFightInfomation_award_type award_type;
  static const award_type MONEY = UnityInitFightInfomation_award_type_MONEY;
  static const award_type MATERIAL = UnityInitFightInfomation_award_type_MATERIAL;
  static const award_type PROP = UnityInitFightInfomation_award_type_PROP;
  static inline bool award_type_IsValid(int value) {
    return UnityInitFightInfomation_award_type_IsValid(value);
  }
  static const award_type award_type_MIN =
    UnityInitFightInfomation_award_type_award_type_MIN;
  static const award_type award_type_MAX =
    UnityInitFightInfomation_award_type_award_type_MAX;
  static const int award_type_ARRAYSIZE =
    UnityInitFightInfomation_award_type_award_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  award_type_descriptor() {
    return UnityInitFightInfomation_award_type_descriptor();
  }
  static inline const ::std::string& award_type_Name(award_type value) {
    return UnityInitFightInfomation_award_type_Name(value);
  }
  static inline bool award_type_Parse(const ::std::string& name,
      award_type* value) {
    return UnityInitFightInfomation_award_type_Parse(name, value);
  }
  
  typedef UnityInitFightInfomation_EventType EventType;
  static const EventType ADD_COINS = UnityInitFightInfomation_EventType_ADD_COINS;
  static const EventType ADD_SCORE = UnityInitFightInfomation_EventType_ADD_SCORE;
  static const EventType ADD_LIFE = UnityInitFightInfomation_EventType_ADD_LIFE;
  static inline bool EventType_IsValid(int value) {
    return UnityInitFightInfomation_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    UnityInitFightInfomation_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    UnityInitFightInfomation_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    UnityInitFightInfomation_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return UnityInitFightInfomation_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return UnityInitFightInfomation_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return UnityInitFightInfomation_EventType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .game_connection.UnityInitFightInfomation.PlayerInfo player = 1;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::game_connection::UnityInitFightInfomation_PlayerInfo& player(int index) const;
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo* mutable_player(int index);
  inline ::game_connection::UnityInitFightInfomation_PlayerInfo* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo >*
      mutable_player();
  
  // required int32 random_seed = 2;
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 2;
  inline ::google::protobuf::int32 random_seed() const;
  inline void set_random_seed(::google::protobuf::int32 value);
  
  // required int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // required int32 roundtime = 4;
  inline bool has_roundtime() const;
  inline void clear_roundtime();
  static const int kRoundtimeFieldNumber = 4;
  inline ::google::protobuf::int32 roundtime() const;
  inline void set_roundtime(::google::protobuf::int32 value);
  
  // required int32 flip_board_time = 5;
  inline bool has_flip_board_time() const;
  inline void clear_flip_board_time();
  static const int kFlipBoardTimeFieldNumber = 5;
  inline ::google::protobuf::int32 flip_board_time() const;
  inline void set_flip_board_time(::google::protobuf::int32 value);
  
  // required int32 after_flip_board_time = 6;
  inline bool has_after_flip_board_time() const;
  inline void clear_after_flip_board_time();
  static const int kAfterFlipBoardTimeFieldNumber = 6;
  inline ::google::protobuf::int32 after_flip_board_time() const;
  inline void set_after_flip_board_time(::google::protobuf::int32 value);
  
  // required int32 scan_map_time = 7;
  inline bool has_scan_map_time() const;
  inline void clear_scan_map_time();
  static const int kScanMapTimeFieldNumber = 7;
  inline ::google::protobuf::int32 scan_map_time() const;
  inline void set_scan_map_time(::google::protobuf::int32 value);
  
  // repeated .game_connection.UnityInitFightInfomation.Award award = 8;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 8;
  inline const ::game_connection::UnityInitFightInfomation_Award& award(int index) const;
  inline ::game_connection::UnityInitFightInfomation_Award* mutable_award(int index);
  inline ::game_connection::UnityInitFightInfomation_Award* add_award();
  inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_Award >&
      award() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_Award >*
      mutable_award();
  
  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.UnityInitFightInfomation)
 private:
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_roundtime();
  inline void clear_has_roundtime();
  inline void set_has_flip_board_time();
  inline void clear_has_flip_board_time();
  inline void set_has_after_flip_board_time();
  inline void clear_has_after_flip_board_time();
  inline void set_has_scan_map_time();
  inline void clear_has_scan_map_time();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo > player_;
  ::google::protobuf::int32 random_seed_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 roundtime_;
  ::google::protobuf::int32 flip_board_time_;
  ::google::protobuf::int32 after_flip_board_time_;
  ::google::protobuf::int32 scan_map_time_;
  ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_Award > award_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_AssignDesc_UnityInitFightInfomation_2eproto();
  friend void protobuf_ShutdownFile_UnityInitFightInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static UnityInitFightInfomation* default_instance_;
};
// ===================================================================


// ===================================================================

// UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill

// required int32 type = 1;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::type() const {
  return type_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level = 2;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::level() const {
  return level_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent

// required int32 type = 1;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::type() const {
  return type_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level = 2;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::level() const {
  return level_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation_PlayerInfo_FleetProperty

// required int32 life = 1;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_life() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_life() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::life() const {
  return life_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_life(::google::protobuf::int32 value) {
  set_has_life();
  life_ = value;
}

// required int32 energy = 2;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::energy() const {
  return energy_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// required int32 storm_rate = 3;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_storm_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_storm_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_storm_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_storm_rate() {
  storm_rate_ = 0;
  clear_has_storm_rate();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::storm_rate() const {
  return storm_rate_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_storm_rate(::google::protobuf::int32 value) {
  set_has_storm_rate();
  storm_rate_ = value;
}

// required int32 attack = 4;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_attack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_attack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_attack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::attack() const {
  return attack_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// required int32 defence = 5;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_defence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_defence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_defence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_defence() {
  defence_ = 0;
  clear_has_defence();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::defence() const {
  return defence_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_defence(::google::protobuf::int32 value) {
  set_has_defence();
  defence_ = value;
}

// repeated .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Skill skill = 6;
inline int UnityInitFightInfomation_PlayerInfo_FleetProperty::skill_size() const {
  return skill_.size();
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_skill() {
  skill_.Clear();
}
inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill& UnityInitFightInfomation_PlayerInfo_FleetProperty::skill(int index) const {
  return skill_.Get(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* UnityInitFightInfomation_PlayerInfo_FleetProperty::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill* UnityInitFightInfomation_PlayerInfo_FleetProperty::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill >&
UnityInitFightInfomation_PlayerInfo_FleetProperty::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Skill >*
UnityInitFightInfomation_PlayerInfo_FleetProperty::mutable_skill() {
  return &skill_;
}

// repeated .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty.Talent talent = 7;
inline int UnityInitFightInfomation_PlayerInfo_FleetProperty::talent_size() const {
  return talent_.size();
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_talent() {
  talent_.Clear();
}
inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent& UnityInitFightInfomation_PlayerInfo_FleetProperty::talent(int index) const {
  return talent_.Get(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* UnityInitFightInfomation_PlayerInfo_FleetProperty::mutable_talent(int index) {
  return talent_.Mutable(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent* UnityInitFightInfomation_PlayerInfo_FleetProperty::add_talent() {
  return talent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent >&
UnityInitFightInfomation_PlayerInfo_FleetProperty::talent() const {
  return talent_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty_Talent >*
UnityInitFightInfomation_PlayerInfo_FleetProperty::mutable_talent() {
  return &talent_;
}

// required int32 hurt_area = 8;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_hurt_area() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_hurt_area() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_hurt_area() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_hurt_area() {
  hurt_area_ = 0;
  clear_has_hurt_area();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::hurt_area() const {
  return hurt_area_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_hurt_area(::google::protobuf::int32 value) {
  set_has_hurt_area();
  hurt_area_ = value;
}

// required int32 added_move_power = 9;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_added_move_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_added_move_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_added_move_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_added_move_power() {
  added_move_power_ = 0;
  clear_has_added_move_power();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::added_move_power() const {
  return added_move_power_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_added_move_power(::google::protobuf::int32 value) {
  set_has_added_move_power();
  added_move_power_ = value;
}

// required int32 skin_color = 10;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_skin_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_skin_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_skin_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_skin_color() {
  skin_color_ = 0;
  clear_has_skin_color();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::skin_color() const {
  return skin_color_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_skin_color(::google::protobuf::int32 value) {
  set_has_skin_color();
  skin_color_ = value;
}

// required int32 science_power = 11;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_science_power() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_science_power() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_science_power() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_science_power() {
  science_power_ = 0;
  clear_has_science_power();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::science_power() const {
  return science_power_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_science_power(::google::protobuf::int32 value) {
  set_has_science_power();
  science_power_ = value;
}

// required int32 weapon_id = 12;
inline bool UnityInitFightInfomation_PlayerInfo_FleetProperty::has_weapon_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_has_weapon_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::clear_weapon_id() {
  weapon_id_ = 0;
  clear_has_weapon_id();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_FleetProperty::weapon_id() const {
  return weapon_id_;
}
inline void UnityInitFightInfomation_PlayerInfo_FleetProperty::set_weapon_id(::google::protobuf::int32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation_PlayerInfo_Event

// required .game_connection.UnityInitFightInfomation.EventType type = 1;
inline bool UnityInitFightInfomation_PlayerInfo_Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::clear_type() {
  type_ = 9;
  clear_has_type();
}
inline ::game_connection::UnityInitFightInfomation_EventType UnityInitFightInfomation_PlayerInfo_Event::type() const {
  return static_cast< ::game_connection::UnityInitFightInfomation_EventType >(type_);
}
inline void UnityInitFightInfomation_PlayerInfo_Event::set_type(::game_connection::UnityInitFightInfomation_EventType value) {
  GOOGLE_DCHECK(::game_connection::UnityInitFightInfomation_EventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 value = 2;
inline bool UnityInitFightInfomation_PlayerInfo_Event::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo_Event::value() const {
  return value_;
}
inline void UnityInitFightInfomation_PlayerInfo_Event::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation_PlayerInfo

// required int32 id = 1;
inline bool UnityInitFightInfomation_PlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::id() const {
  return id_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 fleet = 2;
inline bool UnityInitFightInfomation_PlayerInfo::has_fleet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_fleet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_fleet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_fleet() {
  fleet_ = 0;
  clear_has_fleet();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::fleet() const {
  return fleet_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_fleet(::google::protobuf::int32 value) {
  set_has_fleet();
  fleet_ = value;
}

// required bool is_red_team = 3;
inline bool UnityInitFightInfomation_PlayerInfo::has_is_red_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_is_red_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_is_red_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_is_red_team() {
  is_red_team_ = false;
  clear_has_is_red_team();
}
inline bool UnityInitFightInfomation_PlayerInfo::is_red_team() const {
  return is_red_team_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_is_red_team(bool value) {
  set_has_is_red_team();
  is_red_team_ = value;
}

// required int32 photo = 4;
inline bool UnityInitFightInfomation_PlayerInfo::has_photo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_photo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_photo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_photo() {
  photo_ = 0;
  clear_has_photo();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::photo() const {
  return photo_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_photo(::google::protobuf::int32 value) {
  set_has_photo();
  photo_ = value;
}

// required bytes name = 5;
inline bool UnityInitFightInfomation_PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnityInitFightInfomation_PlayerInfo::name() const {
  return *name_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnityInitFightInfomation_PlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnityInitFightInfomation_PlayerInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnityInitFightInfomation_PlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UnityInitFightInfomation_PlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 level = 7;
inline bool UnityInitFightInfomation_PlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::level() const {
  return level_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 fight_props = 6;
inline int UnityInitFightInfomation_PlayerInfo::fight_props_size() const {
  return fight_props_.size();
}
inline void UnityInitFightInfomation_PlayerInfo::clear_fight_props() {
  fight_props_.Clear();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::fight_props(int index) const {
  return fight_props_.Get(index);
}
inline void UnityInitFightInfomation_PlayerInfo::set_fight_props(int index, ::google::protobuf::int32 value) {
  fight_props_.Set(index, value);
}
inline void UnityInitFightInfomation_PlayerInfo::add_fight_props(::google::protobuf::int32 value) {
  fight_props_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnityInitFightInfomation_PlayerInfo::fight_props() const {
  return fight_props_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnityInitFightInfomation_PlayerInfo::mutable_fight_props() {
  return &fight_props_;
}

// required .game_connection.UnityInitFightInfomation.PlayerInfo.FleetProperty property = 8;
inline bool UnityInitFightInfomation_PlayerInfo::has_property() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_property() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_property() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_property() {
  if (property_ != NULL) property_->::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty::Clear();
  clear_has_property();
}
inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty& UnityInitFightInfomation_PlayerInfo::property() const {
  return property_ != NULL ? *property_ : *default_instance_->property_;
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* UnityInitFightInfomation_PlayerInfo::mutable_property() {
  set_has_property();
  if (property_ == NULL) property_ = new ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty;
  return property_;
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* UnityInitFightInfomation_PlayerInfo::release_property() {
  clear_has_property();
  ::game_connection::UnityInitFightInfomation_PlayerInfo_FleetProperty* temp = property_;
  property_ = NULL;
  return temp;
}

// required int32 vip_level = 9;
inline bool UnityInitFightInfomation_PlayerInfo::has_vip_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_vip_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::vip_level() const {
  return vip_level_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// required int32 total_fight_times = 10;
inline bool UnityInitFightInfomation_PlayerInfo::has_total_fight_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_total_fight_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_total_fight_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_total_fight_times() {
  total_fight_times_ = 0;
  clear_has_total_fight_times();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::total_fight_times() const {
  return total_fight_times_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_total_fight_times(::google::protobuf::int32 value) {
  set_has_total_fight_times();
  total_fight_times_ = value;
}

// required int32 server_id = 11;
inline bool UnityInitFightInfomation_PlayerInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_PlayerInfo::server_id() const {
  return server_id_;
}
inline void UnityInitFightInfomation_PlayerInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated .game_connection.UnityInitFightInfomation.PlayerInfo.Event incident = 12;
inline int UnityInitFightInfomation_PlayerInfo::incident_size() const {
  return incident_.size();
}
inline void UnityInitFightInfomation_PlayerInfo::clear_incident() {
  incident_.Clear();
}
inline const ::game_connection::UnityInitFightInfomation_PlayerInfo_Event& UnityInitFightInfomation_PlayerInfo::incident(int index) const {
  return incident_.Get(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_Event* UnityInitFightInfomation_PlayerInfo::mutable_incident(int index) {
  return incident_.Mutable(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_Event* UnityInitFightInfomation_PlayerInfo::add_incident() {
  return incident_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_Event >&
UnityInitFightInfomation_PlayerInfo::incident() const {
  return incident_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo_Event >*
UnityInitFightInfomation_PlayerInfo::mutable_incident() {
  return &incident_;
}

// required .game_connection.UnityInitFightInfomation.PlayerInfo.IndulgeLevel indulge_level = 13;
inline bool UnityInitFightInfomation_PlayerInfo::has_indulge_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnityInitFightInfomation_PlayerInfo::set_has_indulge_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_has_indulge_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnityInitFightInfomation_PlayerInfo::clear_indulge_level() {
  indulge_level_ = 0;
  clear_has_indulge_level();
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel UnityInitFightInfomation_PlayerInfo::indulge_level() const {
  return static_cast< ::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel >(indulge_level_);
}
inline void UnityInitFightInfomation_PlayerInfo::set_indulge_level(::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel value) {
  GOOGLE_DCHECK(::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel_IsValid(value));
  set_has_indulge_level();
  indulge_level_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation_Award

// required .game_connection.UnityInitFightInfomation.award_type type = 1;
inline bool UnityInitFightInfomation_Award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnityInitFightInfomation_Award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnityInitFightInfomation_Award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnityInitFightInfomation_Award::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::game_connection::UnityInitFightInfomation_award_type UnityInitFightInfomation_Award::type() const {
  return static_cast< ::game_connection::UnityInitFightInfomation_award_type >(type_);
}
inline void UnityInitFightInfomation_Award::set_type(::game_connection::UnityInitFightInfomation_award_type value) {
  GOOGLE_DCHECK(::game_connection::UnityInitFightInfomation_award_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 object_id = 2;
inline bool UnityInitFightInfomation_Award::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation_Award::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation_Award::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation_Award::clear_object_id() {
  object_id_ = 0;
  clear_has_object_id();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_Award::object_id() const {
  return object_id_;
}
inline void UnityInitFightInfomation_Award::set_object_id(::google::protobuf::int32 value) {
  set_has_object_id();
  object_id_ = value;
}

// required int32 count = 3;
inline bool UnityInitFightInfomation_Award::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityInitFightInfomation_Award::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityInitFightInfomation_Award::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityInitFightInfomation_Award::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 UnityInitFightInfomation_Award::count() const {
  return count_;
}
inline void UnityInitFightInfomation_Award::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// UnityInitFightInfomation

// repeated .game_connection.UnityInitFightInfomation.PlayerInfo player = 1;
inline int UnityInitFightInfomation::player_size() const {
  return player_.size();
}
inline void UnityInitFightInfomation::clear_player() {
  player_.Clear();
}
inline const ::game_connection::UnityInitFightInfomation_PlayerInfo& UnityInitFightInfomation::player(int index) const {
  return player_.Get(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo* UnityInitFightInfomation::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::game_connection::UnityInitFightInfomation_PlayerInfo* UnityInitFightInfomation::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo >&
UnityInitFightInfomation::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_PlayerInfo >*
UnityInitFightInfomation::mutable_player() {
  return &player_;
}

// required int32 random_seed = 2;
inline bool UnityInitFightInfomation::has_random_seed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnityInitFightInfomation::set_has_random_seed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnityInitFightInfomation::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnityInitFightInfomation::clear_random_seed() {
  random_seed_ = 0;
  clear_has_random_seed();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::random_seed() const {
  return random_seed_;
}
inline void UnityInitFightInfomation::set_random_seed(::google::protobuf::int32 value) {
  set_has_random_seed();
  random_seed_ = value;
}

// required int32 map_id = 3;
inline bool UnityInitFightInfomation::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnityInitFightInfomation::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnityInitFightInfomation::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnityInitFightInfomation::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::map_id() const {
  return map_id_;
}
inline void UnityInitFightInfomation::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required int32 roundtime = 4;
inline bool UnityInitFightInfomation::has_roundtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnityInitFightInfomation::set_has_roundtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnityInitFightInfomation::clear_has_roundtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnityInitFightInfomation::clear_roundtime() {
  roundtime_ = 0;
  clear_has_roundtime();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::roundtime() const {
  return roundtime_;
}
inline void UnityInitFightInfomation::set_roundtime(::google::protobuf::int32 value) {
  set_has_roundtime();
  roundtime_ = value;
}

// required int32 flip_board_time = 5;
inline bool UnityInitFightInfomation::has_flip_board_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnityInitFightInfomation::set_has_flip_board_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnityInitFightInfomation::clear_has_flip_board_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnityInitFightInfomation::clear_flip_board_time() {
  flip_board_time_ = 0;
  clear_has_flip_board_time();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::flip_board_time() const {
  return flip_board_time_;
}
inline void UnityInitFightInfomation::set_flip_board_time(::google::protobuf::int32 value) {
  set_has_flip_board_time();
  flip_board_time_ = value;
}

// required int32 after_flip_board_time = 6;
inline bool UnityInitFightInfomation::has_after_flip_board_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnityInitFightInfomation::set_has_after_flip_board_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnityInitFightInfomation::clear_has_after_flip_board_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnityInitFightInfomation::clear_after_flip_board_time() {
  after_flip_board_time_ = 0;
  clear_has_after_flip_board_time();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::after_flip_board_time() const {
  return after_flip_board_time_;
}
inline void UnityInitFightInfomation::set_after_flip_board_time(::google::protobuf::int32 value) {
  set_has_after_flip_board_time();
  after_flip_board_time_ = value;
}

// required int32 scan_map_time = 7;
inline bool UnityInitFightInfomation::has_scan_map_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnityInitFightInfomation::set_has_scan_map_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnityInitFightInfomation::clear_has_scan_map_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnityInitFightInfomation::clear_scan_map_time() {
  scan_map_time_ = 0;
  clear_has_scan_map_time();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::scan_map_time() const {
  return scan_map_time_;
}
inline void UnityInitFightInfomation::set_scan_map_time(::google::protobuf::int32 value) {
  set_has_scan_map_time();
  scan_map_time_ = value;
}

// repeated .game_connection.UnityInitFightInfomation.Award award = 8;
inline int UnityInitFightInfomation::award_size() const {
  return award_.size();
}
inline void UnityInitFightInfomation::clear_award() {
  award_.Clear();
}
inline const ::game_connection::UnityInitFightInfomation_Award& UnityInitFightInfomation::award(int index) const {
  return award_.Get(index);
}
inline ::game_connection::UnityInitFightInfomation_Award* UnityInitFightInfomation::mutable_award(int index) {
  return award_.Mutable(index);
}
inline ::game_connection::UnityInitFightInfomation_Award* UnityInitFightInfomation::add_award() {
  return award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_Award >&
UnityInitFightInfomation::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_connection::UnityInitFightInfomation_Award >*
UnityInitFightInfomation::mutable_award() {
  return &award_;
}

// optional int32 level = 9;
inline bool UnityInitFightInfomation::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnityInitFightInfomation::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnityInitFightInfomation::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnityInitFightInfomation::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnityInitFightInfomation::level() const {
  return level_;
}
inline void UnityInitFightInfomation::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel>() {
  return ::game_connection::UnityInitFightInfomation_PlayerInfo_IndulgeLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityInitFightInfomation_traits>() {
  return ::game_connection::UnityInitFightInfomation_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityInitFightInfomation_award_type>() {
  return ::game_connection::UnityInitFightInfomation_award_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::UnityInitFightInfomation_EventType>() {
  return ::game_connection::UnityInitFightInfomation_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnityInitFightInfomation_2eproto__INCLUDED
