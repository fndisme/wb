// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginResult.proto

#ifndef PROTOBUF_LoginResult_2eproto__INCLUDED
#define PROTOBUF_LoginResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginResult_2eproto();
void protobuf_AssignDesc_LoginResult_2eproto();
void protobuf_ShutdownFile_LoginResult_2eproto();

class LoginResult;

enum LoginResult_traits {
  LoginResult_traits_value = 3001
};
bool LoginResult_traits_IsValid(int value);
const LoginResult_traits LoginResult_traits_traits_MIN = LoginResult_traits_value;
const LoginResult_traits LoginResult_traits_traits_MAX = LoginResult_traits_value;
const int LoginResult_traits_traits_ARRAYSIZE = LoginResult_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResult_traits_descriptor();
inline const ::std::string& LoginResult_traits_Name(LoginResult_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResult_traits_descriptor(), value);
}
inline bool LoginResult_traits_Parse(
    const ::std::string& name, LoginResult_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResult_traits>(
    LoginResult_traits_descriptor(), name, value);
}
enum LoginResult_FailedReason {
  LoginResult_FailedReason_TOOLATE = 10,
  LoginResult_FailedReason_KEYERROR = 11,
  LoginResult_FailedReason_NOT_FROM_DISPATCHER = 12,
  LoginResult_FailedReason_TOOFAST = 13,
  LoginResult_FailedReason_NOT_NEED_FORCE = 14,
  LoginResult_FailedReason_NOT_SUPPORT_LOGIN_FLAG = 15
};
bool LoginResult_FailedReason_IsValid(int value);
const LoginResult_FailedReason LoginResult_FailedReason_FailedReason_MIN = LoginResult_FailedReason_TOOLATE;
const LoginResult_FailedReason LoginResult_FailedReason_FailedReason_MAX = LoginResult_FailedReason_NOT_SUPPORT_LOGIN_FLAG;
const int LoginResult_FailedReason_FailedReason_ARRAYSIZE = LoginResult_FailedReason_FailedReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResult_FailedReason_descriptor();
inline const ::std::string& LoginResult_FailedReason_Name(LoginResult_FailedReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResult_FailedReason_descriptor(), value);
}
inline bool LoginResult_FailedReason_Parse(
    const ::std::string& name, LoginResult_FailedReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResult_FailedReason>(
    LoginResult_FailedReason_descriptor(), name, value);
}
// ===================================================================

class LoginResult : public ::google::protobuf::Message {
 public:
  LoginResult();
  virtual ~LoginResult();
  
  LoginResult(const LoginResult& from);
  
  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResult& default_instance();
  
  void Swap(LoginResult* other);
  
  // implements Message ----------------------------------------------
  
  LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LoginResult_traits traits;
  static const traits value = LoginResult_traits_value;
  static inline bool traits_IsValid(int value) {
    return LoginResult_traits_IsValid(value);
  }
  static const traits traits_MIN =
    LoginResult_traits_traits_MIN;
  static const traits traits_MAX =
    LoginResult_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    LoginResult_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return LoginResult_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return LoginResult_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return LoginResult_traits_Parse(name, value);
  }
  
  typedef LoginResult_FailedReason FailedReason;
  static const FailedReason TOOLATE = LoginResult_FailedReason_TOOLATE;
  static const FailedReason KEYERROR = LoginResult_FailedReason_KEYERROR;
  static const FailedReason NOT_FROM_DISPATCHER = LoginResult_FailedReason_NOT_FROM_DISPATCHER;
  static const FailedReason TOOFAST = LoginResult_FailedReason_TOOFAST;
  static const FailedReason NOT_NEED_FORCE = LoginResult_FailedReason_NOT_NEED_FORCE;
  static const FailedReason NOT_SUPPORT_LOGIN_FLAG = LoginResult_FailedReason_NOT_SUPPORT_LOGIN_FLAG;
  static inline bool FailedReason_IsValid(int value) {
    return LoginResult_FailedReason_IsValid(value);
  }
  static const FailedReason FailedReason_MIN =
    LoginResult_FailedReason_FailedReason_MIN;
  static const FailedReason FailedReason_MAX =
    LoginResult_FailedReason_FailedReason_MAX;
  static const int FailedReason_ARRAYSIZE =
    LoginResult_FailedReason_FailedReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailedReason_descriptor() {
    return LoginResult_FailedReason_descriptor();
  }
  static inline const ::std::string& FailedReason_Name(FailedReason value) {
    return LoginResult_FailedReason_Name(value);
  }
  static inline bool FailedReason_Parse(const ::std::string& name,
      FailedReason* value) {
    return LoginResult_FailedReason_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int32 failed_reason = 2;
  inline bool has_failed_reason() const;
  inline void clear_failed_reason();
  static const int kFailedReasonFieldNumber = 2;
  inline ::google::protobuf::int32 failed_reason() const;
  inline void set_failed_reason(::google::protobuf::int32 value);
  
  // optional int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.LoginResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_failed_reason();
  inline void clear_has_failed_reason();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool result_;
  ::google::protobuf::int32 failed_reason_;
  ::google::protobuf::int32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LoginResult_2eproto();
  friend void protobuf_AssignDesc_LoginResult_2eproto();
  friend void protobuf_ShutdownFile_LoginResult_2eproto();
  
  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginResult

// required bool result = 1;
inline bool LoginResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool LoginResult::result() const {
  return result_;
}
inline void LoginResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional int32 failed_reason = 2;
inline bool LoginResult::has_failed_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_failed_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_failed_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_failed_reason() {
  failed_reason_ = 0;
  clear_has_failed_reason();
}
inline ::google::protobuf::int32 LoginResult::failed_reason() const {
  return failed_reason_;
}
inline void LoginResult::set_failed_reason(::google::protobuf::int32 value) {
  set_has_failed_reason();
  failed_reason_ = value;
}

// optional int32 server_id = 3;
inline bool LoginResult::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResult::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResult::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResult::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 LoginResult::server_id() const {
  return server_id_;
}
inline void LoginResult::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::LoginResult_traits>() {
  return ::game_connection::LoginResult_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::LoginResult_FailedReason>() {
  return ::game_connection::LoginResult_FailedReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginResult_2eproto__INCLUDED
