// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChallengeRoomInfomation.proto

#ifndef PROTOBUF_ChallengeRoomInfomation_2eproto__INCLUDED
#define PROTOBUF_ChallengeRoomInfomation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChallengeRoomInfomation_2eproto();
void protobuf_AssignDesc_ChallengeRoomInfomation_2eproto();
void protobuf_ShutdownFile_ChallengeRoomInfomation_2eproto();

class ChallengeRoomInfomation;

// ===================================================================

class ChallengeRoomInfomation : public ::google::protobuf::Message {
 public:
  ChallengeRoomInfomation();
  virtual ~ChallengeRoomInfomation();
  
  ChallengeRoomInfomation(const ChallengeRoomInfomation& from);
  
  inline ChallengeRoomInfomation& operator=(const ChallengeRoomInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRoomInfomation& default_instance();
  
  void Swap(ChallengeRoomInfomation* other);
  
  // implements Message ----------------------------------------------
  
  ChallengeRoomInfomation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeRoomInfomation& from);
  void MergeFrom(const ChallengeRoomInfomation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required bool has_password = 6;
  inline bool has_has_password() const;
  inline void clear_has_password();
  static const int kHasPasswordFieldNumber = 6;
  inline bool has_password() const;
  inline void set_has_password(bool value);
  
  // required bytes name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 red_team_max_number = 1;
  inline bool has_red_team_max_number() const;
  inline void clear_red_team_max_number();
  static const int kRedTeamMaxNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 red_team_max_number() const;
  inline void set_red_team_max_number(::google::protobuf::uint32 value);
  
  // required uint32 blue_team_max_number = 2;
  inline bool has_blue_team_max_number() const;
  inline void clear_blue_team_max_number();
  static const int kBlueTeamMaxNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 blue_team_max_number() const;
  inline void set_blue_team_max_number(::google::protobuf::uint32 value);
  
  // required bool is_fighting = 3;
  inline bool has_is_fighting() const;
  inline void clear_is_fighting();
  static const int kIsFightingFieldNumber = 3;
  inline bool is_fighting() const;
  inline void set_is_fighting(bool value);
  
  // repeated bytes player = 4;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 4;
  inline const ::std::string& player(int index) const;
  inline ::std::string* mutable_player(int index);
  inline void set_player(int index, const ::std::string& value);
  inline void set_player(int index, const char* value);
  inline void set_player(int index, const void* value, size_t size);
  inline ::std::string* add_player();
  inline void add_player(const ::std::string& value);
  inline void add_player(const char* value);
  inline void add_player(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& player() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_player();
  
  // @@protoc_insertion_point(class_scope:game_connection.ChallengeRoomInfomation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_has_password();
  inline void clear_has_has_password();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_red_team_max_number();
  inline void clear_has_red_team_max_number();
  inline void set_has_blue_team_max_number();
  inline void clear_has_blue_team_max_number();
  inline void set_has_is_fighting();
  inline void clear_has_is_fighting();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 red_team_max_number_;
  ::std::string* name_;
  bool has_password_;
  bool is_fighting_;
  ::google::protobuf::uint32 blue_team_max_number_;
  ::google::protobuf::RepeatedPtrField< ::std::string> player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ChallengeRoomInfomation_2eproto();
  friend void protobuf_AssignDesc_ChallengeRoomInfomation_2eproto();
  friend void protobuf_ShutdownFile_ChallengeRoomInfomation_2eproto();
  
  void InitAsDefaultInstance();
  static ChallengeRoomInfomation* default_instance_;
};
// ===================================================================


// ===================================================================

// ChallengeRoomInfomation

// required int32 id = 5;
inline bool ChallengeRoomInfomation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeRoomInfomation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeRoomInfomation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeRoomInfomation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChallengeRoomInfomation::id() const {
  return id_;
}
inline void ChallengeRoomInfomation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool has_password = 6;
inline bool ChallengeRoomInfomation::has_has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeRoomInfomation::set_has_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeRoomInfomation::clear_has_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeRoomInfomation::clear_has_password() {
  has_password_ = false;
  clear_has_has_password();
}
inline bool ChallengeRoomInfomation::has_password() const {
  return has_password_;
}
inline void ChallengeRoomInfomation::set_has_password(bool value) {
  set_has_has_password();
  has_password_ = value;
}

// required bytes name = 7;
inline bool ChallengeRoomInfomation::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeRoomInfomation::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeRoomInfomation::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeRoomInfomation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChallengeRoomInfomation::name() const {
  return *name_;
}
inline void ChallengeRoomInfomation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeRoomInfomation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChallengeRoomInfomation::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeRoomInfomation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChallengeRoomInfomation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 red_team_max_number = 1;
inline bool ChallengeRoomInfomation::has_red_team_max_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeRoomInfomation::set_has_red_team_max_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeRoomInfomation::clear_has_red_team_max_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeRoomInfomation::clear_red_team_max_number() {
  red_team_max_number_ = 0u;
  clear_has_red_team_max_number();
}
inline ::google::protobuf::uint32 ChallengeRoomInfomation::red_team_max_number() const {
  return red_team_max_number_;
}
inline void ChallengeRoomInfomation::set_red_team_max_number(::google::protobuf::uint32 value) {
  set_has_red_team_max_number();
  red_team_max_number_ = value;
}

// required uint32 blue_team_max_number = 2;
inline bool ChallengeRoomInfomation::has_blue_team_max_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeRoomInfomation::set_has_blue_team_max_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChallengeRoomInfomation::clear_has_blue_team_max_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChallengeRoomInfomation::clear_blue_team_max_number() {
  blue_team_max_number_ = 0u;
  clear_has_blue_team_max_number();
}
inline ::google::protobuf::uint32 ChallengeRoomInfomation::blue_team_max_number() const {
  return blue_team_max_number_;
}
inline void ChallengeRoomInfomation::set_blue_team_max_number(::google::protobuf::uint32 value) {
  set_has_blue_team_max_number();
  blue_team_max_number_ = value;
}

// required bool is_fighting = 3;
inline bool ChallengeRoomInfomation::has_is_fighting() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChallengeRoomInfomation::set_has_is_fighting() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChallengeRoomInfomation::clear_has_is_fighting() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChallengeRoomInfomation::clear_is_fighting() {
  is_fighting_ = false;
  clear_has_is_fighting();
}
inline bool ChallengeRoomInfomation::is_fighting() const {
  return is_fighting_;
}
inline void ChallengeRoomInfomation::set_is_fighting(bool value) {
  set_has_is_fighting();
  is_fighting_ = value;
}

// repeated bytes player = 4;
inline int ChallengeRoomInfomation::player_size() const {
  return player_.size();
}
inline void ChallengeRoomInfomation::clear_player() {
  player_.Clear();
}
inline const ::std::string& ChallengeRoomInfomation::player(int index) const {
  return player_.Get(index);
}
inline ::std::string* ChallengeRoomInfomation::mutable_player(int index) {
  return player_.Mutable(index);
}
inline void ChallengeRoomInfomation::set_player(int index, const ::std::string& value) {
  player_.Mutable(index)->assign(value);
}
inline void ChallengeRoomInfomation::set_player(int index, const char* value) {
  player_.Mutable(index)->assign(value);
}
inline void ChallengeRoomInfomation::set_player(int index, const void* value, size_t size) {
  player_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeRoomInfomation::add_player() {
  return player_.Add();
}
inline void ChallengeRoomInfomation::add_player(const ::std::string& value) {
  player_.Add()->assign(value);
}
inline void ChallengeRoomInfomation::add_player(const char* value) {
  player_.Add()->assign(value);
}
inline void ChallengeRoomInfomation::add_player(const void* value, size_t size) {
  player_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChallengeRoomInfomation::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChallengeRoomInfomation::mutable_player() {
  return &player_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChallengeRoomInfomation_2eproto__INCLUDED
