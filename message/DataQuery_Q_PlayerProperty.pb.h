// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataQuery_Q_PlayerProperty.proto

#ifndef PROTOBUF_DataQuery_5fQ_5fPlayerProperty_2eproto__INCLUDED
#define PROTOBUF_DataQuery_5fQ_5fPlayerProperty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataQuery_5fQ_5fPlayerProperty_2eproto();
void protobuf_AssignDesc_DataQuery_5fQ_5fPlayerProperty_2eproto();
void protobuf_ShutdownFile_DataQuery_5fQ_5fPlayerProperty_2eproto();

class DataQuery_Q_PlayerProperty;

enum DataQuery_Q_PlayerProperty_traits {
  DataQuery_Q_PlayerProperty_traits_value = 7002
};
bool DataQuery_Q_PlayerProperty_traits_IsValid(int value);
const DataQuery_Q_PlayerProperty_traits DataQuery_Q_PlayerProperty_traits_traits_MIN = DataQuery_Q_PlayerProperty_traits_value;
const DataQuery_Q_PlayerProperty_traits DataQuery_Q_PlayerProperty_traits_traits_MAX = DataQuery_Q_PlayerProperty_traits_value;
const int DataQuery_Q_PlayerProperty_traits_traits_ARRAYSIZE = DataQuery_Q_PlayerProperty_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataQuery_Q_PlayerProperty_traits_descriptor();
inline const ::std::string& DataQuery_Q_PlayerProperty_traits_Name(DataQuery_Q_PlayerProperty_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataQuery_Q_PlayerProperty_traits_descriptor(), value);
}
inline bool DataQuery_Q_PlayerProperty_traits_Parse(
    const ::std::string& name, DataQuery_Q_PlayerProperty_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataQuery_Q_PlayerProperty_traits>(
    DataQuery_Q_PlayerProperty_traits_descriptor(), name, value);
}
// ===================================================================

class DataQuery_Q_PlayerProperty : public ::google::protobuf::Message {
 public:
  DataQuery_Q_PlayerProperty();
  virtual ~DataQuery_Q_PlayerProperty();
  
  DataQuery_Q_PlayerProperty(const DataQuery_Q_PlayerProperty& from);
  
  inline DataQuery_Q_PlayerProperty& operator=(const DataQuery_Q_PlayerProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataQuery_Q_PlayerProperty& default_instance();
  
  void Swap(DataQuery_Q_PlayerProperty* other);
  
  // implements Message ----------------------------------------------
  
  DataQuery_Q_PlayerProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataQuery_Q_PlayerProperty& from);
  void MergeFrom(const DataQuery_Q_PlayerProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataQuery_Q_PlayerProperty_traits traits;
  static const traits value = DataQuery_Q_PlayerProperty_traits_value;
  static inline bool traits_IsValid(int value) {
    return DataQuery_Q_PlayerProperty_traits_IsValid(value);
  }
  static const traits traits_MIN =
    DataQuery_Q_PlayerProperty_traits_traits_MIN;
  static const traits traits_MAX =
    DataQuery_Q_PlayerProperty_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    DataQuery_Q_PlayerProperty_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return DataQuery_Q_PlayerProperty_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return DataQuery_Q_PlayerProperty_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return DataQuery_Q_PlayerProperty_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 query_code = 1;
  inline bool has_query_code() const;
  inline void clear_query_code();
  static const int kQueryCodeFieldNumber = 1;
  inline ::google::protobuf::int32 query_code() const;
  inline void set_query_code(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional bool need_base = 4;
  inline bool has_need_base() const;
  inline void clear_need_base();
  static const int kNeedBaseFieldNumber = 4;
  inline bool need_base() const;
  inline void set_need_base(bool value);
  
  // optional bool need_fight = 5;
  inline bool has_need_fight() const;
  inline void clear_need_fight();
  static const int kNeedFightFieldNumber = 5;
  inline bool need_fight() const;
  inline void set_need_fight(bool value);
  
  // @@protoc_insertion_point(class_scope:game_connection.DataQuery_Q_PlayerProperty)
 private:
  inline void set_has_query_code();
  inline void clear_has_query_code();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_need_base();
  inline void clear_has_need_base();
  inline void set_has_need_fight();
  inline void clear_has_need_fight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 query_code_;
  ::google::protobuf::int32 id_;
  ::std::string* key_;
  bool need_base_;
  bool need_fight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DataQuery_5fQ_5fPlayerProperty_2eproto();
  friend void protobuf_AssignDesc_DataQuery_5fQ_5fPlayerProperty_2eproto();
  friend void protobuf_ShutdownFile_DataQuery_5fQ_5fPlayerProperty_2eproto();
  
  void InitAsDefaultInstance();
  static DataQuery_Q_PlayerProperty* default_instance_;
};
// ===================================================================


// ===================================================================

// DataQuery_Q_PlayerProperty

// required int32 query_code = 1;
inline bool DataQuery_Q_PlayerProperty::has_query_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataQuery_Q_PlayerProperty::set_has_query_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataQuery_Q_PlayerProperty::clear_has_query_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataQuery_Q_PlayerProperty::clear_query_code() {
  query_code_ = 0;
  clear_has_query_code();
}
inline ::google::protobuf::int32 DataQuery_Q_PlayerProperty::query_code() const {
  return query_code_;
}
inline void DataQuery_Q_PlayerProperty::set_query_code(::google::protobuf::int32 value) {
  set_has_query_code();
  query_code_ = value;
}

// required int32 id = 2;
inline bool DataQuery_Q_PlayerProperty::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataQuery_Q_PlayerProperty::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataQuery_Q_PlayerProperty::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataQuery_Q_PlayerProperty::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DataQuery_Q_PlayerProperty::id() const {
  return id_;
}
inline void DataQuery_Q_PlayerProperty::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string key = 3;
inline bool DataQuery_Q_PlayerProperty::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataQuery_Q_PlayerProperty::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataQuery_Q_PlayerProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataQuery_Q_PlayerProperty::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& DataQuery_Q_PlayerProperty::key() const {
  return *key_;
}
inline void DataQuery_Q_PlayerProperty::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DataQuery_Q_PlayerProperty::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DataQuery_Q_PlayerProperty::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataQuery_Q_PlayerProperty::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* DataQuery_Q_PlayerProperty::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool need_base = 4;
inline bool DataQuery_Q_PlayerProperty::has_need_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataQuery_Q_PlayerProperty::set_has_need_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataQuery_Q_PlayerProperty::clear_has_need_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataQuery_Q_PlayerProperty::clear_need_base() {
  need_base_ = false;
  clear_has_need_base();
}
inline bool DataQuery_Q_PlayerProperty::need_base() const {
  return need_base_;
}
inline void DataQuery_Q_PlayerProperty::set_need_base(bool value) {
  set_has_need_base();
  need_base_ = value;
}

// optional bool need_fight = 5;
inline bool DataQuery_Q_PlayerProperty::has_need_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataQuery_Q_PlayerProperty::set_has_need_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataQuery_Q_PlayerProperty::clear_has_need_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataQuery_Q_PlayerProperty::clear_need_fight() {
  need_fight_ = false;
  clear_has_need_fight();
}
inline bool DataQuery_Q_PlayerProperty::need_fight() const {
  return need_fight_;
}
inline void DataQuery_Q_PlayerProperty::set_need_fight(bool value) {
  set_has_need_fight();
  need_fight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::DataQuery_Q_PlayerProperty_traits>() {
  return ::game_connection::DataQuery_Q_PlayerProperty_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataQuery_5fQ_5fPlayerProperty_2eproto__INCLUDED
