// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoinInChallengeRoom.proto

#ifndef PROTOBUF_JoinInChallengeRoom_2eproto__INCLUDED
#define PROTOBUF_JoinInChallengeRoom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_JoinInChallengeRoom_2eproto();
void protobuf_AssignDesc_JoinInChallengeRoom_2eproto();
void protobuf_ShutdownFile_JoinInChallengeRoom_2eproto();

class JoinInChallengeRoom;

enum JoinInChallengeRoom_traits {
  JoinInChallengeRoom_traits_value = 3011
};
bool JoinInChallengeRoom_traits_IsValid(int value);
const JoinInChallengeRoom_traits JoinInChallengeRoom_traits_traits_MIN = JoinInChallengeRoom_traits_value;
const JoinInChallengeRoom_traits JoinInChallengeRoom_traits_traits_MAX = JoinInChallengeRoom_traits_value;
const int JoinInChallengeRoom_traits_traits_ARRAYSIZE = JoinInChallengeRoom_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* JoinInChallengeRoom_traits_descriptor();
inline const ::std::string& JoinInChallengeRoom_traits_Name(JoinInChallengeRoom_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    JoinInChallengeRoom_traits_descriptor(), value);
}
inline bool JoinInChallengeRoom_traits_Parse(
    const ::std::string& name, JoinInChallengeRoom_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JoinInChallengeRoom_traits>(
    JoinInChallengeRoom_traits_descriptor(), name, value);
}
// ===================================================================

class JoinInChallengeRoom : public ::google::protobuf::Message {
 public:
  JoinInChallengeRoom();
  virtual ~JoinInChallengeRoom();
  
  JoinInChallengeRoom(const JoinInChallengeRoom& from);
  
  inline JoinInChallengeRoom& operator=(const JoinInChallengeRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinInChallengeRoom& default_instance();
  
  void Swap(JoinInChallengeRoom* other);
  
  // implements Message ----------------------------------------------
  
  JoinInChallengeRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinInChallengeRoom& from);
  void MergeFrom(const JoinInChallengeRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef JoinInChallengeRoom_traits traits;
  static const traits value = JoinInChallengeRoom_traits_value;
  static inline bool traits_IsValid(int value) {
    return JoinInChallengeRoom_traits_IsValid(value);
  }
  static const traits traits_MIN =
    JoinInChallengeRoom_traits_traits_MIN;
  static const traits traits_MAX =
    JoinInChallengeRoom_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    JoinInChallengeRoom_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return JoinInChallengeRoom_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return JoinInChallengeRoom_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return JoinInChallengeRoom_traits_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required int32 fleet_type = 3;
  inline bool has_fleet_type() const;
  inline void clear_fleet_type();
  static const int kFleetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 fleet_type() const;
  inline void set_fleet_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.JoinInChallengeRoom)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_fleet_type();
  inline void clear_has_fleet_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* password_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 fleet_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_JoinInChallengeRoom_2eproto();
  friend void protobuf_AssignDesc_JoinInChallengeRoom_2eproto();
  friend void protobuf_ShutdownFile_JoinInChallengeRoom_2eproto();
  
  void InitAsDefaultInstance();
  static JoinInChallengeRoom* default_instance_;
};
// ===================================================================


// ===================================================================

// JoinInChallengeRoom

// required int32 room_id = 1;
inline bool JoinInChallengeRoom::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinInChallengeRoom::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinInChallengeRoom::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinInChallengeRoom::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 JoinInChallengeRoom::room_id() const {
  return room_id_;
}
inline void JoinInChallengeRoom::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string password = 2;
inline bool JoinInChallengeRoom::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinInChallengeRoom::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinInChallengeRoom::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinInChallengeRoom::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& JoinInChallengeRoom::password() const {
  return *password_;
}
inline void JoinInChallengeRoom::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void JoinInChallengeRoom::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void JoinInChallengeRoom::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JoinInChallengeRoom::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* JoinInChallengeRoom::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 fleet_type = 3;
inline bool JoinInChallengeRoom::has_fleet_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinInChallengeRoom::set_has_fleet_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinInChallengeRoom::clear_has_fleet_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinInChallengeRoom::clear_fleet_type() {
  fleet_type_ = 0;
  clear_has_fleet_type();
}
inline ::google::protobuf::int32 JoinInChallengeRoom::fleet_type() const {
  return fleet_type_;
}
inline void JoinInChallengeRoom::set_fleet_type(::google::protobuf::int32 value) {
  set_has_fleet_type();
  fleet_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::JoinInChallengeRoom_traits>() {
  return ::game_connection::JoinInChallengeRoom_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JoinInChallengeRoom_2eproto__INCLUDED
