// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class Login;

enum Login_traits {
  Login_traits_value = 3000
};
bool Login_traits_IsValid(int value);
const Login_traits Login_traits_traits_MIN = Login_traits_value;
const Login_traits Login_traits_traits_MAX = Login_traits_value;
const int Login_traits_traits_ARRAYSIZE = Login_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* Login_traits_descriptor();
inline const ::std::string& Login_traits_Name(Login_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    Login_traits_descriptor(), value);
}
inline bool Login_traits_Parse(
    const ::std::string& name, Login_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Login_traits>(
    Login_traits_descriptor(), name, value);
}
enum Login_Action {
  Login_Action_Normal = 0,
  Login_Action_ForceOffline = 1
};
bool Login_Action_IsValid(int value);
const Login_Action Login_Action_Action_MIN = Login_Action_Normal;
const Login_Action Login_Action_Action_MAX = Login_Action_ForceOffline;
const int Login_Action_Action_ARRAYSIZE = Login_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Login_Action_descriptor();
inline const ::std::string& Login_Action_Name(Login_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Login_Action_descriptor(), value);
}
inline bool Login_Action_Parse(
    const ::std::string& name, Login_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Login_Action>(
    Login_Action_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();
  
  Login(const Login& from);
  
  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();
  
  void Swap(Login* other);
  
  // implements Message ----------------------------------------------
  
  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Login_traits traits;
  static const traits value = Login_traits_value;
  static inline bool traits_IsValid(int value) {
    return Login_traits_IsValid(value);
  }
  static const traits traits_MIN =
    Login_traits_traits_MIN;
  static const traits traits_MAX =
    Login_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    Login_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return Login_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return Login_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return Login_traits_Parse(name, value);
  }
  
  typedef Login_Action Action;
  static const Action Normal = Login_Action_Normal;
  static const Action ForceOffline = Login_Action_ForceOffline;
  static inline bool Action_IsValid(int value) {
    return Login_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Login_Action_Action_MIN;
  static const Action Action_MAX =
    Login_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Login_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Login_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Login_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Login_Action_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:game_connection.Login)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::google::protobuf::int32 flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required string key = 1;
inline bool Login::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Login::key() const {
  return *key_;
}
inline void Login::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Login::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Login::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Login::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 2;
inline bool Login::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Login::flag() const {
  return flag_;
}
inline void Login::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_connection

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::Login_traits>() {
  return ::game_connection::Login_traits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_connection::Login_Action>() {
  return ::game_connection::Login_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
