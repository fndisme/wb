// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HttpMessage.proto

#ifndef PROTOBUF_HttpMessage_2eproto__INCLUDED
#define PROTOBUF_HttpMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WebGame {
namespace Server {
namespace Stock {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HttpMessage_2eproto();
void protobuf_AssignDesc_HttpMessage_2eproto();
void protobuf_ShutdownFile_HttpMessage_2eproto();

class HttpMessage;

enum HttpMessage_traits {
  HttpMessage_traits_value = 4
};
bool HttpMessage_traits_IsValid(int value);
const HttpMessage_traits HttpMessage_traits_traits_MIN = HttpMessage_traits_value;
const HttpMessage_traits HttpMessage_traits_traits_MAX = HttpMessage_traits_value;
const int HttpMessage_traits_traits_ARRAYSIZE = HttpMessage_traits_traits_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpMessage_traits_descriptor();
inline const ::std::string& HttpMessage_traits_Name(HttpMessage_traits value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpMessage_traits_descriptor(), value);
}
inline bool HttpMessage_traits_Parse(
    const ::std::string& name, HttpMessage_traits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpMessage_traits>(
    HttpMessage_traits_descriptor(), name, value);
}
// ===================================================================

class HttpMessage : public ::google::protobuf::Message {
 public:
  HttpMessage();
  virtual ~HttpMessage();

  HttpMessage(const HttpMessage& from);

  inline HttpMessage& operator=(const HttpMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpMessage& default_instance();

  void Swap(HttpMessage* other);

  // implements Message ----------------------------------------------

  HttpMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpMessage& from);
  void MergeFrom(const HttpMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HttpMessage_traits traits;
  static const traits value = HttpMessage_traits_value;
  static inline bool traits_IsValid(int value) {
    return HttpMessage_traits_IsValid(value);
  }
  static const traits traits_MIN =
    HttpMessage_traits_traits_MIN;
  static const traits traits_MAX =
    HttpMessage_traits_traits_MAX;
  static const int traits_ARRAYSIZE =
    HttpMessage_traits_traits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  traits_descriptor() {
    return HttpMessage_traits_descriptor();
  }
  static inline const ::std::string& traits_Name(traits value) {
    return HttpMessage_traits_Name(value);
  }
  static inline bool traits_Parse(const ::std::string& name,
      traits* value) {
    return HttpMessage_traits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline ::google::protobuf::int64 session() const;
  inline void set_session(::google::protobuf::int64 value);

  // required int64 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int64 type() const;
  inline void set_type(::google::protobuf::int64 value);

  // required bytes information = 3;
  inline bool has_information() const;
  inline void clear_information();
  static const int kInformationFieldNumber = 3;
  inline const ::std::string& information() const;
  inline void set_information(const ::std::string& value);
  inline void set_information(const char* value);
  inline void set_information(const void* value, size_t size);
  inline ::std::string* mutable_information();
  inline ::std::string* release_information();
  inline void set_allocated_information(::std::string* information);

  // @@protoc_insertion_point(class_scope:WebGame.Server.Stock.HttpMessage)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_information();
  inline void clear_has_information();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 session_;
  ::google::protobuf::int64 type_;
  ::std::string* information_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_HttpMessage_2eproto();
  friend void protobuf_AssignDesc_HttpMessage_2eproto();
  friend void protobuf_ShutdownFile_HttpMessage_2eproto();

  void InitAsDefaultInstance();
  static HttpMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// HttpMessage

// required int64 session = 1;
inline bool HttpMessage::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpMessage::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpMessage::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpMessage::clear_session() {
  session_ = GOOGLE_LONGLONG(0);
  clear_has_session();
}
inline ::google::protobuf::int64 HttpMessage::session() const {
  return session_;
}
inline void HttpMessage::set_session(::google::protobuf::int64 value) {
  set_has_session();
  session_ = value;
}

// required int64 type = 2;
inline bool HttpMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpMessage::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::int64 HttpMessage::type() const {
  return type_;
}
inline void HttpMessage::set_type(::google::protobuf::int64 value) {
  set_has_type();
  type_ = value;
}

// required bytes information = 3;
inline bool HttpMessage::has_information() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpMessage::set_has_information() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpMessage::clear_has_information() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpMessage::clear_information() {
  if (information_ != &::google::protobuf::internal::kEmptyString) {
    information_->clear();
  }
  clear_has_information();
}
inline const ::std::string& HttpMessage::information() const {
  return *information_;
}
inline void HttpMessage::set_information(const ::std::string& value) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::kEmptyString) {
    information_ = new ::std::string;
  }
  information_->assign(value);
}
inline void HttpMessage::set_information(const char* value) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::kEmptyString) {
    information_ = new ::std::string;
  }
  information_->assign(value);
}
inline void HttpMessage::set_information(const void* value, size_t size) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::kEmptyString) {
    information_ = new ::std::string;
  }
  information_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpMessage::mutable_information() {
  set_has_information();
  if (information_ == &::google::protobuf::internal::kEmptyString) {
    information_ = new ::std::string;
  }
  return information_;
}
inline ::std::string* HttpMessage::release_information() {
  clear_has_information();
  if (information_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = information_;
    information_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HttpMessage::set_allocated_information(::std::string* information) {
  if (information_ != &::google::protobuf::internal::kEmptyString) {
    delete information_;
  }
  if (information) {
    set_has_information();
    information_ = information;
  } else {
    clear_has_information();
    information_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Stock
}  // namespace Server
}  // namespace WebGame

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WebGame::Server::Stock::HttpMessage_traits>() {
  return ::WebGame::Server::Stock::HttpMessage_traits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HttpMessage_2eproto__INCLUDED
